<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Clients\PageInsights;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\Request;
use Mittwald\ApiClient\Error\UnexpectedResponseException;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataBadRequestResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataForbiddenResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataRequest;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataTooManyRequestsResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetStraceData\PageinsightsGetStraceDataBadRequestResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetStraceData\PageinsightsGetStraceDataDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetStraceData\PageinsightsGetStraceDataForbiddenResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetStraceData\PageinsightsGetStraceDataOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetStraceData\PageinsightsGetStraceDataRequest;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetStraceData\PageinsightsGetStraceDataTooManyRequestsResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectBadRequestResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectForbiddenResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectRequest;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectTooManyRequestsResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsScheduleStrace\PageinsightsScheduleStraceAcceptedResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsScheduleStrace\PageinsightsScheduleStraceBadRequestResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsScheduleStrace\PageinsightsScheduleStraceDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsScheduleStrace\PageinsightsScheduleStraceForbiddenResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsScheduleStrace\PageinsightsScheduleStraceRequest;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsScheduleStrace\PageinsightsScheduleStraceTooManyRequestsResponse;

/**
 * Client for Page Insights API
 *
 * The page insights API allows you to get page insights information.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class PageInsightsClientImpl implements PageInsightsClient
{
    private Client $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    /**
     * Get detailed performance data for a given domain and path.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Page-Insights/operation/pageinsights-get-performance-data
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param PageinsightsGetPerformanceDataRequest $request An object representing the request for this operation
     * @return PageinsightsGetPerformanceDataOKResponse OK
     */
    public function pageinsightsGetPerformanceData(PageinsightsGetPerformanceDataRequest $request): PageinsightsGetPerformanceDataOKResponse
    {
        $httpRequest = new Request(PageinsightsGetPerformanceDataRequest::method, $request->buildUrl());
        $httpResponse = $this->client->send($httpRequest, $request->buildRequestOptions());
        if ($httpResponse->getStatusCode() === 200) {
            return PageinsightsGetPerformanceDataOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            400 => PageinsightsGetPerformanceDataBadRequestResponse::fromResponse($httpResponse),
            403 => PageinsightsGetPerformanceDataForbiddenResponse::fromResponse($httpResponse),
            429 => PageinsightsGetPerformanceDataTooManyRequestsResponse::fromResponse($httpResponse),
            default => PageinsightsGetPerformanceDataDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Get all data for a given strace.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Page-Insights/operation/pageinsights-get-strace-data
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param PageinsightsGetStraceDataRequest $request An object representing the request for this operation
     * @return PageinsightsGetStraceDataOKResponse OK
     */
    public function pageinsightsGetStraceData(PageinsightsGetStraceDataRequest $request): PageinsightsGetStraceDataOKResponse
    {
        $httpRequest = new Request(PageinsightsGetStraceDataRequest::method, $request->buildUrl());
        $httpResponse = $this->client->send($httpRequest, $request->buildRequestOptions());
        if ($httpResponse->getStatusCode() === 200) {
            return PageinsightsGetStraceDataOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            400 => PageinsightsGetStraceDataBadRequestResponse::fromResponse($httpResponse),
            403 => PageinsightsGetStraceDataForbiddenResponse::fromResponse($httpResponse),
            429 => PageinsightsGetStraceDataTooManyRequestsResponse::fromResponse($httpResponse),
            default => PageinsightsGetStraceDataDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * List websites (specified as domain and path) from a project where performance data is available.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Page-Insights/operation/pageinsights-list-performance-data-for-project
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param PageinsightsListPerformanceDataForProjectRequest $request An object representing the request for this operation
     * @return PageinsightsListPerformanceDataForProjectOKResponse OK
     */
    public function pageinsightsListPerformanceDataForProject(PageinsightsListPerformanceDataForProjectRequest $request): PageinsightsListPerformanceDataForProjectOKResponse
    {
        $httpRequest = new Request(PageinsightsListPerformanceDataForProjectRequest::method, $request->buildUrl());
        $httpResponse = $this->client->send($httpRequest, $request->buildRequestOptions());
        if ($httpResponse->getStatusCode() === 200) {
            return PageinsightsListPerformanceDataForProjectOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            400 => PageinsightsListPerformanceDataForProjectBadRequestResponse::fromResponse($httpResponse),
            403 => PageinsightsListPerformanceDataForProjectForbiddenResponse::fromResponse($httpResponse),
            429 => PageinsightsListPerformanceDataForProjectTooManyRequestsResponse::fromResponse($httpResponse),
            default => PageinsightsListPerformanceDataForProjectDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Schedule a strace measurement for a single http request.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Page-Insights/operation/pageinsights-schedule-strace
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param PageinsightsScheduleStraceRequest $request An object representing the request for this operation
     * @return PageinsightsScheduleStraceAcceptedResponse Scheduled
     */
    public function pageinsightsScheduleStrace(PageinsightsScheduleStraceRequest $request): PageinsightsScheduleStraceAcceptedResponse
    {
        $httpRequest = new Request(PageinsightsScheduleStraceRequest::method, $request->buildUrl());
        $httpResponse = $this->client->send($httpRequest, $request->buildRequestOptions());
        if ($httpResponse->getStatusCode() === 202) {
            return PageinsightsScheduleStraceAcceptedResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            400 => PageinsightsScheduleStraceBadRequestResponse::fromResponse($httpResponse),
            403 => PageinsightsScheduleStraceForbiddenResponse::fromResponse($httpResponse),
            429 => PageinsightsScheduleStraceTooManyRequestsResponse::fromResponse($httpResponse),
            default => PageinsightsScheduleStraceDefaultResponse::fromResponse($httpResponse),
        });
    }
}
