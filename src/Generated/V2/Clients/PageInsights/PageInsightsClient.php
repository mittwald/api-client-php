<?php

namespace Mittwald\ApiClient\Generated\V2\Clients\PageInsights;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\Request;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceData200Response;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceData400Response;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceData403Response;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataRequest;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProject200Response;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProject400Response;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProject403Response;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\PageInsights\PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectRequest;

/**
 * Client for Page Insights API
 *
 * The page insights API allows you to get page insights information.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class PageInsightsClient
{
    private Client $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    /**
     * Get detailed performance data for a given domain and path.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Page-Insights/operation/pageinsights-get-performance-data
     * @throws GuzzleException
     * @param PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataRequest $request An object representing the request for this operation
     * @return PageinsightsGetPerformanceData\PageinsightsGetPerformanceData200Response|PageinsightsGetPerformanceData\PageinsightsGetPerformanceData400Response|PageinsightsGetPerformanceData\PageinsightsGetPerformanceData403Response|PageinsightsGetPerformanceData\PageinsightsGetPerformanceDataDefaultResponse OK
     */
    public function pageinsightsGetPerformanceData(PageinsightsGetPerformanceDataRequest $request): PageinsightsGetPerformanceData200Response|PageinsightsGetPerformanceData400Response|PageinsightsGetPerformanceData403Response|PageinsightsGetPerformanceDataDefaultResponse
    {
        $httpRequest = new Request(PageinsightsGetPerformanceDataRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200 => PageinsightsGetPerformanceData200Response::fromResponse($httpResponse),
            400 => PageinsightsGetPerformanceData400Response::fromResponse($httpResponse),
            403 => PageinsightsGetPerformanceData403Response::fromResponse($httpResponse),
            default => PageinsightsGetPerformanceDataDefaultResponse::fromResponse($httpResponse),
        };
    }

    /**
     * List websites (specified as domain and path) from a project where performance data is available.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Page-Insights/operation/pageinsights-list-performance-data-for-project
     * @throws GuzzleException
     * @param PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectRequest $request An object representing the request for this operation
     * @return PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProject200Response|PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProject400Response|PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProject403Response|PageinsightsListPerformanceDataForProject\PageinsightsListPerformanceDataForProjectDefaultResponse OK
     */
    public function pageinsightsListPerformanceDataForProject(PageinsightsListPerformanceDataForProjectRequest $request): PageinsightsListPerformanceDataForProject200Response|PageinsightsListPerformanceDataForProject400Response|PageinsightsListPerformanceDataForProject403Response|PageinsightsListPerformanceDataForProjectDefaultResponse
    {
        $httpRequest = new Request(PageinsightsListPerformanceDataForProjectRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200 => PageinsightsListPerformanceDataForProject200Response::fromResponse($httpResponse),
            400 => PageinsightsListPerformanceDataForProject400Response::fromResponse($httpResponse),
            403 => PageinsightsListPerformanceDataForProject403Response::fromResponse($httpResponse),
            default => PageinsightsListPerformanceDataForProjectDefaultResponse::fromResponse($httpResponse),
        };
    }
}
