<?php

namespace Mittwald\ApiClient\Generated\V2\Clients\File;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\Request;
use Mittwald\ApiClient\Client\StringResponse;
use Mittwald\ApiClient\Error\UnexpectedResponseException;
use Mittwald\ApiClient\Generated\V2\Clients\File\CreateFile\CreateFileBadRequestResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\CreateFile\CreateFileCreatedResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\CreateFile\CreateFileDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\CreateFile\CreateFileInternalServerErrorResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\CreateFile\CreateFileRequest;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTokenRules\DeprecatedFileGetFileTokenRulesDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTokenRules\DeprecatedFileGetFileTokenRulesInternalServerErrorResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTokenRules\DeprecatedFileGetFileTokenRulesNotFoundResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTokenRules\DeprecatedFileGetFileTokenRulesOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTokenRules\DeprecatedFileGetFileTokenRulesRequest;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTypeRules\DeprecatedFileGetFileTypeRulesDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTypeRules\DeprecatedFileGetFileTypeRulesInternalServerErrorResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTypeRules\DeprecatedFileGetFileTypeRulesNotFoundResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTypeRules\DeprecatedFileGetFileTypeRulesOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\DeprecatedFileGetFileTypeRules\DeprecatedFileGetFileTypeRulesRequest;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFile\GetFileBadRequestResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFile\GetFileDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFile\GetFileInternalServerErrorResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFile\GetFileNotFoundResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFile\GetFileRequest;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileMeta\GetFileMetaDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileMeta\GetFileMetaNotFoundResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileMeta\GetFileMetaOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileMeta\GetFileMetaRequest;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTokenRules\GetFileUploadTokenRulesDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTokenRules\GetFileUploadTokenRulesInternalServerErrorResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTokenRules\GetFileUploadTokenRulesNotFoundResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTokenRules\GetFileUploadTokenRulesOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTokenRules\GetFileUploadTokenRulesRequest;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTypeRules\GetFileUploadTypeRulesDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTypeRules\GetFileUploadTypeRulesInternalServerErrorResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTypeRules\GetFileUploadTypeRulesNotFoundResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTypeRules\GetFileUploadTypeRulesOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\File\GetFileUploadTypeRules\GetFileUploadTypeRulesRequest;

/**
 * Client for File API
 *
 * The file API allows you to manage your files, for example for conversations
 * attachments and avatar uploads.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class FileClientImpl implements FileClient
{
    private Client $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    /**
     * Get a Token's upload rules.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/File/operation/deprecated-file-get-file-token-rules
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param DeprecatedFileGetFileTokenRules\DeprecatedFileGetFileTokenRulesRequest $request An object representing the request for this operation
     * @deprecated
     * @return DeprecatedFileGetFileTokenRules\DeprecatedFileGetFileTokenRulesOKResponse OK
     */
    public function deprecatedFileGetFileTokenRules(DeprecatedFileGetFileTokenRulesRequest $request): DeprecatedFileGetFileTokenRulesOKResponse
    {
        $httpRequest = new Request(DeprecatedFileGetFileTokenRulesRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        if ($httpResponse->getStatusCode() === 200) {
            return DeprecatedFileGetFileTokenRulesOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            404 => DeprecatedFileGetFileTokenRulesNotFoundResponse::fromResponse($httpResponse),
            500 => DeprecatedFileGetFileTokenRulesInternalServerErrorResponse::fromResponse($httpResponse),
            default => DeprecatedFileGetFileTokenRulesDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Get a Type's upload rules.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/File/operation/deprecated-file-get-file-type-rules
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param DeprecatedFileGetFileTypeRules\DeprecatedFileGetFileTypeRulesRequest $request An object representing the request for this operation
     * @deprecated
     * @return DeprecatedFileGetFileTypeRules\DeprecatedFileGetFileTypeRulesOKResponse OK
     */
    public function deprecatedFileGetFileTypeRules(DeprecatedFileGetFileTypeRulesRequest $request): DeprecatedFileGetFileTypeRulesOKResponse
    {
        $httpRequest = new Request(DeprecatedFileGetFileTypeRulesRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        if ($httpResponse->getStatusCode() === 200) {
            return DeprecatedFileGetFileTypeRulesOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            404 => DeprecatedFileGetFileTypeRulesNotFoundResponse::fromResponse($httpResponse),
            500 => DeprecatedFileGetFileTypeRulesInternalServerErrorResponse::fromResponse($httpResponse),
            default => DeprecatedFileGetFileTypeRulesDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Create a File.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/File/operation/file-create-file
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param CreateFile\CreateFileRequest $request An object representing the request for this operation
     * @return CreateFile\CreateFileCreatedResponse Created
     */
    public function createFile(CreateFileRequest $request): CreateFileCreatedResponse
    {
        $httpRequest = new Request(CreateFileRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        if ($httpResponse->getStatusCode() === 201) {
            return CreateFileCreatedResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            400 => CreateFileBadRequestResponse::fromResponse($httpResponse),
            500 => CreateFileInternalServerErrorResponse::fromResponse($httpResponse),
            default => CreateFileDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Get a File.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/File/operation/file-get-file
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param GetFile\GetFileRequest $request An object representing the request for this operation
     * @return StringResponse OK
     */
    public function getFile(GetFileRequest $request): StringResponse
    {
        $httpRequest = new Request(GetFileRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        if ($httpResponse->getStatusCode() === 200) {
            return StringResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            400 => GetFileBadRequestResponse::fromResponse($httpResponse),
            404 => GetFileNotFoundResponse::fromResponse($httpResponse),
            500 => GetFileInternalServerErrorResponse::fromResponse($httpResponse),
            default => GetFileDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Get a File's meta.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/File/operation/file-get-file-meta
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param GetFileMeta\GetFileMetaRequest $request An object representing the request for this operation
     * @return GetFileMeta\GetFileMetaOKResponse OK
     */
    public function getFileMeta(GetFileMetaRequest $request): GetFileMetaOKResponse
    {
        $httpRequest = new Request(GetFileMetaRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        if ($httpResponse->getStatusCode() === 200) {
            return GetFileMetaOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            404 => GetFileMetaNotFoundResponse::fromResponse($httpResponse),
            default => GetFileMetaDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Get a FileUploadToken's rules.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/File/operation/file-get-file-upload-token-rules
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param GetFileUploadTokenRules\GetFileUploadTokenRulesRequest $request An object representing the request for this operation
     * @return GetFileUploadTokenRules\GetFileUploadTokenRulesOKResponse OK
     */
    public function getFileUploadTokenRules(GetFileUploadTokenRulesRequest $request): GetFileUploadTokenRulesOKResponse
    {
        $httpRequest = new Request(GetFileUploadTokenRulesRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        if ($httpResponse->getStatusCode() === 200) {
            return GetFileUploadTokenRulesOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            404 => GetFileUploadTokenRulesNotFoundResponse::fromResponse($httpResponse),
            500 => GetFileUploadTokenRulesInternalServerErrorResponse::fromResponse($httpResponse),
            default => GetFileUploadTokenRulesDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Get a FileUploadType's rules.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/File/operation/file-get-file-upload-type-rules
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param GetFileUploadTypeRules\GetFileUploadTypeRulesRequest $request An object representing the request for this operation
     * @return GetFileUploadTypeRules\GetFileUploadTypeRulesOKResponse OK
     */
    public function getFileUploadTypeRules(GetFileUploadTypeRulesRequest $request): GetFileUploadTypeRulesOKResponse
    {
        $httpRequest = new Request(GetFileUploadTypeRulesRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        if ($httpResponse->getStatusCode() === 200) {
            return GetFileUploadTypeRulesOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            404 => GetFileUploadTypeRulesNotFoundResponse::fromResponse($httpResponse),
            500 => GetFileUploadTypeRulesInternalServerErrorResponse::fromResponse($httpResponse),
            default => GetFileUploadTypeRulesDefaultResponse::fromResponse($httpResponse),
        });
    }
}
