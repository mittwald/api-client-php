<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Clients\Misc;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\Request;
use Mittwald\ApiClient\Client\EmptyResponse;
use Mittwald\ApiClient\Error\UnexpectedResponseException;
use Mittwald\ApiClient\Generated\V2\Clients\Misc\VerificationVerifyAddress\VerificationVerifyAddressDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Misc\VerificationVerifyAddress\VerificationVerifyAddressOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Misc\VerificationVerifyAddress\VerificationVerifyAddressRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Misc\VerificationVerifyAddress\VerificationVerifyAddressTooManyRequestsResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Misc\VerificationVerifyCompany\VerificationVerifyCompanyDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Misc\VerificationVerifyCompany\VerificationVerifyCompanyOKResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Misc\VerificationVerifyCompany\VerificationVerifyCompanyRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Misc\VerificationVerifyCompany\VerificationVerifyCompanyTooManyRequestsResponse;

/**
 * Client for Misc API
 *
 * API endpoints that are not related to any specific API domain
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class MiscClientImpl implements MiscClient
{
    private Client $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    /**
     * Check if an address exists.
     *
     * Only the DACH region is currently supported.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Misc/operation/verification-verify-address
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param VerificationVerifyAddressRequest $request An object representing the request for this operation
     * @return VerificationVerifyAddressOKResponse Success
     */
    public function verificationVerifyAddress(VerificationVerifyAddressRequest $request): VerificationVerifyAddressOKResponse
    {
        $httpRequest = new Request(VerificationVerifyAddressRequest::method, $request->buildUrl());
        $httpResponse = $this->client->send($httpRequest, $request->buildRequestOptions());
        if ($httpResponse->getStatusCode() === 200) {
            return VerificationVerifyAddressOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            429 => VerificationVerifyAddressTooManyRequestsResponse::fromResponse($httpResponse),
            500 => new EmptyResponse($httpResponse),
            default => VerificationVerifyAddressDefaultResponse::fromResponse($httpResponse),
        });
    }

    /**
     * Check if a company exists.
     *
     * Only companies registered in the german company register are currently supported.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Misc/operation/verification-verify-company
     * @throws GuzzleException
     * @throws UnexpectedResponseException
     * @param VerificationVerifyCompanyRequest $request An object representing the request for this operation
     * @return VerificationVerifyCompanyOKResponse Success
     */
    public function verificationVerifyCompany(VerificationVerifyCompanyRequest $request): VerificationVerifyCompanyOKResponse
    {
        $httpRequest = new Request(VerificationVerifyCompanyRequest::method, $request->buildUrl());
        $httpResponse = $this->client->send($httpRequest, $request->buildRequestOptions());
        if ($httpResponse->getStatusCode() === 200) {
            return VerificationVerifyCompanyOKResponse::fromResponse($httpResponse);
        }
        throw new UnexpectedResponseException(match ($httpResponse->getStatusCode()) {
            412, 500 => new EmptyResponse($httpResponse),
            429 => VerificationVerifyCompanyTooManyRequestsResponse::fromResponse($httpResponse),
            default => VerificationVerifyCompanyDefaultResponse::fromResponse($httpResponse),
        });
    }
}
