<?php

namespace Mittwald\ApiClient\Generated\V2\Clients\Mail;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\Request;
use Mittwald\ApiClient\Client\EmptyResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxCreate\DeliveryboxCreate201Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxCreate\DeliveryboxCreateRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxDelete\DeliveryboxDeleteRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxGetSpecific\DeliveryboxGetSpecific200Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxGetSpecific\DeliveryboxGetSpecificRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxList\DeliveryboxList200Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxList\DeliveryboxListRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxUpdateDescription\DeliveryboxUpdateDescriptionRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\DeliveryboxUpdatePassword\DeliveryboxUpdatePasswordRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressCreate\MailaddressCreate201Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressCreate\MailaddressCreate400Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressCreate\MailaddressCreateRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressDelete\MailaddressDeleteRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressGetSpecific\MailaddressGetSpecific200Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressGetSpecific\MailaddressGetSpecificRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressList\MailaddressList200Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressList\MailaddressListRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressUpdateAddress\MailaddressUpdateAddressRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressUpdateAutoresponder\MailaddressUpdateAutoresponderRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressUpdateCatchall\MailaddressUpdateCatchall400Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressUpdateCatchall\MailaddressUpdateCatchallRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressUpdateForwardaddresses\MailaddressUpdateForwardaddressesRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressUpdatePassword\MailaddressUpdatePasswordRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressUpdateQuota\MailaddressUpdateQuotaRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\MailaddressUpdateSpamprotection\MailaddressUpdateSpamprotectionRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\ProjectsettingGetSpecific\ProjectsettingGetSpecific200Response;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\ProjectsettingGetSpecific\ProjectsettingGetSpecificRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\ProjectsettingUpdateBlacklist\ProjectsettingUpdateBlacklistRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Mail\ProjectsettingUpdateWhitelist\ProjectsettingUpdateWhitelistRequest;

/**
 * Client for Mail API
 *
 * The mail API allows you to manage your mail accounts.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class MailClient
{
    private Client $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    /**
     * Create a new deliverybox
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-deliverybox-create
     * @throws GuzzleException
     * @param DeliveryboxCreate\DeliveryboxCreateRequest $request An object representing the request for this operation
     * @return DeliveryboxCreate\DeliveryboxCreate201Response|EmptyResponse OK
     */
    public function deliveryboxCreate(DeliveryboxCreateRequest $request): EmptyResponse|DeliveryboxCreate201Response
    {
        $httpRequest = new Request(DeliveryboxCreateRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            201 => DeliveryboxCreate201Response::fromResponse($httpResponse),
            403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Get all deliveryboxes by project ID
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-deliverybox-list
     * @throws GuzzleException
     * @param DeliveryboxList\DeliveryboxListRequest $request An object representing the request for this operation
     * @return DeliveryboxList\DeliveryboxList200Response|EmptyResponse OK
     */
    public function deliveryboxList(DeliveryboxListRequest $request): EmptyResponse|DeliveryboxList200Response
    {
        $httpRequest = new Request(DeliveryboxListRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200 => DeliveryboxList200Response::fromResponse($httpResponse),
            403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Delete a specific deliverybox
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-deliverybox-delete
     * @throws GuzzleException
     * @param DeliveryboxDelete\DeliveryboxDeleteRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function deliveryboxDelete(DeliveryboxDeleteRequest $request): EmptyResponse
    {
        $httpRequest = new Request(DeliveryboxDeleteRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Get a specific deliverybox
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-deliverybox-get-specific
     * @throws GuzzleException
     * @param DeliveryboxGetSpecific\DeliveryboxGetSpecificRequest $request An object representing the request for this operation
     * @return DeliveryboxGetSpecific\DeliveryboxGetSpecific200Response|EmptyResponse OK
     */
    public function deliveryboxGetSpecific(DeliveryboxGetSpecificRequest $request): EmptyResponse|DeliveryboxGetSpecific200Response
    {
        $httpRequest = new Request(DeliveryboxGetSpecificRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200 => DeliveryboxGetSpecific200Response::fromResponse($httpResponse),
            403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update the description of an deliverybox
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-deliverybox-update-description
     * @throws GuzzleException
     * @param DeliveryboxUpdateDescription\DeliveryboxUpdateDescriptionRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function deliveryboxUpdateDescription(DeliveryboxUpdateDescriptionRequest $request): EmptyResponse
    {
        $httpRequest = new Request(DeliveryboxUpdateDescriptionRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update the password for a specific deliverybox
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-deliverybox-update-password
     * @throws GuzzleException
     * @param DeliveryboxUpdatePassword\DeliveryboxUpdatePasswordRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function deliveryboxUpdatePassword(DeliveryboxUpdatePasswordRequest $request): EmptyResponse
    {
        $httpRequest = new Request(DeliveryboxUpdatePasswordRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Create a new mail address
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-create
     * @throws GuzzleException
     * @param MailaddressCreate\MailaddressCreateRequest $request An object representing the request for this operation
     * @return MailaddressCreate\MailaddressCreate201Response|MailaddressCreate\MailaddressCreate400Response|EmptyResponse OK
     */
    public function mailaddressCreate(MailaddressCreateRequest $request): EmptyResponse|MailaddressCreate201Response|MailaddressCreate400Response
    {
        $httpRequest = new Request(MailaddressCreateRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            201 => MailaddressCreate201Response::fromResponse($httpResponse),
            400 => MailaddressCreate400Response::fromResponse($httpResponse),
            403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Get all mail addresses for a project ID
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-list
     * @throws GuzzleException
     * @param MailaddressList\MailaddressListRequest $request An object representing the request for this operation
     * @return MailaddressList\MailaddressList200Response|EmptyResponse OK
     */
    public function mailaddressList(MailaddressListRequest $request): EmptyResponse|MailaddressList200Response
    {
        $httpRequest = new Request(MailaddressListRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200 => MailaddressList200Response::fromResponse($httpResponse),
            403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Delete a specific mail address
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-delete
     * @throws GuzzleException
     * @param MailaddressDelete\MailaddressDeleteRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function mailaddressDelete(MailaddressDeleteRequest $request): EmptyResponse
    {
        $httpRequest = new Request(MailaddressDeleteRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Get a specific mail address
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-get-specific
     * @throws GuzzleException
     * @param MailaddressGetSpecific\MailaddressGetSpecificRequest $request An object representing the request for this operation
     * @return MailaddressGetSpecific\MailaddressGetSpecific200Response|EmptyResponse OK
     */
    public function mailaddressGetSpecific(MailaddressGetSpecificRequest $request): EmptyResponse|MailaddressGetSpecific200Response
    {
        $httpRequest = new Request(MailaddressGetSpecificRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200 => MailaddressGetSpecific200Response::fromResponse($httpResponse),
            403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update mail-address
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-update-address
     * @throws GuzzleException
     * @param MailaddressUpdateAddress\MailaddressUpdateAddressRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function mailaddressUpdateAddress(MailaddressUpdateAddressRequest $request): EmptyResponse
    {
        $httpRequest = new Request(MailaddressUpdateAddressRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update the auto responder of a mail address
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-update-autoresponder
     * @throws GuzzleException
     * @param MailaddressUpdateAutoresponder\MailaddressUpdateAutoresponderRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function mailaddressUpdateAutoresponder(MailaddressUpdateAutoresponderRequest $request): EmptyResponse
    {
        $httpRequest = new Request(MailaddressUpdateAutoresponderRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Enable or disable the catchAll flag for a specific mail address
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-update-catchall
     * @throws GuzzleException
     * @param MailaddressUpdateCatchall\MailaddressUpdateCatchallRequest $request An object representing the request for this operation
     * @return EmptyResponse|MailaddressUpdateCatchall\MailaddressUpdateCatchall400Response OK
     */
    public function mailaddressUpdateCatchall(MailaddressUpdateCatchallRequest $request): EmptyResponse|MailaddressUpdateCatchall400Response
    {
        $httpRequest = new Request(MailaddressUpdateCatchallRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
            400 => MailaddressUpdateCatchall400Response::fromResponse($httpResponse),
        };
    }

    /**
     * Update the addresses an email is forwarded to
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-update-forwardaddresses
     * @throws GuzzleException
     * @param MailaddressUpdateForwardaddresses\MailaddressUpdateForwardaddressesRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function mailaddressUpdateForwardaddresses(MailaddressUpdateForwardaddressesRequest $request): EmptyResponse
    {
        $httpRequest = new Request(MailaddressUpdateForwardaddressesRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update the password for a specific mail address
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-update-password
     * @throws GuzzleException
     * @param MailaddressUpdatePassword\MailaddressUpdatePasswordRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function mailaddressUpdatePassword(MailaddressUpdatePasswordRequest $request): EmptyResponse
    {
        $httpRequest = new Request(MailaddressUpdatePasswordRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update the quota of a mailbox
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-update-quota
     * @throws GuzzleException
     * @param MailaddressUpdateQuota\MailaddressUpdateQuotaRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function mailaddressUpdateQuota(MailaddressUpdateQuotaRequest $request): EmptyResponse
    {
        $httpRequest = new Request(MailaddressUpdateQuotaRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update the spamprotection of a mailbox
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-mailaddress-update-spamprotection
     * @throws GuzzleException
     * @param MailaddressUpdateSpamprotection\MailaddressUpdateSpamprotectionRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function mailaddressUpdateSpamprotection(MailaddressUpdateSpamprotectionRequest $request): EmptyResponse
    {
        $httpRequest = new Request(MailaddressUpdateSpamprotectionRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Get settings for a given project ID
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-projectsetting-get-specific
     * @throws GuzzleException
     * @param ProjectsettingGetSpecific\ProjectsettingGetSpecificRequest $request An object representing the request for this operation
     * @return ProjectsettingGetSpecific\ProjectsettingGetSpecific200Response|EmptyResponse OK
     */
    public function projectsettingGetSpecific(ProjectsettingGetSpecificRequest $request): EmptyResponse|ProjectsettingGetSpecific200Response
    {
        $httpRequest = new Request(ProjectsettingGetSpecificRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200 => ProjectsettingGetSpecific200Response::fromResponse($httpResponse),
            403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update blacklist for a given project ID
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-projectsetting-update-blacklist
     * @throws GuzzleException
     * @param ProjectsettingUpdateBlacklist\ProjectsettingUpdateBlacklistRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function projectsettingUpdateBlacklist(ProjectsettingUpdateBlacklistRequest $request): EmptyResponse
    {
        $httpRequest = new Request(ProjectsettingUpdateBlacklistRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }

    /**
     * Update whitelist for a given project ID
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Mail/operation/mail-projectsetting-update-whitelist
     * @throws GuzzleException
     * @param ProjectsettingUpdateWhitelist\ProjectsettingUpdateWhitelistRequest $request An object representing the request for this operation
     * @return EmptyResponse OK
     */
    public function projectsettingUpdateWhitelist(ProjectsettingUpdateWhitelistRequest $request): EmptyResponse
    {
        $httpRequest = new Request(ProjectsettingUpdateWhitelistRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            200, 403, 404, 500, 503 => new EmptyResponse($httpResponse),
        };
    }
}
