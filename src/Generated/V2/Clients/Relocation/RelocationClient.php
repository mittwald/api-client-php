<?php

namespace Mittwald\ApiClient\Generated\V2\Clients\Relocation;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Psr7\Request;
use Mittwald\ApiClient\Client\EmptyResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Relocation\CreateLegacyTariffChange\CreateLegacyTariffChange201Response;
use Mittwald\ApiClient\Generated\V2\Clients\Relocation\CreateLegacyTariffChange\CreateLegacyTariffChange403Response;
use Mittwald\ApiClient\Generated\V2\Clients\Relocation\CreateLegacyTariffChange\CreateLegacyTariffChangeDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Relocation\CreateLegacyTariffChange\CreateLegacyTariffChangeRequest;
use Mittwald\ApiClient\Generated\V2\Clients\Relocation\CreateRelocation\CreateRelocation400Response;
use Mittwald\ApiClient\Generated\V2\Clients\Relocation\CreateRelocation\CreateRelocationDefaultResponse;
use Mittwald\ApiClient\Generated\V2\Clients\Relocation\CreateRelocation\CreateRelocationRequest;

/**
 * Client for Relocation API
 *
 * The relocation API allows you to manage your relocations.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class RelocationClient
{
    private Client $client;

    public function __construct(Client $client)
    {
        $this->client = $client;
    }

    /**
     * Register a tariff change for a legacy tariff.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Relocation/operation/relocation-create-legacy-tariff-change
     * @throws GuzzleException
     * @param CreateLegacyTariffChange\CreateLegacyTariffChangeRequest $request An object representing the request for this operation
     * @return CreateLegacyTariffChange\CreateLegacyTariffChange201Response|CreateLegacyTariffChange\CreateLegacyTariffChange403Response|CreateLegacyTariffChange\CreateLegacyTariffChangeDefaultResponse
     */
    public function createLegacyTariffChange(CreateLegacyTariffChangeRequest $request): CreateLegacyTariffChange201Response|CreateLegacyTariffChange403Response|CreateLegacyTariffChangeDefaultResponse
    {
        $httpRequest = new Request(CreateLegacyTariffChangeRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            201 => CreateLegacyTariffChange201Response::fromResponse($httpResponse),
            403 => CreateLegacyTariffChange403Response::fromResponse($httpResponse),
            default => CreateLegacyTariffChangeDefaultResponse::fromResponse($httpResponse),
        };
    }

    /**
     * Relocate an external Project to mittwald.
     *
     * Give mittwald access to your Provider and let them move your Project to mittwald.
     *
     * @see https://developer.mittwald.de/reference/v2/#tag/Relocation/operation/relocation-create-relocation
     * @throws GuzzleException
     * @param CreateRelocation\CreateRelocationRequest $request An object representing the request for this operation
     * @return EmptyResponse|CreateRelocation\CreateRelocation400Response|CreateRelocation\CreateRelocationDefaultResponse No content
     */
    public function createRelocation(CreateRelocationRequest $request): EmptyResponse|CreateRelocation400Response|CreateRelocationDefaultResponse
    {
        $httpRequest = new Request(CreateRelocationRequest::method, $request->getUrl());
        $httpResponse = $this->client->send($httpRequest, [
            'query' => $request->getQuery(),
            'headers' => $request->getHeaders(),
            'json' => $request->getBody()->toJson(),
        ]);
        return match ($httpResponse->getStatusCode()) {
            204 => new EmptyResponse($httpResponse),
            400 => CreateRelocation400Response::fromResponse($httpResponse),
            default => CreateRelocationDefaultResponse::fromResponse($httpResponse),
        };
    }
}
