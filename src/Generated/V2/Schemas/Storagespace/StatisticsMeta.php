<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Storagespace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.storagespace.StatisticsMeta.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class StatisticsMeta
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'isExceeding' => [
                'example' => false,
                'type' => 'boolean',
            ],
            'storageLimitInBytes' => [
                'example' => 100000,
                'type' => 'integer',
            ],
            'totalStorageExceedanceInBytes' => [
                'example' => 10,
                'type' => 'integer',
            ],
            'totalStorageFreeInBytes' => [
                'example' => 99000,
                'type' => 'integer',
            ],
            'totalStorageFreeInPercentage' => [
                'example' => 90,
                'type' => 'integer',
            ],
            'totalStorageUsageInBytes' => [
                'example' => 1000,
                'type' => 'integer',
            ],
            'totalStorageUsageInPercentage' => [
                'example' => 10,
                'type' => 'integer',
            ],
        ],
        'required' => [
            'storageLimitInBytes',
            'totalStorageUsageInBytes',
            'totalStorageUsageInPercentage',
            'totalStorageFreeInBytes',
            'totalStorageFreeInPercentage',
            'isExceeding',
        ],
        'type' => 'object',
    ];

    private bool $isExceeding;

    private int $storageLimitInBytes;

    private ?int $totalStorageExceedanceInBytes = null;

    private int $totalStorageFreeInBytes;

    private int $totalStorageFreeInPercentage;

    private int $totalStorageUsageInBytes;

    private int $totalStorageUsageInPercentage;

    public function __construct(bool $isExceeding, int $storageLimitInBytes, int $totalStorageFreeInBytes, int $totalStorageFreeInPercentage, int $totalStorageUsageInBytes, int $totalStorageUsageInPercentage)
    {
        $this->isExceeding = $isExceeding;
        $this->storageLimitInBytes = $storageLimitInBytes;
        $this->totalStorageFreeInBytes = $totalStorageFreeInBytes;
        $this->totalStorageFreeInPercentage = $totalStorageFreeInPercentage;
        $this->totalStorageUsageInBytes = $totalStorageUsageInBytes;
        $this->totalStorageUsageInPercentage = $totalStorageUsageInPercentage;
    }

    public function getIsExceeding(): bool
    {
        return $this->isExceeding;
    }

    public function getStorageLimitInBytes(): int
    {
        return $this->storageLimitInBytes;
    }

    public function getTotalStorageExceedanceInBytes(): ?int
    {
        return $this->totalStorageExceedanceInBytes ?? null;
    }

    public function getTotalStorageFreeInBytes(): int
    {
        return $this->totalStorageFreeInBytes;
    }

    public function getTotalStorageFreeInPercentage(): int
    {
        return $this->totalStorageFreeInPercentage;
    }

    public function getTotalStorageUsageInBytes(): int
    {
        return $this->totalStorageUsageInBytes;
    }

    public function getTotalStorageUsageInPercentage(): int
    {
        return $this->totalStorageUsageInPercentage;
    }

    public function withIsExceeding(bool $isExceeding): self
    {
        $validator = new Validator();
        $validator->validate($isExceeding, static::$schema['properties']['isExceeding']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isExceeding = $isExceeding;

        return $clone;
    }

    public function withStorageLimitInBytes(int $storageLimitInBytes): self
    {
        $validator = new Validator();
        $validator->validate($storageLimitInBytes, static::$schema['properties']['storageLimitInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->storageLimitInBytes = $storageLimitInBytes;

        return $clone;
    }

    public function withTotalStorageExceedanceInBytes(int $totalStorageExceedanceInBytes): self
    {
        $validator = new Validator();
        $validator->validate($totalStorageExceedanceInBytes, static::$schema['properties']['totalStorageExceedanceInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalStorageExceedanceInBytes = $totalStorageExceedanceInBytes;

        return $clone;
    }

    public function withoutTotalStorageExceedanceInBytes(): self
    {
        $clone = clone $this;
        unset($clone->totalStorageExceedanceInBytes);

        return $clone;
    }

    public function withTotalStorageFreeInBytes(int $totalStorageFreeInBytes): self
    {
        $validator = new Validator();
        $validator->validate($totalStorageFreeInBytes, static::$schema['properties']['totalStorageFreeInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalStorageFreeInBytes = $totalStorageFreeInBytes;

        return $clone;
    }

    public function withTotalStorageFreeInPercentage(int $totalStorageFreeInPercentage): self
    {
        $validator = new Validator();
        $validator->validate($totalStorageFreeInPercentage, static::$schema['properties']['totalStorageFreeInPercentage']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalStorageFreeInPercentage = $totalStorageFreeInPercentage;

        return $clone;
    }

    public function withTotalStorageUsageInBytes(int $totalStorageUsageInBytes): self
    {
        $validator = new Validator();
        $validator->validate($totalStorageUsageInBytes, static::$schema['properties']['totalStorageUsageInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalStorageUsageInBytes = $totalStorageUsageInBytes;

        return $clone;
    }

    public function withTotalStorageUsageInPercentage(int $totalStorageUsageInPercentage): self
    {
        $validator = new Validator();
        $validator->validate($totalStorageUsageInPercentage, static::$schema['properties']['totalStorageUsageInPercentage']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalStorageUsageInPercentage = $totalStorageUsageInPercentage;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return StatisticsMeta Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): StatisticsMeta
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $isExceeding = (bool)($input->{'isExceeding'});
        $storageLimitInBytes = (int)($input->{'storageLimitInBytes'});
        $totalStorageExceedanceInBytes = null;
        if (isset($input->{'totalStorageExceedanceInBytes'})) {
            $totalStorageExceedanceInBytes = (int)($input->{'totalStorageExceedanceInBytes'});
        }
        $totalStorageFreeInBytes = (int)($input->{'totalStorageFreeInBytes'});
        $totalStorageFreeInPercentage = (int)($input->{'totalStorageFreeInPercentage'});
        $totalStorageUsageInBytes = (int)($input->{'totalStorageUsageInBytes'});
        $totalStorageUsageInPercentage = (int)($input->{'totalStorageUsageInPercentage'});

        $obj = new self($isExceeding, $storageLimitInBytes, $totalStorageFreeInBytes, $totalStorageFreeInPercentage, $totalStorageUsageInBytes, $totalStorageUsageInPercentage);
        $obj->totalStorageExceedanceInBytes = $totalStorageExceedanceInBytes;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['isExceeding'] = $this->isExceeding;
        $output['storageLimitInBytes'] = $this->storageLimitInBytes;
        if (isset($this->totalStorageExceedanceInBytes)) {
            $output['totalStorageExceedanceInBytes'] = $this->totalStorageExceedanceInBytes;
        }
        $output['totalStorageFreeInBytes'] = $this->totalStorageFreeInBytes;
        $output['totalStorageFreeInPercentage'] = $this->totalStorageFreeInPercentage;
        $output['totalStorageUsageInBytes'] = $this->totalStorageUsageInBytes;
        $output['totalStorageUsageInPercentage'] = $this->totalStorageUsageInPercentage;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
