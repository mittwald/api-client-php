<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Storagespace;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.storagespace.StatisticsMeta.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class StatisticsMeta
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'isExceeding' => [
                'example' => false,
                'type' => 'boolean',
            ],
            'limitInBytes' => [
                'example' => 100000,
                'type' => 'integer',
            ],
            'notificationThresholdUsedAsLimit' => [
                'description' => 'If true, set notification threshold is used as limit for meta calculations. E.g. for projects with a parent server.',
                'example' => false,
                'type' => 'boolean',
            ],
            'totalExceedanceInBytes' => [
                'example' => 10,
                'type' => 'integer',
            ],
            'totalExceedanceInBytesSetAt' => [
                'example' => '2023-12-22T13:46:52.000Z',
                'format' => 'date-time',
                'type' => 'string',
            ],
            'totalFreeInBytes' => [
                'example' => 99000,
                'type' => 'integer',
            ],
            'totalFreeInPercentage' => [
                'example' => 90,
                'type' => 'number',
            ],
            'totalUsageInBytes' => [
                'example' => 1000,
                'type' => 'integer',
            ],
            'totalUsageInPercentage' => [
                'example' => 10,
                'type' => 'number',
            ],
        ],
        'required' => [
            'totalUsageInBytes',
        ],
        'type' => 'object',
    ];

    private ?bool $isExceeding = null;

    private ?int $limitInBytes = null;

    /**
     * If true, set notification threshold is used as limit for meta calculations. E.g. for projects with a parent server.
     */
    private ?bool $notificationThresholdUsedAsLimit = null;

    private ?int $totalExceedanceInBytes = null;

    private ?DateTime $totalExceedanceInBytesSetAt = null;

    private ?int $totalFreeInBytes = null;

    private int|float|null $totalFreeInPercentage = null;

    private int $totalUsageInBytes;

    private int|float|null $totalUsageInPercentage = null;

    public function __construct(int $totalUsageInBytes)
    {
        $this->totalUsageInBytes = $totalUsageInBytes;
    }

    public function getIsExceeding(): ?bool
    {
        return $this->isExceeding ?? null;
    }

    public function getLimitInBytes(): ?int
    {
        return $this->limitInBytes ?? null;
    }

    public function getNotificationThresholdUsedAsLimit(): ?bool
    {
        return $this->notificationThresholdUsedAsLimit ?? null;
    }

    public function getTotalExceedanceInBytes(): ?int
    {
        return $this->totalExceedanceInBytes ?? null;
    }

    public function getTotalExceedanceInBytesSetAt(): ?DateTime
    {
        return $this->totalExceedanceInBytesSetAt ?? null;
    }

    public function getTotalFreeInBytes(): ?int
    {
        return $this->totalFreeInBytes ?? null;
    }

    public function getTotalFreeInPercentage(): int|float|null
    {
        return $this->totalFreeInPercentage;
    }

    public function getTotalUsageInBytes(): int
    {
        return $this->totalUsageInBytes;
    }

    public function getTotalUsageInPercentage(): int|float|null
    {
        return $this->totalUsageInPercentage;
    }

    public function withIsExceeding(bool $isExceeding): self
    {
        $validator = new Validator();
        $validator->validate($isExceeding, self::$schema['properties']['isExceeding']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isExceeding = $isExceeding;

        return $clone;
    }

    public function withoutIsExceeding(): self
    {
        $clone = clone $this;
        unset($clone->isExceeding);

        return $clone;
    }

    public function withLimitInBytes(int $limitInBytes): self
    {
        $validator = new Validator();
        $validator->validate($limitInBytes, self::$schema['properties']['limitInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->limitInBytes = $limitInBytes;

        return $clone;
    }

    public function withoutLimitInBytes(): self
    {
        $clone = clone $this;
        unset($clone->limitInBytes);

        return $clone;
    }

    public function withNotificationThresholdUsedAsLimit(bool $notificationThresholdUsedAsLimit): self
    {
        $validator = new Validator();
        $validator->validate($notificationThresholdUsedAsLimit, self::$schema['properties']['notificationThresholdUsedAsLimit']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->notificationThresholdUsedAsLimit = $notificationThresholdUsedAsLimit;

        return $clone;
    }

    public function withoutNotificationThresholdUsedAsLimit(): self
    {
        $clone = clone $this;
        unset($clone->notificationThresholdUsedAsLimit);

        return $clone;
    }

    public function withTotalExceedanceInBytes(int $totalExceedanceInBytes): self
    {
        $validator = new Validator();
        $validator->validate($totalExceedanceInBytes, self::$schema['properties']['totalExceedanceInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalExceedanceInBytes = $totalExceedanceInBytes;

        return $clone;
    }

    public function withoutTotalExceedanceInBytes(): self
    {
        $clone = clone $this;
        unset($clone->totalExceedanceInBytes);

        return $clone;
    }

    public function withTotalExceedanceInBytesSetAt(DateTime $totalExceedanceInBytesSetAt): self
    {
        $clone = clone $this;
        $clone->totalExceedanceInBytesSetAt = $totalExceedanceInBytesSetAt;

        return $clone;
    }

    public function withoutTotalExceedanceInBytesSetAt(): self
    {
        $clone = clone $this;
        unset($clone->totalExceedanceInBytesSetAt);

        return $clone;
    }

    public function withTotalFreeInBytes(int $totalFreeInBytes): self
    {
        $validator = new Validator();
        $validator->validate($totalFreeInBytes, self::$schema['properties']['totalFreeInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalFreeInBytes = $totalFreeInBytes;

        return $clone;
    }

    public function withoutTotalFreeInBytes(): self
    {
        $clone = clone $this;
        unset($clone->totalFreeInBytes);

        return $clone;
    }

    /**
     * @param int|float $totalFreeInPercentage
     */
    public function withTotalFreeInPercentage(int|float $totalFreeInPercentage): self
    {
        $validator = new Validator();
        $validator->validate($totalFreeInPercentage, self::$schema['properties']['totalFreeInPercentage']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalFreeInPercentage = $totalFreeInPercentage;

        return $clone;
    }

    public function withoutTotalFreeInPercentage(): self
    {
        $clone = clone $this;
        unset($clone->totalFreeInPercentage);

        return $clone;
    }

    public function withTotalUsageInBytes(int $totalUsageInBytes): self
    {
        $validator = new Validator();
        $validator->validate($totalUsageInBytes, self::$schema['properties']['totalUsageInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalUsageInBytes = $totalUsageInBytes;

        return $clone;
    }

    /**
     * @param int|float $totalUsageInPercentage
     */
    public function withTotalUsageInPercentage(int|float $totalUsageInPercentage): self
    {
        $validator = new Validator();
        $validator->validate($totalUsageInPercentage, self::$schema['properties']['totalUsageInPercentage']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalUsageInPercentage = $totalUsageInPercentage;

        return $clone;
    }

    public function withoutTotalUsageInPercentage(): self
    {
        $clone = clone $this;
        unset($clone->totalUsageInPercentage);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return StatisticsMeta Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): StatisticsMeta
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $isExceeding = null;
        if (isset($input->{'isExceeding'})) {
            $isExceeding = (bool)($input->{'isExceeding'});
        }
        $limitInBytes = null;
        if (isset($input->{'limitInBytes'})) {
            $limitInBytes = (int)($input->{'limitInBytes'});
        }
        $notificationThresholdUsedAsLimit = null;
        if (isset($input->{'notificationThresholdUsedAsLimit'})) {
            $notificationThresholdUsedAsLimit = (bool)($input->{'notificationThresholdUsedAsLimit'});
        }
        $totalExceedanceInBytes = null;
        if (isset($input->{'totalExceedanceInBytes'})) {
            $totalExceedanceInBytes = (int)($input->{'totalExceedanceInBytes'});
        }
        $totalExceedanceInBytesSetAt = null;
        if (isset($input->{'totalExceedanceInBytesSetAt'})) {
            $totalExceedanceInBytesSetAt = new DateTime($input->{'totalExceedanceInBytesSetAt'});
        }
        $totalFreeInBytes = null;
        if (isset($input->{'totalFreeInBytes'})) {
            $totalFreeInBytes = (int)($input->{'totalFreeInBytes'});
        }
        $totalFreeInPercentage = null;
        if (isset($input->{'totalFreeInPercentage'})) {
            $totalFreeInPercentage = str_contains((string)($input->{'totalFreeInPercentage'}), '.') ? (float)($input->{'totalFreeInPercentage'}) : (int)($input->{'totalFreeInPercentage'});
        }
        $totalUsageInBytes = (int)($input->{'totalUsageInBytes'});
        $totalUsageInPercentage = null;
        if (isset($input->{'totalUsageInPercentage'})) {
            $totalUsageInPercentage = str_contains((string)($input->{'totalUsageInPercentage'}), '.') ? (float)($input->{'totalUsageInPercentage'}) : (int)($input->{'totalUsageInPercentage'});
        }

        $obj = new self($totalUsageInBytes);
        $obj->isExceeding = $isExceeding;
        $obj->limitInBytes = $limitInBytes;
        $obj->notificationThresholdUsedAsLimit = $notificationThresholdUsedAsLimit;
        $obj->totalExceedanceInBytes = $totalExceedanceInBytes;
        $obj->totalExceedanceInBytesSetAt = $totalExceedanceInBytesSetAt;
        $obj->totalFreeInBytes = $totalFreeInBytes;
        $obj->totalFreeInPercentage = $totalFreeInPercentage;
        $obj->totalUsageInPercentage = $totalUsageInPercentage;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->isExceeding)) {
            $output['isExceeding'] = $this->isExceeding;
        }
        if (isset($this->limitInBytes)) {
            $output['limitInBytes'] = $this->limitInBytes;
        }
        if (isset($this->notificationThresholdUsedAsLimit)) {
            $output['notificationThresholdUsedAsLimit'] = $this->notificationThresholdUsedAsLimit;
        }
        if (isset($this->totalExceedanceInBytes)) {
            $output['totalExceedanceInBytes'] = $this->totalExceedanceInBytes;
        }
        if (isset($this->totalExceedanceInBytesSetAt)) {
            $output['totalExceedanceInBytesSetAt'] = ($this->totalExceedanceInBytesSetAt)->format(DateTime::ATOM);
        }
        if (isset($this->totalFreeInBytes)) {
            $output['totalFreeInBytes'] = $this->totalFreeInBytes;
        }
        if (isset($this->totalFreeInPercentage)) {
            $output['totalFreeInPercentage'] = $this->totalFreeInPercentage;
        }
        $output['totalUsageInBytes'] = $this->totalUsageInBytes;
        if (isset($this->totalUsageInPercentage)) {
            $output['totalUsageInPercentage'] = $this->totalUsageInPercentage;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->totalExceedanceInBytesSetAt)) {
            $this->totalExceedanceInBytesSetAt = clone $this->totalExceedanceInBytesSetAt;
        }
    }
}
