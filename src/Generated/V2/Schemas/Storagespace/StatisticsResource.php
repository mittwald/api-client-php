<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Storagespace;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.storagespace.StatisticsResource.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class StatisticsResource
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'description' => [
                'example' => 'MySQL DB for Wordpress',
                'type' => 'string',
            ],
            'id' => [
                'example' => '169cea81-2c11-46a4-8f0b-5b0b47caeb78',
                'type' => 'string',
            ],
            'name' => [
                'example' => 'mysql-xyz',
                'type' => 'string',
            ],
            'usageInBytes' => [
                'example' => 1000,
                'type' => 'integer',
            ],
            'usageInBytesSetAt' => [
                'example' => '2023-12-22T13:46:52.000Z',
                'format' => 'date-time',
                'type' => 'string',
            ],
        ],
        'required' => [
            'id',
            'name',
            'usageInBytes',
            'usageInBytesSetAt',
        ],
        'type' => 'object',
    ];

    private ?string $description = null;

    private string $id;

    private string $name;

    private int $usageInBytes;

    private DateTime $usageInBytesSetAt;

    public function __construct(string $id, string $name, int $usageInBytes, DateTime $usageInBytesSetAt)
    {
        $this->id = $id;
        $this->name = $name;
        $this->usageInBytes = $usageInBytes;
        $this->usageInBytesSetAt = $usageInBytesSetAt;
    }

    public function getDescription(): ?string
    {
        return $this->description ?? null;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getUsageInBytes(): int
    {
        return $this->usageInBytes;
    }

    public function getUsageInBytesSetAt(): DateTime
    {
        return $this->usageInBytesSetAt;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$schema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withoutDescription(): self
    {
        $clone = clone $this;
        unset($clone->description);

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, self::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, self::$schema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withUsageInBytes(int $usageInBytes): self
    {
        $validator = new Validator();
        $validator->validate($usageInBytes, self::$schema['properties']['usageInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->usageInBytes = $usageInBytes;

        return $clone;
    }

    public function withUsageInBytesSetAt(DateTime $usageInBytesSetAt): self
    {
        $clone = clone $this;
        $clone->usageInBytesSetAt = $usageInBytesSetAt;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return StatisticsResource Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): StatisticsResource
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $description = null;
        if (isset($input->{'description'})) {
            $description = $input->{'description'};
        }
        $id = $input->{'id'};
        $name = $input->{'name'};
        $usageInBytes = (int)($input->{'usageInBytes'});
        $usageInBytesSetAt = new DateTime($input->{'usageInBytesSetAt'});

        $obj = new self($id, $name, $usageInBytes, $usageInBytesSetAt);
        $obj->description = $description;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->description)) {
            $output['description'] = $this->description;
        }
        $output['id'] = $this->id;
        $output['name'] = $this->name;
        $output['usageInBytes'] = $this->usageInBytes;
        $output['usageInBytesSetAt'] = ($this->usageInBytesSetAt)->format(DateTime::ATOM);

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->usageInBytesSetAt = clone $this->usageInBytesSetAt;
    }
}
