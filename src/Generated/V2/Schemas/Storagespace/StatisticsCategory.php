<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Storagespace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.storagespace.StatisticsCategory.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class StatisticsCategory
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'kind' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.storagespace.StatisticsKind',
            ],
            'resources' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.storagespace.StatisticsResource',
                ],
                'type' => 'array',
                'uniqueItems' => true,
            ],
            'totalStorageUsageInBytes' => [
                'example' => 1000,
                'type' => 'integer',
            ],
        ],
        'required' => [
            'kind',
            'totalStorageUsageInBytes',
        ],
        'type' => 'object',
    ];

    private StatisticsKind $kind;

    /**
     * @var StatisticsResource[]|null
     */
    private ?array $resources = null;

    private int $totalStorageUsageInBytes;

    public function __construct(StatisticsKind $kind, int $totalStorageUsageInBytes)
    {
        $this->kind = $kind;
        $this->totalStorageUsageInBytes = $totalStorageUsageInBytes;
    }

    public function getKind(): StatisticsKind
    {
        return $this->kind;
    }

    /**
     * @return
     * StatisticsResource[]|null
     */
    public function getResources(): ?array
    {
        return $this->resources ?? null;
    }

    public function getTotalStorageUsageInBytes(): int
    {
        return $this->totalStorageUsageInBytes;
    }

    public function withKind(StatisticsKind $kind): self
    {
        $clone = clone $this;
        $clone->kind = $kind;

        return $clone;
    }

    /**
     * @param StatisticsResource[] $resources
     */
    public function withResources(array $resources): self
    {
        $clone = clone $this;
        $clone->resources = $resources;

        return $clone;
    }

    public function withoutResources(): self
    {
        $clone = clone $this;
        unset($clone->resources);

        return $clone;
    }

    public function withTotalStorageUsageInBytes(int $totalStorageUsageInBytes): self
    {
        $validator = new Validator();
        $validator->validate($totalStorageUsageInBytes, static::$schema['properties']['totalStorageUsageInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalStorageUsageInBytes = $totalStorageUsageInBytes;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return StatisticsCategory Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): StatisticsCategory
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $kind = StatisticsKind::from($input->{'kind'});
        $resources = null;
        if (isset($input->{'resources'})) {
            $resources = array_map(fn (array|object $i): StatisticsResource => StatisticsResource::buildFromInput($i, validate: $validate), $input->{'resources'});
        }
        $totalStorageUsageInBytes = (int)($input->{'totalStorageUsageInBytes'});

        $obj = new self($kind, $totalStorageUsageInBytes);
        $obj->resources = $resources;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['kind'] = $this->kind->value;
        if (isset($this->resources)) {
            $output['resources'] = array_map(fn (StatisticsResource $i): array => $i->toJson(), $this->resources);
        }
        $output['totalStorageUsageInBytes'] = $this->totalStorageUsageInBytes;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
