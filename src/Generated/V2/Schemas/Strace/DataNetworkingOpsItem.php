<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Strace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.strace.Data.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class DataNetworkingOpsItem
{
    /**
     * Schema used to validate input for creating instances of this class
     *
     * @var array
     */
    private static array $schema = [
        'properties' => [
            'connectionType' => [
                'enum' => [
                    'UNKNOWN',
                    'PRIVATE',
                    'INTERNAL',
                    'EXTERNAL',
                ],
                'type' => 'string',
            ],
            'stats' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.strace.Statistics',
            ],
            'url' => [
                'description' => 'Hostname and port to which a connection was established. Can be empty.',
                'type' => 'string',
            ],
            'warnLevel' => [
                'description' => 'Alerts when the time, syscall count or occurrence count of this group are abnormal.',
                'enum' => [
                    'NO',
                    'WARN',
                    'SEVERE',
                ],
                'type' => 'string',
            ],
        ],
        'required' => [
            'url',
            'connectionType',
            'stats',
            'warnLevel',
        ],
        'type' => 'object',
    ];

    /**
     * @var DataNetworkingOpsItemConnectionType
     */
    private DataNetworkingOpsItemConnectionType $connectionType;

    /**
     * @var Statistics
     */
    private Statistics $stats;

    /**
     * Hostname and port to which a connection was established. Can be empty.
     *
     * @var string
     */
    private string $url;

    /**
     * Alerts when the time, syscall count or occurrence count of this group are abnormal.
     *
     * @var DataNetworkingOpsItemWarnLevel
     */
    private DataNetworkingOpsItemWarnLevel $warnLevel;

    /**
     * @param DataNetworkingOpsItemConnectionType $connectionType
     * @param Statistics $stats
     * @param string $url
     * @param DataNetworkingOpsItemWarnLevel $warnLevel
     */
    public function __construct(DataNetworkingOpsItemConnectionType $connectionType, Statistics $stats, string $url, DataNetworkingOpsItemWarnLevel $warnLevel)
    {
        $this->connectionType = $connectionType;
        $this->stats = $stats;
        $this->url = $url;
        $this->warnLevel = $warnLevel;
    }

    /**
     * @return DataNetworkingOpsItemConnectionType
     */
    public function getConnectionType(): DataNetworkingOpsItemConnectionType
    {
        return $this->connectionType;
    }

    /**
     * @return Statistics
     */
    public function getStats(): Statistics
    {
        return $this->stats;
    }

    /**
     * @return string
     */
    public function getUrl(): string
    {
        return $this->url;
    }

    /**
     * @return DataNetworkingOpsItemWarnLevel
     */
    public function getWarnLevel(): DataNetworkingOpsItemWarnLevel
    {
        return $this->warnLevel;
    }

    /**
     * @param DataNetworkingOpsItemConnectionType $connectionType
     * @return self
     */
    public function withConnectionType(DataNetworkingOpsItemConnectionType $connectionType): self
    {
        $clone = clone $this;
        $clone->connectionType = $connectionType;

        return $clone;
    }

    /**
     * @param Statistics $stats
     * @return self
     */
    public function withStats(Statistics $stats): self
    {
        $clone = clone $this;
        $clone->stats = $stats;

        return $clone;
    }

    /**
     * @param string $url
     * @return self
     */
    public function withUrl(string $url): self
    {
        $validator = new Validator();
        $validator->validate($url, static::$schema['properties']['url']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->url = $url;

        return $clone;
    }

    /**
     * @param DataNetworkingOpsItemWarnLevel $warnLevel
     * @return self
     */
    public function withWarnLevel(DataNetworkingOpsItemWarnLevel $warnLevel): self
    {
        $clone = clone $this;
        $clone->warnLevel = $warnLevel;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return DataNetworkingOpsItem Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): DataNetworkingOpsItem
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $connectionType = DataNetworkingOpsItemConnectionType::from($input->{'connectionType'});
        $stats = Statistics::buildFromInput($input->{'stats'}, validate: $validate);
        $url = $input->{'url'};
        $warnLevel = DataNetworkingOpsItemWarnLevel::from($input->{'warnLevel'});

        $obj = new self($connectionType, $stats, $url, $warnLevel);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['connectionType'] = ($this->connectionType)->value;
        $output['stats'] = $this->stats->toJson();
        $output['url'] = $this->url;
        $output['warnLevel'] = ($this->warnLevel)->value;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
