<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Strace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.strace.Data.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class DataNetworkingOpsItem
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'connectionType' => [
                'enum' => [
                    'UNKNOWN',
                    'PRIVATE',
                    'EXTERNAL',
                ],
                'type' => 'string',
            ],
            'description' => [
                'description' => 'A short description of the network connection to provide additional context.',
                'type' => 'string',
            ],
            'ip' => [
                'description' => 'IP address to which a connection was established.',
                'type' => 'string',
            ],
            'port' => [
                'description' => 'Port to which a connection was established.',
                'type' => 'integer',
            ],
            'stats' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.strace.Statistics',
            ],
            'warnLevel' => [
                'description' => 'Alerts when the time, syscall count or occurrence count of this group are abnormal.',
                'enum' => [
                    'NO',
                    'WARN',
                    'SEVERE',
                ],
                'type' => 'string',
            ],
        ],
        'required' => [
            'ip',
            'port',
            'description',
            'connectionType',
            'stats',
            'warnLevel',
        ],
        'type' => 'object',
    ];

    private DataNetworkingOpsItemConnectionType $connectionType;

    /**
     * A short description of the network connection to provide additional context.
     */
    private string $description;

    /**
     * IP address to which a connection was established.
     */
    private string $ip;

    /**
     * Port to which a connection was established.
     */
    private int $port;

    private Statistics $stats;

    /**
     * Alerts when the time, syscall count or occurrence count of this group are abnormal.
     */
    private DataNetworkingOpsItemWarnLevel $warnLevel;

    public function __construct(DataNetworkingOpsItemConnectionType $connectionType, string $description, string $ip, int $port, Statistics $stats, DataNetworkingOpsItemWarnLevel $warnLevel)
    {
        $this->connectionType = $connectionType;
        $this->description = $description;
        $this->ip = $ip;
        $this->port = $port;
        $this->stats = $stats;
        $this->warnLevel = $warnLevel;
    }

    public function getConnectionType(): DataNetworkingOpsItemConnectionType
    {
        return $this->connectionType;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getIp(): string
    {
        return $this->ip;
    }

    public function getPort(): int
    {
        return $this->port;
    }

    public function getStats(): Statistics
    {
        return $this->stats;
    }

    public function getWarnLevel(): DataNetworkingOpsItemWarnLevel
    {
        return $this->warnLevel;
    }

    public function withConnectionType(DataNetworkingOpsItemConnectionType $connectionType): self
    {
        $clone = clone $this;
        $clone->connectionType = $connectionType;

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, static::$schema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withIp(string $ip): self
    {
        $validator = new Validator();
        $validator->validate($ip, static::$schema['properties']['ip']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->ip = $ip;

        return $clone;
    }

    public function withPort(int $port): self
    {
        $validator = new Validator();
        $validator->validate($port, static::$schema['properties']['port']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->port = $port;

        return $clone;
    }

    public function withStats(Statistics $stats): self
    {
        $clone = clone $this;
        $clone->stats = $stats;

        return $clone;
    }

    public function withWarnLevel(DataNetworkingOpsItemWarnLevel $warnLevel): self
    {
        $clone = clone $this;
        $clone->warnLevel = $warnLevel;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return DataNetworkingOpsItem Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): DataNetworkingOpsItem
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $connectionType = DataNetworkingOpsItemConnectionType::from($input->{'connectionType'});
        $description = $input->{'description'};
        $ip = $input->{'ip'};
        $port = (int)($input->{'port'});
        $stats = Statistics::buildFromInput($input->{'stats'}, validate: $validate);
        $warnLevel = DataNetworkingOpsItemWarnLevel::from($input->{'warnLevel'});

        $obj = new self($connectionType, $description, $ip, $port, $stats, $warnLevel);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['connectionType'] = ($this->connectionType)->value;
        $output['description'] = $this->description;
        $output['ip'] = $this->ip;
        $output['port'] = $this->port;
        $output['stats'] = $this->stats->toJson();
        $output['warnLevel'] = ($this->warnLevel)->value;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
