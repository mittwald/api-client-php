<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\LeadFinder;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.lead-finder.Lighthouse.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Lighthouse
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'accessibility' => [
                'type' => 'number',
            ],
            'bestPractice' => [
                'type' => 'number',
            ],
            'performance' => [
                'type' => 'number',
            ],
            'seo' => [
                'type' => 'number',
            ],
        ],
        'required' => [
            'performance',
            'bestPractice',
            'accessibility',
            'seo',
        ],
        'type' => 'object',
    ];

    private int|float $accessibility;

    private int|float $bestPractice;

    private int|float $performance;

    private int|float $seo;

    public function __construct(int|float $accessibility, int|float $bestPractice, int|float $performance, int|float $seo)
    {
        $this->accessibility = $accessibility;
        $this->bestPractice = $bestPractice;
        $this->performance = $performance;
        $this->seo = $seo;
    }

    public function getAccessibility(): int|float
    {
        return $this->accessibility;
    }

    public function getBestPractice(): int|float
    {
        return $this->bestPractice;
    }

    public function getPerformance(): int|float
    {
        return $this->performance;
    }

    public function getSeo(): int|float
    {
        return $this->seo;
    }

    public function withAccessibility(int|float $accessibility): self
    {
        $validator = new Validator();
        $validator->validate($accessibility, self::$schema['properties']['accessibility']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->accessibility = $accessibility;

        return $clone;
    }

    public function withBestPractice(int|float $bestPractice): self
    {
        $validator = new Validator();
        $validator->validate($bestPractice, self::$schema['properties']['bestPractice']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->bestPractice = $bestPractice;

        return $clone;
    }

    public function withPerformance(int|float $performance): self
    {
        $validator = new Validator();
        $validator->validate($performance, self::$schema['properties']['performance']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->performance = $performance;

        return $clone;
    }

    public function withSeo(int|float $seo): self
    {
        $validator = new Validator();
        $validator->validate($seo, self::$schema['properties']['seo']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->seo = $seo;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Lighthouse Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Lighthouse
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $accessibility = str_contains((string)($input->{'accessibility'}), '.') ? (float)($input->{'accessibility'}) : (int)($input->{'accessibility'});
        $bestPractice = str_contains((string)($input->{'bestPractice'}), '.') ? (float)($input->{'bestPractice'}) : (int)($input->{'bestPractice'});
        $performance = str_contains((string)($input->{'performance'}), '.') ? (float)($input->{'performance'}) : (int)($input->{'performance'});
        $seo = str_contains((string)($input->{'seo'}), '.') ? (float)($input->{'seo'}) : (int)($input->{'seo'});

        $obj = new self($accessibility, $bestPractice, $performance, $seo);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['accessibility'] = $this->accessibility;
        $output['bestPractice'] = $this->bestPractice;
        $output['performance'] = $this->performance;
        $output['seo'] = $this->seo;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
