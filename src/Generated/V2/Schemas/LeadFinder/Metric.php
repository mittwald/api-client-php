<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\LeadFinder;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.lead-finder.Metric.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Metric
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'category' => [
                'type' => 'number',
            ],
            'score' => [
                'type' => 'number',
            ],
            'unit' => [
                'type' => 'string',
            ],
            'value' => [
                'type' => 'number',
            ],
        ],
        'required' => [
            'category',
        ],
        'type' => 'object',
    ];

    private int|float $category;

    private int|float|null $score = null;

    private ?string $unit = null;

    private int|float|null $value = null;

    public function __construct(int|float $category)
    {
        $this->category = $category;
    }

    public function getCategory(): int|float
    {
        return $this->category;
    }

    public function getScore(): int|float|null
    {
        return $this->score;
    }

    public function getUnit(): ?string
    {
        return $this->unit ?? null;
    }

    public function getValue(): int|float|null
    {
        return $this->value;
    }

    public function withCategory(int|float $category): self
    {
        $validator = new Validator();
        $validator->validate($category, self::$schema['properties']['category']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->category = $category;

        return $clone;
    }

    public function withScore(int|float $score): self
    {
        $validator = new Validator();
        $validator->validate($score, self::$schema['properties']['score']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->score = $score;

        return $clone;
    }

    public function withoutScore(): self
    {
        $clone = clone $this;
        unset($clone->score);

        return $clone;
    }

    public function withUnit(string $unit): self
    {
        $validator = new Validator();
        $validator->validate($unit, self::$schema['properties']['unit']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->unit = $unit;

        return $clone;
    }

    public function withoutUnit(): self
    {
        $clone = clone $this;
        unset($clone->unit);

        return $clone;
    }

    public function withValue(int|float $value): self
    {
        $validator = new Validator();
        $validator->validate($value, self::$schema['properties']['value']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->value = $value;

        return $clone;
    }

    public function withoutValue(): self
    {
        $clone = clone $this;
        unset($clone->value);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Metric Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Metric
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $category = str_contains((string)($input->{'category'}), '.') ? (float)($input->{'category'}) : (int)($input->{'category'});
        $score = null;
        if (isset($input->{'score'})) {
            $score = str_contains((string)($input->{'score'}), '.') ? (float)($input->{'score'}) : (int)($input->{'score'});
        }
        $unit = null;
        if (isset($input->{'unit'})) {
            $unit = $input->{'unit'};
        }
        $value = null;
        if (isset($input->{'value'})) {
            $value = str_contains((string)($input->{'value'}), '.') ? (float)($input->{'value'}) : (int)($input->{'value'});
        }

        $obj = new self($category);
        $obj->score = $score;
        $obj->unit = $unit;
        $obj->value = $value;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['category'] = $this->category;
        if (isset($this->score)) {
            $output['score'] = $this->score;
        }
        if (isset($this->unit)) {
            $output['unit'] = $this->unit;
        }
        if (isset($this->value)) {
            $output['value'] = $this->value;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
