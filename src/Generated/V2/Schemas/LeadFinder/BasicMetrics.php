<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\LeadFinder;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.lead-finder.BasicMetrics.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class BasicMetrics
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'co2' => [
                'type' => 'number',
            ],
            'desktop' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.lead-finder.Lighthouse',
            ],
            'mobile' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.lead-finder.Lighthouse',
            ],
            'timeToFirstByteMs' => [
                'type' => 'number',
            ],
        ],
        'required' => [
            'timeToFirstByteMs',
            'co2',
            'desktop',
            'mobile',
        ],
        'type' => 'object',
    ];

    private int|float $co2;

    private Lighthouse $desktop;

    private Lighthouse $mobile;

    private int|float $timeToFirstByteMs;

    public function __construct(int|float $co2, Lighthouse $desktop, Lighthouse $mobile, int|float $timeToFirstByteMs)
    {
        $this->co2 = $co2;
        $this->desktop = $desktop;
        $this->mobile = $mobile;
        $this->timeToFirstByteMs = $timeToFirstByteMs;
    }

    public function getCo2(): int|float
    {
        return $this->co2;
    }

    public function getDesktop(): Lighthouse
    {
        return $this->desktop;
    }

    public function getMobile(): Lighthouse
    {
        return $this->mobile;
    }

    public function getTimeToFirstByteMs(): int|float
    {
        return $this->timeToFirstByteMs;
    }

    public function withCo2(int|float $co2): self
    {
        $validator = new Validator();
        $validator->validate($co2, self::$schema['properties']['co2']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->co2 = $co2;

        return $clone;
    }

    public function withDesktop(Lighthouse $desktop): self
    {
        $clone = clone $this;
        $clone->desktop = $desktop;

        return $clone;
    }

    public function withMobile(Lighthouse $mobile): self
    {
        $clone = clone $this;
        $clone->mobile = $mobile;

        return $clone;
    }

    public function withTimeToFirstByteMs(int|float $timeToFirstByteMs): self
    {
        $validator = new Validator();
        $validator->validate($timeToFirstByteMs, self::$schema['properties']['timeToFirstByteMs']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->timeToFirstByteMs = $timeToFirstByteMs;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return BasicMetrics Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): BasicMetrics
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $co2 = str_contains((string)($input->{'co2'}), '.') ? (float)($input->{'co2'}) : (int)($input->{'co2'});
        $desktop = Lighthouse::buildFromInput($input->{'desktop'}, validate: $validate);
        $mobile = Lighthouse::buildFromInput($input->{'mobile'}, validate: $validate);
        $timeToFirstByteMs = str_contains((string)($input->{'timeToFirstByteMs'}), '.') ? (float)($input->{'timeToFirstByteMs'}) : (int)($input->{'timeToFirstByteMs'});

        $obj = new self($co2, $desktop, $mobile, $timeToFirstByteMs);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['co2'] = $this->co2;
        $output['desktop'] = $this->desktop->toJson();
        $output['mobile'] = $this->mobile->toJson();
        $output['timeToFirstByteMs'] = $this->timeToFirstByteMs;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
