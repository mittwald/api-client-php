<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\LeadFinder;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.lead-finder.Profile.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Profile
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'approvedOn' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'customerId' => [
                'type' => 'string',
            ],
            'disabledOn' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'domain' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'customerId',
            'domain',
            'approvedOn',
        ],
        'type' => 'object',
    ];

    private DateTime $approvedOn;

    private string $customerId;

    private ?DateTime $disabledOn = null;

    private string $domain;

    public function __construct(DateTime $approvedOn, string $customerId, string $domain)
    {
        $this->approvedOn = $approvedOn;
        $this->customerId = $customerId;
        $this->domain = $domain;
    }

    public function getApprovedOn(): DateTime
    {
        return $this->approvedOn;
    }

    public function getCustomerId(): string
    {
        return $this->customerId;
    }

    public function getDisabledOn(): ?DateTime
    {
        return $this->disabledOn ?? null;
    }

    public function getDomain(): string
    {
        return $this->domain;
    }

    public function withApprovedOn(DateTime $approvedOn): self
    {
        $clone = clone $this;
        $clone->approvedOn = $approvedOn;

        return $clone;
    }

    public function withCustomerId(string $customerId): self
    {
        $validator = new Validator();
        $validator->validate($customerId, self::$schema['properties']['customerId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->customerId = $customerId;

        return $clone;
    }

    public function withDisabledOn(DateTime $disabledOn): self
    {
        $clone = clone $this;
        $clone->disabledOn = $disabledOn;

        return $clone;
    }

    public function withoutDisabledOn(): self
    {
        $clone = clone $this;
        unset($clone->disabledOn);

        return $clone;
    }

    public function withDomain(string $domain): self
    {
        $validator = new Validator();
        $validator->validate($domain, self::$schema['properties']['domain']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->domain = $domain;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Profile Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Profile
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $approvedOn = new DateTime($input->{'approvedOn'});
        $customerId = $input->{'customerId'};
        $disabledOn = null;
        if (isset($input->{'disabledOn'})) {
            $disabledOn = new DateTime($input->{'disabledOn'});
        }
        $domain = $input->{'domain'};

        $obj = new self($approvedOn, $customerId, $domain);
        $obj->disabledOn = $disabledOn;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['approvedOn'] = ($this->approvedOn)->format(DateTime::ATOM);
        $output['customerId'] = $this->customerId;
        if (isset($this->disabledOn)) {
            $output['disabledOn'] = ($this->disabledOn)->format(DateTime::ATOM);
        }
        $output['domain'] = $this->domain;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->approvedOn = clone $this->approvedOn;
        if (isset($this->disabledOn)) {
            $this->disabledOn = clone $this->disabledOn;
        }
    }
}
