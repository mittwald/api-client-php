<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\LeadFinder;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.lead-finder.ProfileRequest.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ProfileRequest
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'createdOn' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'customerId' => [
                'type' => 'string',
            ],
            'domain' => [
                'type' => 'string',
            ],
            'profileId' => [
                'type' => 'string',
            ],
            'requestedBy' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.lead-finder.User',
            ],
            'resultOn' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'status' => [
                'enum' => [
                    'NEW',
                    'AUTOTEST_INIT',
                    'MANUAL_VERIFICATION',
                    'REJECTED',
                    'APPROVED',
                ],
                'type' => 'string',
            ],
        ],
        'required' => [
            'profileId',
            'customerId',
            'domain',
            'status',
            'createdOn',
            'requestedBy',
        ],
        'type' => 'object',
    ];

    private DateTime $createdOn;

    private string $customerId;

    private string $domain;

    private string $profileId;

    private User $requestedBy;

    private ?DateTime $resultOn = null;

    private ProfileRequestStatus $status;

    public function __construct(DateTime $createdOn, string $customerId, string $domain, string $profileId, User $requestedBy, ProfileRequestStatus $status)
    {
        $this->createdOn = $createdOn;
        $this->customerId = $customerId;
        $this->domain = $domain;
        $this->profileId = $profileId;
        $this->requestedBy = $requestedBy;
        $this->status = $status;
    }

    public function getCreatedOn(): DateTime
    {
        return $this->createdOn;
    }

    public function getCustomerId(): string
    {
        return $this->customerId;
    }

    public function getDomain(): string
    {
        return $this->domain;
    }

    public function getProfileId(): string
    {
        return $this->profileId;
    }

    public function getRequestedBy(): User
    {
        return $this->requestedBy;
    }

    public function getResultOn(): ?DateTime
    {
        return $this->resultOn ?? null;
    }

    public function getStatus(): ProfileRequestStatus
    {
        return $this->status;
    }

    public function withCreatedOn(DateTime $createdOn): self
    {
        $clone = clone $this;
        $clone->createdOn = $createdOn;

        return $clone;
    }

    public function withCustomerId(string $customerId): self
    {
        $validator = new Validator();
        $validator->validate($customerId, self::$schema['properties']['customerId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->customerId = $customerId;

        return $clone;
    }

    public function withDomain(string $domain): self
    {
        $validator = new Validator();
        $validator->validate($domain, self::$schema['properties']['domain']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->domain = $domain;

        return $clone;
    }

    public function withProfileId(string $profileId): self
    {
        $validator = new Validator();
        $validator->validate($profileId, self::$schema['properties']['profileId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->profileId = $profileId;

        return $clone;
    }

    public function withRequestedBy(User $requestedBy): self
    {
        $clone = clone $this;
        $clone->requestedBy = $requestedBy;

        return $clone;
    }

    public function withResultOn(DateTime $resultOn): self
    {
        $clone = clone $this;
        $clone->resultOn = $resultOn;

        return $clone;
    }

    public function withoutResultOn(): self
    {
        $clone = clone $this;
        unset($clone->resultOn);

        return $clone;
    }

    public function withStatus(ProfileRequestStatus $status): self
    {
        $clone = clone $this;
        $clone->status = $status;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ProfileRequest Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ProfileRequest
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $createdOn = new DateTime($input->{'createdOn'});
        $customerId = $input->{'customerId'};
        $domain = $input->{'domain'};
        $profileId = $input->{'profileId'};
        $requestedBy = User::buildFromInput($input->{'requestedBy'}, validate: $validate);
        $resultOn = null;
        if (isset($input->{'resultOn'})) {
            $resultOn = new DateTime($input->{'resultOn'});
        }
        $status = ProfileRequestStatus::from($input->{'status'});

        $obj = new self($createdOn, $customerId, $domain, $profileId, $requestedBy, $status);
        $obj->resultOn = $resultOn;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['createdOn'] = ($this->createdOn)->format(DateTime::ATOM);
        $output['customerId'] = $this->customerId;
        $output['domain'] = $this->domain;
        $output['profileId'] = $this->profileId;
        $output['requestedBy'] = $this->requestedBy->toJson();
        if (isset($this->resultOn)) {
            $output['resultOn'] = ($this->resultOn)->format(DateTime::ATOM);
        }
        $output['status'] = ($this->status)->value;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->createdOn = clone $this->createdOn;
        if (isset($this->resultOn)) {
            $this->resultOn = clone $this->resultOn;
        }
    }
}
