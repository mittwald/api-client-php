<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Invoice;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.invoice.Cancellation.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Cancellation
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'cancellationId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'cancelledAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'correctionNumber' => [
                'example' => 'RG1234567',
                'type' => 'string',
            ],
            'pdfId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'reason' => [
                'example' => 'Kulanz',
                'type' => 'string',
            ],
        ],
        'required' => [
            'pdfId',
            'correctionNumber',
            'cancelledAt',
            'cancellationId',
        ],
        'type' => 'object',
    ];

    private string $cancellationId;

    private DateTime $cancelledAt;

    private string $correctionNumber;

    private string $pdfId;

    private ?string $reason = null;

    public function __construct(string $cancellationId, DateTime $cancelledAt, string $correctionNumber, string $pdfId)
    {
        $this->cancellationId = $cancellationId;
        $this->cancelledAt = $cancelledAt;
        $this->correctionNumber = $correctionNumber;
        $this->pdfId = $pdfId;
    }

    public function getCancellationId(): string
    {
        return $this->cancellationId;
    }

    public function getCancelledAt(): DateTime
    {
        return $this->cancelledAt;
    }

    public function getCorrectionNumber(): string
    {
        return $this->correctionNumber;
    }

    public function getPdfId(): string
    {
        return $this->pdfId;
    }

    public function getReason(): ?string
    {
        return $this->reason ?? null;
    }

    public function withCancellationId(string $cancellationId): self
    {
        $validator = new Validator();
        $validator->validate($cancellationId, static::$schema['properties']['cancellationId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->cancellationId = $cancellationId;

        return $clone;
    }

    public function withCancelledAt(DateTime $cancelledAt): self
    {
        $clone = clone $this;
        $clone->cancelledAt = $cancelledAt;

        return $clone;
    }

    public function withCorrectionNumber(string $correctionNumber): self
    {
        $validator = new Validator();
        $validator->validate($correctionNumber, static::$schema['properties']['correctionNumber']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->correctionNumber = $correctionNumber;

        return $clone;
    }

    public function withPdfId(string $pdfId): self
    {
        $validator = new Validator();
        $validator->validate($pdfId, static::$schema['properties']['pdfId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->pdfId = $pdfId;

        return $clone;
    }

    public function withReason(string $reason): self
    {
        $validator = new Validator();
        $validator->validate($reason, static::$schema['properties']['reason']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->reason = $reason;

        return $clone;
    }

    public function withoutReason(): self
    {
        $clone = clone $this;
        unset($clone->reason);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Cancellation Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Cancellation
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $cancellationId = $input->{'cancellationId'};
        $cancelledAt = new DateTime($input->{'cancelledAt'});
        $correctionNumber = $input->{'correctionNumber'};
        $pdfId = $input->{'pdfId'};
        $reason = null;
        if (isset($input->{'reason'})) {
            $reason = $input->{'reason'};
        }

        $obj = new self($cancellationId, $cancelledAt, $correctionNumber, $pdfId);
        $obj->reason = $reason;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['cancellationId'] = $this->cancellationId;
        $output['cancelledAt'] = ($this->cancelledAt)->format(DateTime::ATOM);
        $output['correctionNumber'] = $this->correctionNumber;
        $output['pdfId'] = $this->pdfId;
        if (isset($this->reason)) {
            $output['reason'] = $this->reason;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->cancelledAt = clone $this->cancelledAt;
    }
}
