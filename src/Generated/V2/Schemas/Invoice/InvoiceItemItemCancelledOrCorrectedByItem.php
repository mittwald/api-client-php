<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Invoice;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.invoice.InvoiceItem.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class InvoiceItemItemCancelledOrCorrectedByItem
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'sourceInvoiceId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'sourceInvoiceItemId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
        ],
        'type' => 'object',
    ];

    private ?string $sourceInvoiceId = null;

    private ?string $sourceInvoiceItemId = null;

    /**
     *
     */
    public function __construct()
    {
    }

    public function getSourceInvoiceId(): ?string
    {
        return $this->sourceInvoiceId ?? null;
    }

    public function getSourceInvoiceItemId(): ?string
    {
        return $this->sourceInvoiceItemId ?? null;
    }

    public function withSourceInvoiceId(string $sourceInvoiceId): self
    {
        $validator = new Validator();
        $validator->validate($sourceInvoiceId, self::$internalValidationSchema['properties']['sourceInvoiceId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->sourceInvoiceId = $sourceInvoiceId;

        return $clone;
    }

    public function withoutSourceInvoiceId(): self
    {
        $clone = clone $this;
        unset($clone->sourceInvoiceId);

        return $clone;
    }

    public function withSourceInvoiceItemId(string $sourceInvoiceItemId): self
    {
        $validator = new Validator();
        $validator->validate($sourceInvoiceItemId, self::$internalValidationSchema['properties']['sourceInvoiceItemId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->sourceInvoiceItemId = $sourceInvoiceItemId;

        return $clone;
    }

    public function withoutSourceInvoiceItemId(): self
    {
        $clone = clone $this;
        unset($clone->sourceInvoiceItemId);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return InvoiceItemItemCancelledOrCorrectedByItem Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): InvoiceItemItemCancelledOrCorrectedByItem
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $sourceInvoiceId = null;
        if (isset($input->{'sourceInvoiceId'})) {
            $sourceInvoiceId = $input->{'sourceInvoiceId'};
        }
        $sourceInvoiceItemId = null;
        if (isset($input->{'sourceInvoiceItemId'})) {
            $sourceInvoiceItemId = $input->{'sourceInvoiceItemId'};
        }

        $obj = new self();
        $obj->sourceInvoiceId = $sourceInvoiceId;
        $obj->sourceInvoiceItemId = $sourceInvoiceItemId;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->sourceInvoiceId)) {
            $output['sourceInvoiceId'] = $this->sourceInvoiceId;
        }
        if (isset($this->sourceInvoiceItemId)) {
            $output['sourceInvoiceItemId'] = $this->sourceInvoiceItemId;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
