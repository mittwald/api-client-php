<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Invoice;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.invoice.InvoiceSettingsStatus.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class InvoiceSettingsStatus
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'message' => [
                'example' => 'Unfortunately, we were unable to debit your account. Please update your account details.',
                'type' => 'string',
            ],
            'severity' => [
                'enum' => [
                    'success',
                    'info',
                    'warning',
                    'error',
                ],
                'type' => 'string',
            ],
            'type' => [
                'enum' => [
                    'returnDebitNote',
                    'returnDebitNoteWaitingForPayment',
                ],
                'type' => 'string',
            ],
        ],
        'required' => [
            'severity',
            'type',
            'message',
        ],
        'type' => 'object',
    ];

    private string $message;

    private InvoiceSettingsStatusSeverity $severity;

    private InvoiceSettingsStatusType $type;

    public function __construct(string $message, InvoiceSettingsStatusSeverity $severity, InvoiceSettingsStatusType $type)
    {
        $this->message = $message;
        $this->severity = $severity;
        $this->type = $type;
    }

    public function getMessage(): string
    {
        return $this->message;
    }

    public function getSeverity(): InvoiceSettingsStatusSeverity
    {
        return $this->severity;
    }

    public function getType(): InvoiceSettingsStatusType
    {
        return $this->type;
    }

    public function withMessage(string $message): self
    {
        $validator = new Validator();
        $validator->validate($message, static::$schema['properties']['message']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->message = $message;

        return $clone;
    }

    public function withSeverity(InvoiceSettingsStatusSeverity $severity): self
    {
        $clone = clone $this;
        $clone->severity = $severity;

        return $clone;
    }

    public function withType(InvoiceSettingsStatusType $type): self
    {
        $clone = clone $this;
        $clone->type = $type;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return InvoiceSettingsStatus Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): InvoiceSettingsStatus
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $message = $input->{'message'};
        $severity = InvoiceSettingsStatusSeverity::from($input->{'severity'});
        $type = InvoiceSettingsStatusType::from($input->{'type'});

        $obj = new self($message, $severity, $type);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['message'] = $this->message;
        $output['severity'] = ($this->severity)->value;
        $output['type'] = ($this->type)->value;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
