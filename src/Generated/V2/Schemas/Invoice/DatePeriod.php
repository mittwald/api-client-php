<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Invoice;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.invoice.DatePeriod.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class DatePeriod
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'end' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'start' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
        ],
        'required' => [
            'start',
            'end',
        ],
        'type' => 'object',
    ];

    private DateTime $end;

    private DateTime $start;

    public function __construct(DateTime $end, DateTime $start)
    {
        $this->end = $end;
        $this->start = $start;
    }

    public function getEnd(): DateTime
    {
        return $this->end;
    }

    public function getStart(): DateTime
    {
        return $this->start;
    }

    public function withEnd(DateTime $end): self
    {
        $clone = clone $this;
        $clone->end = $end;

        return $clone;
    }

    public function withStart(DateTime $start): self
    {
        $clone = clone $this;
        $clone->start = $start;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return DatePeriod Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): DatePeriod
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $end = new DateTime($input->{'end'});
        $start = new DateTime($input->{'start'});

        $obj = new self($end, $start);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['end'] = ($this->end)->format(DateTime::ATOM);
        $output['start'] = ($this->start)->format(DateTime::ATOM);

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->end = clone $this->end;
        $this->start = clone $this->start;
    }
}
