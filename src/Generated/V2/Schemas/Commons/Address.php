<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Commons;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.commons.Address.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Address
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'type' => 'object',
        'properties' => [
            'street' => [
                'type' => 'string',
                'example' => 'Königsberger Straße',
            ],
            'houseNumber' => [
                'type' => 'string',
                'example' => '4-6',
            ],
            'city' => [
                'type' => 'string',
                'example' => 'Espelkamp',
            ],
            'zip' => [
                'type' => 'string',
                'example' => '32339',
            ],
            'countryCode' => [
                'type' => 'string',
                'example' => 'DE',
                'description' => 'ISO 3166-1 alpha-2 country code',
            ],
            'addressPrefix' => [
                'type' => 'string',
                'example' => 'c/o Ada Lovelace',
            ],
        ],
        'required' => [
            'street',
            'houseNumber',
            'city',
            'zip',
            'countryCode',
        ],
    ];

    private string $street;

    private string $houseNumber;

    private string $city;

    private string $zip;

    /**
     * ISO 3166-1 alpha-2 country code
     */
    private string $countryCode;

    private ?string $addressPrefix = null;

    public function __construct(string $street, string $houseNumber, string $city, string $zip, string $countryCode)
    {
        $this->street = $street;
        $this->houseNumber = $houseNumber;
        $this->city = $city;
        $this->zip = $zip;
        $this->countryCode = $countryCode;
    }

    public function getStreet(): string
    {
        return $this->street;
    }

    public function getHouseNumber(): string
    {
        return $this->houseNumber;
    }

    public function getCity(): string
    {
        return $this->city;
    }

    public function getZip(): string
    {
        return $this->zip;
    }

    public function getCountryCode(): string
    {
        return $this->countryCode;
    }

    public function getAddressPrefix(): ?string
    {
        return $this->addressPrefix ?? null;
    }

    public function withStreet(string $street): self
    {
        $validator = new Validator();
        $validator->validate($street, static::$schema['properties']['street']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->street = $street;

        return $clone;
    }

    public function withHouseNumber(string $houseNumber): self
    {
        $validator = new Validator();
        $validator->validate($houseNumber, static::$schema['properties']['houseNumber']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->houseNumber = $houseNumber;

        return $clone;
    }

    public function withCity(string $city): self
    {
        $validator = new Validator();
        $validator->validate($city, static::$schema['properties']['city']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->city = $city;

        return $clone;
    }

    public function withZip(string $zip): self
    {
        $validator = new Validator();
        $validator->validate($zip, static::$schema['properties']['zip']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->zip = $zip;

        return $clone;
    }

    public function withCountryCode(string $countryCode): self
    {
        $validator = new Validator();
        $validator->validate($countryCode, static::$schema['properties']['countryCode']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->countryCode = $countryCode;

        return $clone;
    }

    public function withAddressPrefix(string $addressPrefix): self
    {
        $validator = new Validator();
        $validator->validate($addressPrefix, static::$schema['properties']['addressPrefix']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->addressPrefix = $addressPrefix;

        return $clone;
    }

    public function withoutAddressPrefix(): self
    {
        $clone = clone $this;
        unset($clone->addressPrefix);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Address Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Address
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $street = $input->{'street'};
        $houseNumber = $input->{'houseNumber'};
        $city = $input->{'city'};
        $zip = $input->{'zip'};
        $countryCode = $input->{'countryCode'};
        $addressPrefix = null;
        if (isset($input->{'addressPrefix'})) {
            $addressPrefix = $input->{'addressPrefix'};
        }

        $obj = new self($street, $houseNumber, $city, $zip, $countryCode);
        $obj->addressPrefix = $addressPrefix;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['street'] = $this->street;
        $output['houseNumber'] = $this->houseNumber;
        $output['city'] = $this->city;
        $output['zip'] = $this->zip;
        $output['countryCode'] = $this->countryCode;
        if (isset($this->addressPrefix)) {
            $output['addressPrefix'] = $this->addressPrefix;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
