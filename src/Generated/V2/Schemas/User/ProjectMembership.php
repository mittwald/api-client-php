<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\User;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.user.ProjectMembership.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ProjectMembership
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'expiresAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'inherited' => [
                'type' => 'boolean',
            ],
            'memberSince' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'role' => [
                'enum' => [
                    'owner',
                    'emailadmin',
                    'external',
                ],
                'type' => 'string',
            ],
        ],
        'required' => [
            'role',
            'memberSince',
            'inherited',
        ],
        'type' => 'object',
    ];

    private ?DateTime $expiresAt = null;

    private bool $inherited;

    private DateTime $memberSince;

    private ProjectMembershipRole $role;

    public function __construct(bool $inherited, DateTime $memberSince, ProjectMembershipRole $role)
    {
        $this->inherited = $inherited;
        $this->memberSince = $memberSince;
        $this->role = $role;
    }

    public function getExpiresAt(): ?DateTime
    {
        return $this->expiresAt ?? null;
    }

    public function getInherited(): bool
    {
        return $this->inherited;
    }

    public function getMemberSince(): DateTime
    {
        return $this->memberSince;
    }

    public function getRole(): ProjectMembershipRole
    {
        return $this->role;
    }

    public function withExpiresAt(DateTime $expiresAt): self
    {
        $clone = clone $this;
        $clone->expiresAt = $expiresAt;

        return $clone;
    }

    public function withoutExpiresAt(): self
    {
        $clone = clone $this;
        unset($clone->expiresAt);

        return $clone;
    }

    public function withInherited(bool $inherited): self
    {
        $validator = new Validator();
        $validator->validate($inherited, static::$schema['properties']['inherited']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->inherited = $inherited;

        return $clone;
    }

    public function withMemberSince(DateTime $memberSince): self
    {
        $clone = clone $this;
        $clone->memberSince = $memberSince;

        return $clone;
    }

    public function withRole(ProjectMembershipRole $role): self
    {
        $clone = clone $this;
        $clone->role = $role;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ProjectMembership Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ProjectMembership
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $expiresAt = null;
        if (isset($input->{'expiresAt'})) {
            $expiresAt = new DateTime($input->{'expiresAt'});
        }
        $inherited = (bool)($input->{'inherited'});
        $memberSince = new DateTime($input->{'memberSince'});
        $role = ProjectMembershipRole::from($input->{'role'});

        $obj = new self($inherited, $memberSince, $role);
        $obj->expiresAt = $expiresAt;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->expiresAt)) {
            $output['expiresAt'] = ($this->expiresAt)->format(DateTime::ATOM);
        }
        $output['inherited'] = $this->inherited;
        $output['memberSince'] = ($this->memberSince)->format(DateTime::ATOM);
        $output['role'] = ($this->role)->value;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->expiresAt)) {
            $this->expiresAt = clone $this->expiresAt;
        }
        $this->memberSince = clone $this->memberSince;
    }
}
