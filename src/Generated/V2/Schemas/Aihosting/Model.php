<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Aihosting;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.aihosting.Model.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Model
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'displayName' => [
                'type' => 'string',
            ],
            'docLink' => [
                'type' => 'string',
            ],
            'name' => [
                'type' => 'string',
            ],
            'termsOfServiceLink' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'name',
            'displayName',
            'docLink',
            'termsOfServiceLink',
        ],
        'type' => 'object',
    ];

    private string $displayName;

    private string $docLink;

    private string $name;

    private string $termsOfServiceLink;

    public function __construct(string $displayName, string $docLink, string $name, string $termsOfServiceLink)
    {
        $this->displayName = $displayName;
        $this->docLink = $docLink;
        $this->name = $name;
        $this->termsOfServiceLink = $termsOfServiceLink;
    }

    public function getDisplayName(): string
    {
        return $this->displayName;
    }

    public function getDocLink(): string
    {
        return $this->docLink;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getTermsOfServiceLink(): string
    {
        return $this->termsOfServiceLink;
    }

    public function withDisplayName(string $displayName): self
    {
        $validator = new Validator();
        $validator->validate($displayName, self::$internalValidationSchema['properties']['displayName']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->displayName = $displayName;

        return $clone;
    }

    public function withDocLink(string $docLink): self
    {
        $validator = new Validator();
        $validator->validate($docLink, self::$internalValidationSchema['properties']['docLink']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->docLink = $docLink;

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, self::$internalValidationSchema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withTermsOfServiceLink(string $termsOfServiceLink): self
    {
        $validator = new Validator();
        $validator->validate($termsOfServiceLink, self::$internalValidationSchema['properties']['termsOfServiceLink']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->termsOfServiceLink = $termsOfServiceLink;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Model Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Model
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $displayName = $input->{'displayName'};
        $docLink = $input->{'docLink'};
        $name = $input->{'name'};
        $termsOfServiceLink = $input->{'termsOfServiceLink'};

        $obj = new self($displayName, $docLink, $name, $termsOfServiceLink);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['displayName'] = $this->displayName;
        $output['docLink'] = $this->docLink;
        $output['name'] = $this->name;
        $output['termsOfServiceLink'] = $this->termsOfServiceLink;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
