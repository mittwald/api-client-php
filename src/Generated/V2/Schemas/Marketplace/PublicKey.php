<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.PublicKey.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class PublicKey
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'algorithm' => [
                'example' => 'Ed25519',
                'type' => 'string',
            ],
            'key' => [
                'anyOf' => [
                    [
                        'description' => 'raw base64 public key',
                        'format' => 'byte',
                        'type' => 'string',
                    ],
                    [
                        'description' => 'SPKI, ASN.1 DER serialized, PEM encoded public key',
                        'type' => 'string',
                    ],
                ],
            ],
            'serial' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
        ],
        'required' => [
            'serial',
            'algorithm',
            'key',
        ],
        'type' => 'object',
    ];

    private string $algorithm;

    private string $key;

    private string $serial;

    public function __construct(string $algorithm, string $key, string $serial)
    {
        $this->algorithm = $algorithm;
        $this->key = $key;
        $this->serial = $serial;
    }

    public function getAlgorithm(): string
    {
        return $this->algorithm;
    }

    public function getKey(): string
    {
        return $this->key;
    }

    public function getSerial(): string
    {
        return $this->serial;
    }

    public function withAlgorithm(string $algorithm): self
    {
        $validator = new Validator();
        $validator->validate($algorithm, self::$internalValidationSchema['properties']['algorithm']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->algorithm = $algorithm;

        return $clone;
    }

    public function withKey(string $key): self
    {
        $clone = clone $this;
        $clone->key = $key;

        return $clone;
    }

    public function withSerial(string $serial): self
    {
        $validator = new Validator();
        $validator->validate($serial, self::$internalValidationSchema['properties']['serial']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->serial = $serial;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return PublicKey Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): PublicKey
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $algorithm = $input->{'algorithm'};
        $key = match (true) {
            is_string($input->{'key'}) => $input->{'key'},
            default => throw new InvalidArgumentException("could not build property 'key' from JSON"),
        };
        $serial = $input->{'serial'};

        $obj = new self($algorithm, $key, $serial);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['algorithm'] = $this->algorithm;
        $output['key'] = match (true) {
            is_string($this->key) => $this->key,
        };
        $output['serial'] = $this->serial;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->key = match (true) {
            is_string($this->key) => $this->key,
        };
    }
}
