<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;
use Mittwald\ApiClient\Generated\V2\Schemas\Commons\Contact;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.ContractOwner.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ContractOwner
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'contact' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.commons.Contact',
            ],
            'inherited' => [
                'type' => 'boolean',
            ],
        ],
        'required' => [
            'contact',
            'inherited',
        ],
        'type' => 'object',
    ];

    private Contact $contact;

    private bool $inherited;

    public function __construct(Contact $contact, bool $inherited)
    {
        $this->contact = $contact;
        $this->inherited = $inherited;
    }

    public function getContact(): Contact
    {
        return $this->contact;
    }

    public function getInherited(): bool
    {
        return $this->inherited;
    }

    public function withContact(Contact $contact): self
    {
        $clone = clone $this;
        $clone->contact = $contact;

        return $clone;
    }

    public function withInherited(bool $inherited): self
    {
        $validator = new Validator();
        $validator->validate($inherited, self::$internalValidationSchema['properties']['inherited']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->inherited = $inherited;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ContractOwner Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ContractOwner
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $contact = Contact::buildFromInput($input->{'contact'}, validate: $validate);
        $inherited = (bool)($input->{'inherited'});

        $obj = new self($contact, $inherited);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['contact'] = $this->contact->toJson();
        $output['inherited'] = $this->inherited;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
