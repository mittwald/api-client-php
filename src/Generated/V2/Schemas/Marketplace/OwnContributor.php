<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.OwnContributor.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class OwnContributor
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'contactPersonUserId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'contractOwner' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ContractOwner',
            ],
            'contributorNumber' => [
                'type' => 'string',
            ],
            'customerId' => [
                'type' => 'string',
            ],
            'description' => [
                'type' => 'string',
            ],
            'descriptions' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.LocalizedDescription',
            ],
            'email' => [
                'deprecated' => true,
                'format' => 'email',
                'type' => 'string',
            ],
            'homepage' => [
                'format' => 'uri',
                'type' => 'string',
            ],
            'id' => [
                'type' => 'string',
            ],
            'imprint' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ContributorImprint',
            ],
            'logoInherited' => [
                'type' => 'boolean',
            ],
            'logoRefId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'name' => [
                'type' => 'string',
            ],
            'nameInherited' => [
                'type' => 'boolean',
            ],
            'phone' => [
                'deprecated' => true,
                'type' => 'string',
            ],
            'state' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ContributorState',
            ],
            'supportInformation' => [
                'allOf' => [
                    [
                        '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.SupportMeta',
                    ],
                    [
                        'properties' => [
                            'inherited' => [
                                'description' => 'Whether the support information is inherited from the customer.',
                                'type' => 'boolean',
                            ],
                        ],
                        'required' => [
                            'inherited',
                        ],
                        'type' => 'object',
                    ],
                ],
            ],
            'url' => [
                'deprecated' => true,
                'type' => 'string',
            ],
            'verificationRequested' => [
                'type' => 'boolean',
            ],
            'verified' => [
                'type' => 'boolean',
            ],
        ],
        'required' => [
            'id',
            'customerId',
            'state',
            'verified',
            'verificationRequested',
            'name',
            'nameInherited',
            'supportInformation',
            'email',
            'contactPersonUserId',
            'contractOwner',
            'contributorNumber',
        ],
        'type' => 'object',
    ];

    private string $contactPersonUserId;

    private ContractOwner $contractOwner;

    private string $contributorNumber;

    private string $customerId;

    private ?string $description = null;

    private ?LocalizedDescription $descriptions = null;

    /**
     * @deprecated
     */
    private string $email;

    private ?string $homepage = null;

    private string $id;

    private ContributorImprintAlternative1|ContributorImprintAlternative2|null $imprint = null;

    private ?bool $logoInherited = null;

    private ?string $logoRefId = null;

    private string $name;

    private bool $nameInherited;

    /**
     * @deprecated
     */
    private ?string $phone = null;

    private ContributorState $state;

    private OwnContributorSupportInformation $supportInformation;

    /**
     * @deprecated
     */
    private ?string $url = null;

    private bool $verificationRequested;

    private bool $verified;

    public function __construct(string $contactPersonUserId, ContractOwner $contractOwner, string $contributorNumber, string $customerId, string $email, string $id, string $name, bool $nameInherited, ContributorState $state, OwnContributorSupportInformation $supportInformation, bool $verificationRequested, bool $verified)
    {
        $this->contactPersonUserId = $contactPersonUserId;
        $this->contractOwner = $contractOwner;
        $this->contributorNumber = $contributorNumber;
        $this->customerId = $customerId;
        $this->email = $email;
        $this->id = $id;
        $this->name = $name;
        $this->nameInherited = $nameInherited;
        $this->state = $state;
        $this->supportInformation = $supportInformation;
        $this->verificationRequested = $verificationRequested;
        $this->verified = $verified;
    }

    public function getContactPersonUserId(): string
    {
        return $this->contactPersonUserId;
    }

    public function getContractOwner(): ContractOwner
    {
        return $this->contractOwner;
    }

    public function getContributorNumber(): string
    {
        return $this->contributorNumber;
    }

    public function getCustomerId(): string
    {
        return $this->customerId;
    }

    public function getDescription(): ?string
    {
        return $this->description ?? null;
    }

    public function getDescriptions(): ?LocalizedDescription
    {
        return $this->descriptions ?? null;
    }

    /**
     * @deprecated
     */
    public function getEmail(): string
    {
        return $this->email;
    }

    public function getHomepage(): ?string
    {
        return $this->homepage ?? null;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getImprint(): ContributorImprintAlternative1|ContributorImprintAlternative2|null
    {
        return $this->imprint;
    }

    public function getLogoInherited(): ?bool
    {
        return $this->logoInherited ?? null;
    }

    public function getLogoRefId(): ?string
    {
        return $this->logoRefId ?? null;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getNameInherited(): bool
    {
        return $this->nameInherited;
    }

    /**
     * @deprecated
     */
    public function getPhone(): ?string
    {
        return $this->phone ?? null;
    }

    public function getState(): ContributorState
    {
        return $this->state;
    }

    public function getSupportInformation(): OwnContributorSupportInformation
    {
        return $this->supportInformation;
    }

    /**
     * @deprecated
     */
    public function getUrl(): ?string
    {
        return $this->url ?? null;
    }

    public function getVerificationRequested(): bool
    {
        return $this->verificationRequested;
    }

    public function getVerified(): bool
    {
        return $this->verified;
    }

    public function withContactPersonUserId(string $contactPersonUserId): self
    {
        $validator = new Validator();
        $validator->validate($contactPersonUserId, self::$internalValidationSchema['properties']['contactPersonUserId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->contactPersonUserId = $contactPersonUserId;

        return $clone;
    }

    public function withContractOwner(ContractOwner $contractOwner): self
    {
        $clone = clone $this;
        $clone->contractOwner = $contractOwner;

        return $clone;
    }

    public function withContributorNumber(string $contributorNumber): self
    {
        $validator = new Validator();
        $validator->validate($contributorNumber, self::$internalValidationSchema['properties']['contributorNumber']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->contributorNumber = $contributorNumber;

        return $clone;
    }

    public function withCustomerId(string $customerId): self
    {
        $validator = new Validator();
        $validator->validate($customerId, self::$internalValidationSchema['properties']['customerId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->customerId = $customerId;

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$internalValidationSchema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withoutDescription(): self
    {
        $clone = clone $this;
        unset($clone->description);

        return $clone;
    }

    public function withDescriptions(LocalizedDescription $descriptions): self
    {
        $clone = clone $this;
        $clone->descriptions = $descriptions;

        return $clone;
    }

    public function withoutDescriptions(): self
    {
        $clone = clone $this;
        unset($clone->descriptions);

        return $clone;
    }

    /**
     * @deprecated
     */
    public function withEmail(string $email): self
    {
        $validator = new Validator();
        $validator->validate($email, self::$internalValidationSchema['properties']['email']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->email = $email;

        return $clone;
    }

    public function withHomepage(string $homepage): self
    {
        $validator = new Validator();
        $validator->validate($homepage, self::$internalValidationSchema['properties']['homepage']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->homepage = $homepage;

        return $clone;
    }

    public function withoutHomepage(): self
    {
        $clone = clone $this;
        unset($clone->homepage);

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, self::$internalValidationSchema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withImprint(ContributorImprintAlternative1|ContributorImprintAlternative2 $imprint): self
    {
        $clone = clone $this;
        $clone->imprint = $imprint;

        return $clone;
    }

    public function withoutImprint(): self
    {
        $clone = clone $this;
        unset($clone->imprint);

        return $clone;
    }

    public function withLogoInherited(bool $logoInherited): self
    {
        $validator = new Validator();
        $validator->validate($logoInherited, self::$internalValidationSchema['properties']['logoInherited']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->logoInherited = $logoInherited;

        return $clone;
    }

    public function withoutLogoInherited(): self
    {
        $clone = clone $this;
        unset($clone->logoInherited);

        return $clone;
    }

    public function withLogoRefId(string $logoRefId): self
    {
        $validator = new Validator();
        $validator->validate($logoRefId, self::$internalValidationSchema['properties']['logoRefId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->logoRefId = $logoRefId;

        return $clone;
    }

    public function withoutLogoRefId(): self
    {
        $clone = clone $this;
        unset($clone->logoRefId);

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, self::$internalValidationSchema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withNameInherited(bool $nameInherited): self
    {
        $validator = new Validator();
        $validator->validate($nameInherited, self::$internalValidationSchema['properties']['nameInherited']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->nameInherited = $nameInherited;

        return $clone;
    }

    /**
     * @deprecated
     */
    public function withPhone(string $phone): self
    {
        $validator = new Validator();
        $validator->validate($phone, self::$internalValidationSchema['properties']['phone']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->phone = $phone;

        return $clone;
    }

    public function withoutPhone(): self
    {
        $clone = clone $this;
        unset($clone->phone);

        return $clone;
    }

    public function withState(ContributorState $state): self
    {
        $clone = clone $this;
        $clone->state = $state;

        return $clone;
    }

    public function withSupportInformation(OwnContributorSupportInformation $supportInformation): self
    {
        $clone = clone $this;
        $clone->supportInformation = $supportInformation;

        return $clone;
    }

    /**
     * @deprecated
     */
    public function withUrl(string $url): self
    {
        $validator = new Validator();
        $validator->validate($url, self::$internalValidationSchema['properties']['url']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->url = $url;

        return $clone;
    }

    public function withoutUrl(): self
    {
        $clone = clone $this;
        unset($clone->url);

        return $clone;
    }

    public function withVerificationRequested(bool $verificationRequested): self
    {
        $validator = new Validator();
        $validator->validate($verificationRequested, self::$internalValidationSchema['properties']['verificationRequested']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->verificationRequested = $verificationRequested;

        return $clone;
    }

    public function withVerified(bool $verified): self
    {
        $validator = new Validator();
        $validator->validate($verified, self::$internalValidationSchema['properties']['verified']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->verified = $verified;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return OwnContributor Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): OwnContributor
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $contactPersonUserId = $input->{'contactPersonUserId'};
        $contractOwner = ContractOwner::buildFromInput($input->{'contractOwner'}, validate: $validate);
        $contributorNumber = $input->{'contributorNumber'};
        $customerId = $input->{'customerId'};
        $description = null;
        if (isset($input->{'description'})) {
            $description = $input->{'description'};
        }
        $descriptions = null;
        if (isset($input->{'descriptions'})) {
            $descriptions = LocalizedDescription::buildFromInput($input->{'descriptions'}, validate: $validate);
        }
        $email = $input->{'email'};
        $homepage = null;
        if (isset($input->{'homepage'})) {
            $homepage = $input->{'homepage'};
        }
        $id = $input->{'id'};
        $imprint = null;
        if (isset($input->{'imprint'})) {
            $imprint = match (true) {
                default => throw new InvalidArgumentException("input cannot be mapped to any valid type"),
                ContributorImprintAlternative1::validateInput($input->{'imprint'}, true) => ContributorImprintAlternative1::buildFromInput($input->{'imprint'}, validate: $validate),
                ContributorImprintAlternative2::validateInput($input->{'imprint'}, true) => ContributorImprintAlternative2::buildFromInput($input->{'imprint'}, validate: $validate),
            };
        }
        $logoInherited = null;
        if (isset($input->{'logoInherited'})) {
            $logoInherited = (bool)($input->{'logoInherited'});
        }
        $logoRefId = null;
        if (isset($input->{'logoRefId'})) {
            $logoRefId = $input->{'logoRefId'};
        }
        $name = $input->{'name'};
        $nameInherited = (bool)($input->{'nameInherited'});
        $phone = null;
        if (isset($input->{'phone'})) {
            $phone = $input->{'phone'};
        }
        $state = ContributorState::from($input->{'state'});
        $supportInformation = OwnContributorSupportInformation::buildFromInput($input->{'supportInformation'}, validate: $validate);
        $url = null;
        if (isset($input->{'url'})) {
            $url = $input->{'url'};
        }
        $verificationRequested = (bool)($input->{'verificationRequested'});
        $verified = (bool)($input->{'verified'});

        $obj = new self($contactPersonUserId, $contractOwner, $contributorNumber, $customerId, $email, $id, $name, $nameInherited, $state, $supportInformation, $verificationRequested, $verified);
        $obj->description = $description;
        $obj->descriptions = $descriptions;
        $obj->homepage = $homepage;
        $obj->imprint = $imprint;
        $obj->logoInherited = $logoInherited;
        $obj->logoRefId = $logoRefId;
        $obj->phone = $phone;
        $obj->url = $url;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['contactPersonUserId'] = $this->contactPersonUserId;
        $output['contractOwner'] = $this->contractOwner->toJson();
        $output['contributorNumber'] = $this->contributorNumber;
        $output['customerId'] = $this->customerId;
        if (isset($this->description)) {
            $output['description'] = $this->description;
        }
        if (isset($this->descriptions)) {
            $output['descriptions'] = $this->descriptions->toJson();
        }
        $output['email'] = $this->email;
        if (isset($this->homepage)) {
            $output['homepage'] = $this->homepage;
        }
        $output['id'] = $this->id;
        if (isset($this->imprint)) {
            $output['imprint'] = match (true) {
                default => throw new InvalidArgumentException("input cannot be mapped to any valid type"),
                ($this->imprint) instanceof ContributorImprintAlternative1, ($this->imprint) instanceof ContributorImprintAlternative2 => $this->imprint->toJson(),
            };
        }
        if (isset($this->logoInherited)) {
            $output['logoInherited'] = $this->logoInherited;
        }
        if (isset($this->logoRefId)) {
            $output['logoRefId'] = $this->logoRefId;
        }
        $output['name'] = $this->name;
        $output['nameInherited'] = $this->nameInherited;
        if (isset($this->phone)) {
            $output['phone'] = $this->phone;
        }
        $output['state'] = $this->state->value;
        $output['supportInformation'] = ($this->supportInformation)->toJson();
        if (isset($this->url)) {
            $output['url'] = $this->url;
        }
        $output['verificationRequested'] = $this->verificationRequested;
        $output['verified'] = $this->verified;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->supportInformation = clone $this->supportInformation;
    }
}
