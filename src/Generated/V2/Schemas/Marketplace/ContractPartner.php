<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.ContractPartner.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ContractPartner
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'contractPartner' => [
                'properties' => [
                    'address' => [
                        '$ref' => '#/components/schemas/de.mittwald.v1.commons.Address',
                    ],
                    'company' => [
                        'example' => 'mittwald',
                        'type' => 'string',
                    ],
                    'email' => [
                        'example' => 'a.lovelace@example.com',
                        'type' => 'string',
                    ],
                    'firstName' => [
                        'example' => 'Ada',
                        'type' => 'string',
                    ],
                    'lastName' => [
                        'example' => 'Lovelace',
                        'type' => 'string',
                    ],
                ],
                'required' => [
                    'firstName',
                    'lastName',
                    'email',
                    'address',
                ],
            ],
            'createdAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'extensionId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'extensionInstanceId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'parentCustomerId' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'extensionInstanceId',
            'extensionId',
            'createdAt',
            'parentCustomerId',
            'contractPartner',
        ],
        'type' => 'object',
    ];

    private ContractPartnerContractPartner $contractPartner;

    private DateTime $createdAt;

    private string $extensionId;

    private string $extensionInstanceId;

    private string $parentCustomerId;

    public function __construct(ContractPartnerContractPartner $contractPartner, DateTime $createdAt, string $extensionId, string $extensionInstanceId, string $parentCustomerId)
    {
        $this->contractPartner = $contractPartner;
        $this->createdAt = $createdAt;
        $this->extensionId = $extensionId;
        $this->extensionInstanceId = $extensionInstanceId;
        $this->parentCustomerId = $parentCustomerId;
    }

    public function getContractPartner(): ContractPartnerContractPartner
    {
        return $this->contractPartner;
    }

    public function getCreatedAt(): DateTime
    {
        return $this->createdAt;
    }

    public function getExtensionId(): string
    {
        return $this->extensionId;
    }

    public function getExtensionInstanceId(): string
    {
        return $this->extensionInstanceId;
    }

    public function getParentCustomerId(): string
    {
        return $this->parentCustomerId;
    }

    public function withContractPartner(ContractPartnerContractPartner $contractPartner): self
    {
        $clone = clone $this;
        $clone->contractPartner = $contractPartner;

        return $clone;
    }

    public function withCreatedAt(DateTime $createdAt): self
    {
        $clone = clone $this;
        $clone->createdAt = $createdAt;

        return $clone;
    }

    public function withExtensionId(string $extensionId): self
    {
        $validator = new Validator();
        $validator->validate($extensionId, self::$internalValidationSchema['properties']['extensionId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->extensionId = $extensionId;

        return $clone;
    }

    public function withExtensionInstanceId(string $extensionInstanceId): self
    {
        $validator = new Validator();
        $validator->validate($extensionInstanceId, self::$internalValidationSchema['properties']['extensionInstanceId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->extensionInstanceId = $extensionInstanceId;

        return $clone;
    }

    public function withParentCustomerId(string $parentCustomerId): self
    {
        $validator = new Validator();
        $validator->validate($parentCustomerId, self::$internalValidationSchema['properties']['parentCustomerId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->parentCustomerId = $parentCustomerId;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ContractPartner Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ContractPartner
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $contractPartner = ContractPartnerContractPartner::buildFromInput($input->{'contractPartner'}, validate: $validate);
        $createdAt = new DateTime($input->{'createdAt'});
        $extensionId = $input->{'extensionId'};
        $extensionInstanceId = $input->{'extensionInstanceId'};
        $parentCustomerId = $input->{'parentCustomerId'};

        $obj = new self($contractPartner, $createdAt, $extensionId, $extensionInstanceId, $parentCustomerId);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['contractPartner'] = ($this->contractPartner)->toJson();
        $output['createdAt'] = ($this->createdAt)->format(DateTime::ATOM);
        $output['extensionId'] = $this->extensionId;
        $output['extensionInstanceId'] = $this->extensionInstanceId;
        $output['parentCustomerId'] = $this->parentCustomerId;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->contractPartner = clone $this->contractPartner;
        $this->createdAt = clone $this->createdAt;
    }
}
