<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;
use Mittwald\ApiClient\Generated\V2\Schemas\Commons\Address;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.ContractPartner.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ContractPartnerContractPartner
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'address' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.commons.Address',
            ],
            'company' => [
                'example' => 'mittwald',
                'type' => 'string',
            ],
            'email' => [
                'example' => 'a.lovelace@example.com',
                'type' => 'string',
            ],
            'firstName' => [
                'example' => 'Ada',
                'type' => 'string',
            ],
            'lastName' => [
                'example' => 'Lovelace',
                'type' => 'string',
            ],
        ],
        'required' => [
            'firstName',
            'lastName',
            'email',
            'address',
        ],
    ];

    private Address $address;

    private ?string $company = null;

    private string $email;

    private string $firstName;

    private string $lastName;

    public function __construct(Address $address, string $email, string $firstName, string $lastName)
    {
        $this->address = $address;
        $this->email = $email;
        $this->firstName = $firstName;
        $this->lastName = $lastName;
    }

    public function getAddress(): Address
    {
        return $this->address;
    }

    public function getCompany(): ?string
    {
        return $this->company ?? null;
    }

    public function getEmail(): string
    {
        return $this->email;
    }

    public function getFirstName(): string
    {
        return $this->firstName;
    }

    public function getLastName(): string
    {
        return $this->lastName;
    }

    public function withAddress(Address $address): self
    {
        $clone = clone $this;
        $clone->address = $address;

        return $clone;
    }

    public function withCompany(string $company): self
    {
        $validator = new Validator();
        $validator->validate($company, self::$internalValidationSchema['properties']['company']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->company = $company;

        return $clone;
    }

    public function withoutCompany(): self
    {
        $clone = clone $this;
        unset($clone->company);

        return $clone;
    }

    public function withEmail(string $email): self
    {
        $validator = new Validator();
        $validator->validate($email, self::$internalValidationSchema['properties']['email']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->email = $email;

        return $clone;
    }

    public function withFirstName(string $firstName): self
    {
        $validator = new Validator();
        $validator->validate($firstName, self::$internalValidationSchema['properties']['firstName']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->firstName = $firstName;

        return $clone;
    }

    public function withLastName(string $lastName): self
    {
        $validator = new Validator();
        $validator->validate($lastName, self::$internalValidationSchema['properties']['lastName']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->lastName = $lastName;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ContractPartnerContractPartner Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ContractPartnerContractPartner
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $address = Address::buildFromInput($input->{'address'}, validate: $validate);
        $company = null;
        if (isset($input->{'company'})) {
            $company = $input->{'company'};
        }
        $email = $input->{'email'};
        $firstName = $input->{'firstName'};
        $lastName = $input->{'lastName'};

        $obj = new self($address, $email, $firstName, $lastName);
        $obj->company = $company;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['address'] = $this->address->toJson();
        if (isset($this->company)) {
            $output['company'] = $this->company;
        }
        $output['email'] = $this->email;
        $output['firstName'] = $this->firstName;
        $output['lastName'] = $this->lastName;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
