<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.ExtensionInstanceHealth.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ExtensionInstanceHealth
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'pendingInstallation' => [
                'type' => 'boolean',
            ],
            'pendingRemval' => [
                'type' => 'boolean',
            ],
            'pendingWebhooks' => [
                'minimum' => 0,
                'type' => 'integer',
            ],
            'webhooksHalted' => [
                'type' => 'boolean',
            ],
        ],
        'required' => [
            'id',
        ],
        'type' => 'object',
    ];

    private string $id;

    private ?bool $pendingInstallation = null;

    private ?bool $pendingRemval = null;

    private ?int $pendingWebhooks = null;

    private ?bool $webhooksHalted = null;

    public function __construct(string $id)
    {
        $this->id = $id;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getPendingInstallation(): ?bool
    {
        return $this->pendingInstallation ?? null;
    }

    public function getPendingRemval(): ?bool
    {
        return $this->pendingRemval ?? null;
    }

    public function getPendingWebhooks(): ?int
    {
        return $this->pendingWebhooks ?? null;
    }

    public function getWebhooksHalted(): ?bool
    {
        return $this->webhooksHalted ?? null;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, static::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withPendingInstallation(bool $pendingInstallation): self
    {
        $validator = new Validator();
        $validator->validate($pendingInstallation, static::$schema['properties']['pendingInstallation']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->pendingInstallation = $pendingInstallation;

        return $clone;
    }

    public function withoutPendingInstallation(): self
    {
        $clone = clone $this;
        unset($clone->pendingInstallation);

        return $clone;
    }

    public function withPendingRemval(bool $pendingRemval): self
    {
        $validator = new Validator();
        $validator->validate($pendingRemval, static::$schema['properties']['pendingRemval']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->pendingRemval = $pendingRemval;

        return $clone;
    }

    public function withoutPendingRemval(): self
    {
        $clone = clone $this;
        unset($clone->pendingRemval);

        return $clone;
    }

    public function withPendingWebhooks(int $pendingWebhooks): self
    {
        $validator = new Validator();
        $validator->validate($pendingWebhooks, static::$schema['properties']['pendingWebhooks']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->pendingWebhooks = $pendingWebhooks;

        return $clone;
    }

    public function withoutPendingWebhooks(): self
    {
        $clone = clone $this;
        unset($clone->pendingWebhooks);

        return $clone;
    }

    public function withWebhooksHalted(bool $webhooksHalted): self
    {
        $validator = new Validator();
        $validator->validate($webhooksHalted, static::$schema['properties']['webhooksHalted']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->webhooksHalted = $webhooksHalted;

        return $clone;
    }

    public function withoutWebhooksHalted(): self
    {
        $clone = clone $this;
        unset($clone->webhooksHalted);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ExtensionInstanceHealth Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ExtensionInstanceHealth
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $id = $input->{'id'};
        $pendingInstallation = null;
        if (isset($input->{'pendingInstallation'})) {
            $pendingInstallation = (bool)($input->{'pendingInstallation'});
        }
        $pendingRemval = null;
        if (isset($input->{'pendingRemval'})) {
            $pendingRemval = (bool)($input->{'pendingRemval'});
        }
        $pendingWebhooks = null;
        if (isset($input->{'pendingWebhooks'})) {
            $pendingWebhooks = (int)($input->{'pendingWebhooks'});
        }
        $webhooksHalted = null;
        if (isset($input->{'webhooksHalted'})) {
            $webhooksHalted = (bool)($input->{'webhooksHalted'});
        }

        $obj = new self($id);
        $obj->pendingInstallation = $pendingInstallation;
        $obj->pendingRemval = $pendingRemval;
        $obj->pendingWebhooks = $pendingWebhooks;
        $obj->webhooksHalted = $webhooksHalted;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['id'] = $this->id;
        if (isset($this->pendingInstallation)) {
            $output['pendingInstallation'] = $this->pendingInstallation;
        }
        if (isset($this->pendingRemval)) {
            $output['pendingRemval'] = $this->pendingRemval;
        }
        if (isset($this->pendingWebhooks)) {
            $output['pendingWebhooks'] = $this->pendingWebhooks;
        }
        if (isset($this->webhooksHalted)) {
            $output['webhooksHalted'] = $this->webhooksHalted;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
