<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.OwnExtension.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class OwnExtensionRequestedChanges
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'additionalProperties' => false,
        'properties' => [
            'context' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.Context',
            ],
            'scopes' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'webhookUrls' => [
                'oneOf' => [
                    [
                        '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.WebhookUrls',
                    ],
                    [
                        'additionalProperties' => false,
                        'properties' => [

                        ],
                        'type' => 'object',
                    ],
                ],
            ],
        ],
        'type' => 'object',
    ];

    private ?Context $context = null;

    /**
     * @var string[]|null
     */
    private ?array $scopes = null;

    private WebhookUrls|OwnExtensionRequestedChangesWebhookUrlsAlternative2|null $webhookUrls = null;

    /**
     *
     */
    public function __construct()
    {
    }

    public function getContext(): ?Context
    {
        return $this->context ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getScopes(): ?array
    {
        return $this->scopes ?? null;
    }

    public function getWebhookUrls(): OwnExtensionRequestedChangesWebhookUrlsAlternative2|WebhookUrls|null
    {
        return $this->webhookUrls;
    }

    public function withContext(Context $context): self
    {
        $clone = clone $this;
        $clone->context = $context;

        return $clone;
    }

    public function withoutContext(): self
    {
        $clone = clone $this;
        unset($clone->context);

        return $clone;
    }

    /**
     * @param string[] $scopes
     */
    public function withScopes(array $scopes): self
    {
        $validator = new Validator();
        $validator->validate($scopes, self::$internalValidationSchema['properties']['scopes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->scopes = $scopes;

        return $clone;
    }

    public function withoutScopes(): self
    {
        $clone = clone $this;
        unset($clone->scopes);

        return $clone;
    }

    public function withWebhookUrls(OwnExtensionRequestedChangesWebhookUrlsAlternative2|WebhookUrls $webhookUrls): self
    {
        $clone = clone $this;
        $clone->webhookUrls = $webhookUrls;

        return $clone;
    }

    public function withoutWebhookUrls(): self
    {
        $clone = clone $this;
        unset($clone->webhookUrls);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return OwnExtensionRequestedChanges Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): OwnExtensionRequestedChanges
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $context = null;
        if (isset($input->{'context'})) {
            $context = Context::from($input->{'context'});
        }
        $scopes = null;
        if (isset($input->{'scopes'})) {
            $scopes = $input->{'scopes'};
        }
        $webhookUrls = null;
        if (isset($input->{'webhookUrls'})) {
            $webhookUrls = match (true) {
                WebhookUrls::validateInput($input->{'webhookUrls'}, true) => WebhookUrls::buildFromInput($input->{'webhookUrls'}, validate: $validate),
                OwnExtensionRequestedChangesWebhookUrlsAlternative2::validateInput($input->{'webhookUrls'}, true) => OwnExtensionRequestedChangesWebhookUrlsAlternative2::buildFromInput($input->{'webhookUrls'}, validate: $validate),
                default => throw new InvalidArgumentException("could not build property 'webhookUrls' from JSON"),
            };
        }

        $obj = new self();
        $obj->context = $context;
        $obj->scopes = $scopes;
        $obj->webhookUrls = $webhookUrls;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->context)) {
            $output['context'] = $this->context->value;
        }
        if (isset($this->scopes)) {
            $output['scopes'] = $this->scopes;
        }
        if (isset($this->webhookUrls)) {
            $output['webhookUrls'] = match (true) {
                ($this->webhookUrls) instanceof WebhookUrls => $this->webhookUrls->toJson(),
                $this->webhookUrls instanceof OwnExtensionRequestedChangesWebhookUrlsAlternative2 => ($this->webhookUrls)->toJson(),
            };
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->webhookUrls)) {
            $this->webhookUrls = match (true) {
                ($this->webhookUrls) instanceof WebhookUrls => $this->webhookUrls,
                $this->webhookUrls instanceof OwnExtensionRequestedChangesWebhookUrlsAlternative2 => clone $this->webhookUrls,
            };
        }
    }
}
