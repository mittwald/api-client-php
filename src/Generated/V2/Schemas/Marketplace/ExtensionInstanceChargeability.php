<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for
 * de.mittwald.v1.marketplace.ExtensionInstanceChargeability.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ExtensionInstanceChargeability
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'isChargeable' => [
                'default' => false,
                'type' => 'boolean',
            ],
            'reasons' => [
                'properties' => [
                    'isNonChargeableCustomer' => [
                        'type' => 'boolean',
                    ],
                    'isOwnExtension' => [
                        'type' => 'boolean',
                    ],
                ],
                'required' => [
                    'isOwnExtension',
                ],
                'type' => 'object',
            ],
        ],
        'required' => [
            'isChargeable',
            'reasons',
        ],
        'type' => 'object',
    ];

    private bool $isChargeable = false;

    private ExtensionInstanceChargeabilityReasons $reasons;

    public function __construct(ExtensionInstanceChargeabilityReasons $reasons)
    {
        $this->reasons = $reasons;
    }

    public function getIsChargeable(): bool
    {
        return $this->isChargeable;
    }

    public function getReasons(): ExtensionInstanceChargeabilityReasons
    {
        return $this->reasons;
    }

    public function withIsChargeable(bool $isChargeable): self
    {
        $validator = new Validator();
        $validator->validate($isChargeable, self::$internalValidationSchema['properties']['isChargeable']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isChargeable = $isChargeable;

        return $clone;
    }

    public function withReasons(ExtensionInstanceChargeabilityReasons $reasons): self
    {
        $clone = clone $this;
        $clone->reasons = $reasons;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ExtensionInstanceChargeability Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ExtensionInstanceChargeability
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $isChargeable = false;
        if (isset($input->{'isChargeable'})) {
            $isChargeable = (bool)($input->{'isChargeable'});
        }
        $reasons = ExtensionInstanceChargeabilityReasons::buildFromInput($input->{'reasons'}, validate: $validate);

        $obj = new self($reasons);
        $obj->isChargeable = $isChargeable;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['isChargeable'] = $this->isChargeable;
        $output['reasons'] = ($this->reasons)->toJson();

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->reasons = clone $this->reasons;
    }
}
