<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.Extension.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Extension
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'assets' => [
                'description' => 'The assets/media (images and videos) of the extension.',
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ExtensionAsset',
                ],
                'maxItems' => 4,
                'type' => 'array',
            ],
            'blocked' => [
                'deprecated' => true,
                'type' => 'boolean',
            ],
            'context' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.Context',
            ],
            'contributorId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'deprecation' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ExtensionDeprecation',
            ],
            'description' => [
                'description' => 'A short description of the capabilites of the Extension.',
                'type' => 'string',
            ],
            'detailedDescriptions' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.DetailedDescriptions',
            ],
            'disabled' => [
                'type' => 'boolean',
            ],
            'externalFrontends' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ExternalComponent',
                ],
                'type' => 'array',
            ],
            'frontendComponents' => [
                'deprecated' => true,
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ExternalComponent',
                ],
                'type' => 'array',
            ],
            'frontendFragments' => [
                'additionalProperties' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.FrontendFragment',
                ],
                'type' => 'object',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'logoRefId' => [
                'description' => 'This is the FileId of the Logo. Retrieve the file with this id on `/v2/files/{logoRefId}`.',
                'format' => 'uuid',
                'type' => 'string',
            ],
            'name' => [
                'example' => 'MyPingExtension',
                'type' => 'string',
            ],
            'published' => [
                'description' => 'Whether the extension has been published by the contributor.',
                'type' => 'boolean',
            ],
            'scopes' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'state' => [
                'deprecated' => true,
                'description' => 'deprecated',
                'enum' => [
                    'enabled',
                    'blocked',
                    'disabled',
                ],
                'type' => 'string',
            ],
            'statistics' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ExtensionStatistics',
            ],
            'subTitle' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.SubTitle',
            ],
            'support' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.SupportMeta',
            ],
            'tags' => [
                'items' => [
                    'type' => 'string',
                ],
                'minItems' => 0,
                'type' => 'array',
            ],
        ],
        'required' => [
            'id',
            'contributorId',
            'support',
            'state',
            'published',
            'name',
            'subTitle',
            'description',
            'tags',
            'context',
            'scopes',
            'disabled',
            'blocked',
            'assets',
            'statistics',
            'logoRefId',
        ],
        'type' => 'object',
    ];

    /**
     * The assets/media (images and videos) of the extension.
     *
     * @var ExtensionAsset[]
     */
    private array $assets;

    /**
     * @deprecated
     */
    private bool $blocked;

    private Context $context;

    private string $contributorId;

    private ?ExtensionDeprecation $deprecation = null;

    /**
     * A short description of the capabilites of the Extension.
     */
    private string $description;

    private ?DetailedDescriptions $detailedDescriptions = null;

    private bool $disabled;

    /**
     * @var ExternalComponent[]|null
     */
    private ?array $externalFrontends = null;

    /**
     * @var ExternalComponent[]|null
     * @deprecated
     */
    private ?array $frontendComponents = null;

    /**
     * @var mixed[]|null
     */
    private ?array $frontendFragments = null;

    private string $id;

    /**
     * This is the FileId of the Logo. Retrieve the file with this id on `/v2/files/{logoRefId}`.
     */
    private string $logoRefId;

    private string $name;

    /**
     * Whether the extension has been published by the contributor.
     */
    private bool $published;

    /**
     * @var string[]
     */
    private array $scopes;

    /**
     * deprecated
     *
     * @deprecated
     */
    private ExtensionState $state;

    private ExtensionStatistics $statistics;

    private SubTitle $subTitle;

    private SupportMeta $support;

    /**
     * @var string[]
     */
    private array $tags;

    /**
     * @param ExtensionAsset[] $assets
     * @param string[] $scopes
     * @param string[] $tags
     */
    public function __construct(array $assets, bool $blocked, Context $context, string $contributorId, string $description, bool $disabled, string $id, string $logoRefId, string $name, bool $published, array $scopes, ExtensionState $state, ExtensionStatistics $statistics, SubTitle $subTitle, SupportMeta $support, array $tags)
    {
        $this->assets = $assets;
        $this->blocked = $blocked;
        $this->context = $context;
        $this->contributorId = $contributorId;
        $this->description = $description;
        $this->disabled = $disabled;
        $this->id = $id;
        $this->logoRefId = $logoRefId;
        $this->name = $name;
        $this->published = $published;
        $this->scopes = $scopes;
        $this->state = $state;
        $this->statistics = $statistics;
        $this->subTitle = $subTitle;
        $this->support = $support;
        $this->tags = $tags;
    }

    /**
     * @return ExtensionAsset[]
     */
    public function getAssets(): array
    {
        return $this->assets;
    }

    /**
     * @deprecated
     */
    public function getBlocked(): bool
    {
        return $this->blocked;
    }

    public function getContext(): Context
    {
        return $this->context;
    }

    public function getContributorId(): string
    {
        return $this->contributorId;
    }

    public function getDeprecation(): ?ExtensionDeprecation
    {
        return $this->deprecation ?? null;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getDetailedDescriptions(): ?DetailedDescriptions
    {
        return $this->detailedDescriptions ?? null;
    }

    public function getDisabled(): bool
    {
        return $this->disabled;
    }

    /**
     * @return ExternalComponent[]|null
     */
    public function getExternalFrontends(): ?array
    {
        return $this->externalFrontends ?? null;
    }

    /**
     * @return ExternalComponent[]|null
     * @deprecated
     */
    public function getFrontendComponents(): ?array
    {
        return $this->frontendComponents ?? null;
    }

    /**
     * @return mixed[]|null
     */
    public function getFrontendFragments(): ?array
    {
        return $this->frontendFragments ?? null;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getLogoRefId(): string
    {
        return $this->logoRefId;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getPublished(): bool
    {
        return $this->published;
    }

    /**
     * @return string[]
     */
    public function getScopes(): array
    {
        return $this->scopes;
    }

    /**
     * @deprecated
     */
    public function getState(): ExtensionState
    {
        return $this->state;
    }

    public function getStatistics(): ExtensionStatistics
    {
        return $this->statistics;
    }

    public function getSubTitle(): SubTitle
    {
        return $this->subTitle;
    }

    public function getSupport(): SupportMeta
    {
        return $this->support;
    }

    /**
     * @return string[]
     */
    public function getTags(): array
    {
        return $this->tags;
    }

    /**
     * @param ExtensionAsset[] $assets
     */
    public function withAssets(array $assets): self
    {
        $clone = clone $this;
        $clone->assets = $assets;

        return $clone;
    }

    /**
     * @deprecated
     */
    public function withBlocked(bool $blocked): self
    {
        $validator = new Validator();
        $validator->validate($blocked, self::$schema['properties']['blocked']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->blocked = $blocked;

        return $clone;
    }

    public function withContext(Context $context): self
    {
        $clone = clone $this;
        $clone->context = $context;

        return $clone;
    }

    public function withContributorId(string $contributorId): self
    {
        $validator = new Validator();
        $validator->validate($contributorId, self::$schema['properties']['contributorId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->contributorId = $contributorId;

        return $clone;
    }

    public function withDeprecation(ExtensionDeprecation $deprecation): self
    {
        $clone = clone $this;
        $clone->deprecation = $deprecation;

        return $clone;
    }

    public function withoutDeprecation(): self
    {
        $clone = clone $this;
        unset($clone->deprecation);

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$schema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withDetailedDescriptions(DetailedDescriptions $detailedDescriptions): self
    {
        $clone = clone $this;
        $clone->detailedDescriptions = $detailedDescriptions;

        return $clone;
    }

    public function withoutDetailedDescriptions(): self
    {
        $clone = clone $this;
        unset($clone->detailedDescriptions);

        return $clone;
    }

    public function withDisabled(bool $disabled): self
    {
        $validator = new Validator();
        $validator->validate($disabled, self::$schema['properties']['disabled']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->disabled = $disabled;

        return $clone;
    }

    /**
     * @param ExternalComponent[] $externalFrontends
     */
    public function withExternalFrontends(array $externalFrontends): self
    {
        $clone = clone $this;
        $clone->externalFrontends = $externalFrontends;

        return $clone;
    }

    public function withoutExternalFrontends(): self
    {
        $clone = clone $this;
        unset($clone->externalFrontends);

        return $clone;
    }

    /**
     * @param ExternalComponent[] $frontendComponents
     * @deprecated
     */
    public function withFrontendComponents(array $frontendComponents): self
    {
        $clone = clone $this;
        $clone->frontendComponents = $frontendComponents;

        return $clone;
    }

    public function withoutFrontendComponents(): self
    {
        $clone = clone $this;
        unset($clone->frontendComponents);

        return $clone;
    }

    /**
     * @param mixed[] $frontendFragments
     */
    public function withFrontendFragments(array $frontendFragments): self
    {
        $validator = new Validator();
        $validator->validate($frontendFragments, self::$schema['properties']['frontendFragments']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->frontendFragments = $frontendFragments;

        return $clone;
    }

    public function withoutFrontendFragments(): self
    {
        $clone = clone $this;
        unset($clone->frontendFragments);

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, self::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withLogoRefId(string $logoRefId): self
    {
        $validator = new Validator();
        $validator->validate($logoRefId, self::$schema['properties']['logoRefId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->logoRefId = $logoRefId;

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, self::$schema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withPublished(bool $published): self
    {
        $validator = new Validator();
        $validator->validate($published, self::$schema['properties']['published']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->published = $published;

        return $clone;
    }

    /**
     * @param string[] $scopes
     */
    public function withScopes(array $scopes): self
    {
        $validator = new Validator();
        $validator->validate($scopes, self::$schema['properties']['scopes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->scopes = $scopes;

        return $clone;
    }

    /**
     * @deprecated
     */
    public function withState(ExtensionState $state): self
    {
        $clone = clone $this;
        $clone->state = $state;

        return $clone;
    }

    public function withStatistics(ExtensionStatistics $statistics): self
    {
        $clone = clone $this;
        $clone->statistics = $statistics;

        return $clone;
    }

    public function withSubTitle(SubTitle $subTitle): self
    {
        $clone = clone $this;
        $clone->subTitle = $subTitle;

        return $clone;
    }

    public function withSupport(SupportMeta $support): self
    {
        $clone = clone $this;
        $clone->support = $support;

        return $clone;
    }

    /**
     * @param string[] $tags
     */
    public function withTags(array $tags): self
    {
        $validator = new Validator();
        $validator->validate($tags, self::$schema['properties']['tags']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->tags = $tags;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Extension Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Extension
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $assets = array_map(fn (array|object $i): ExtensionAsset => ExtensionAsset::buildFromInput($i, validate: $validate), $input->{'assets'});
        $blocked = (bool)($input->{'blocked'});
        $context = Context::from($input->{'context'});
        $contributorId = $input->{'contributorId'};
        $deprecation = null;
        if (isset($input->{'deprecation'})) {
            $deprecation = ExtensionDeprecation::buildFromInput($input->{'deprecation'}, validate: $validate);
        }
        $description = $input->{'description'};
        $detailedDescriptions = null;
        if (isset($input->{'detailedDescriptions'})) {
            $detailedDescriptions = DetailedDescriptions::buildFromInput($input->{'detailedDescriptions'}, validate: $validate);
        }
        $disabled = (bool)($input->{'disabled'});
        $externalFrontends = null;
        if (isset($input->{'externalFrontends'})) {
            $externalFrontends = array_map(fn (array|object $i): ExternalComponent => ExternalComponent::buildFromInput($i, validate: $validate), $input->{'externalFrontends'});
        }
        $frontendComponents = null;
        if (isset($input->{'frontendComponents'})) {
            $frontendComponents = array_map(fn (array|object $i): ExternalComponent => ExternalComponent::buildFromInput($i, validate: $validate), $input->{'frontendComponents'});
        }
        $frontendFragments = null;
        if (isset($input->{'frontendFragments'})) {
            $frontendFragments = (array)$input->{'frontendFragments'};
        }
        $id = $input->{'id'};
        $logoRefId = $input->{'logoRefId'};
        $name = $input->{'name'};
        $published = (bool)($input->{'published'});
        $scopes = $input->{'scopes'};
        $state = ExtensionState::from($input->{'state'});
        $statistics = ExtensionStatistics::buildFromInput($input->{'statistics'}, validate: $validate);
        $subTitle = SubTitle::buildFromInput($input->{'subTitle'}, validate: $validate);
        $support = SupportMeta::buildFromInput($input->{'support'}, validate: $validate);
        $tags = $input->{'tags'};

        $obj = new self($assets, $blocked, $context, $contributorId, $description, $disabled, $id, $logoRefId, $name, $published, $scopes, $state, $statistics, $subTitle, $support, $tags);
        $obj->deprecation = $deprecation;
        $obj->detailedDescriptions = $detailedDescriptions;
        $obj->externalFrontends = $externalFrontends;
        $obj->frontendComponents = $frontendComponents;
        $obj->frontendFragments = $frontendFragments;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['assets'] = array_map(fn (ExtensionAsset $i): array => $i->toJson(), $this->assets);
        $output['blocked'] = $this->blocked;
        $output['context'] = $this->context->value;
        $output['contributorId'] = $this->contributorId;
        if (isset($this->deprecation)) {
            $output['deprecation'] = $this->deprecation->toJson();
        }
        $output['description'] = $this->description;
        if (isset($this->detailedDescriptions)) {
            $output['detailedDescriptions'] = $this->detailedDescriptions->toJson();
        }
        $output['disabled'] = $this->disabled;
        if (isset($this->externalFrontends)) {
            $output['externalFrontends'] = array_map(fn (ExternalComponent $i): array => $i->toJson(), $this->externalFrontends);
        }
        if (isset($this->frontendComponents)) {
            $output['frontendComponents'] = array_map(fn (ExternalComponent $i): array => $i->toJson(), $this->frontendComponents);
        }
        if (isset($this->frontendFragments)) {
            $output['frontendFragments'] = $this->frontendFragments;
        }
        $output['id'] = $this->id;
        $output['logoRefId'] = $this->logoRefId;
        $output['name'] = $this->name;
        $output['published'] = $this->published;
        $output['scopes'] = $this->scopes;
        $output['state'] = ($this->state)->value;
        $output['statistics'] = $this->statistics->toJson();
        $output['subTitle'] = $this->subTitle->toJson();
        $output['support'] = $this->support->toJson();
        $output['tags'] = $this->tags;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
