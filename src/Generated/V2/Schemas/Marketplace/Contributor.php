<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.Contributor.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Contributor
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'customerId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'description' => [
                'type' => 'string',
            ],
            'email' => [
                'type' => 'string',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'logoRefId' => [
                'type' => 'string',
            ],
            'name' => [
                'type' => 'string',
            ],
            'phone' => [
                'type' => 'string',
            ],
            'state' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ContributorState',
            ],
            'url' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'id',
            'customerId',
            'state',
            'name',
            'description',
        ],
        'type' => 'object',
    ];

    private string $customerId;

    private string $description;

    private ?string $email = null;

    private string $id;

    private ?string $logoRefId = null;

    private string $name;

    private ?string $phone = null;

    private ContributorState $state;

    private ?string $url = null;

    public function __construct(string $customerId, string $description, string $id, string $name, ContributorState $state)
    {
        $this->customerId = $customerId;
        $this->description = $description;
        $this->id = $id;
        $this->name = $name;
        $this->state = $state;
    }

    public function getCustomerId(): string
    {
        return $this->customerId;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getEmail(): ?string
    {
        return $this->email ?? null;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getLogoRefId(): ?string
    {
        return $this->logoRefId ?? null;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getPhone(): ?string
    {
        return $this->phone ?? null;
    }

    public function getState(): ContributorState
    {
        return $this->state;
    }

    public function getUrl(): ?string
    {
        return $this->url ?? null;
    }

    public function withCustomerId(string $customerId): self
    {
        $validator = new Validator();
        $validator->validate($customerId, static::$schema['properties']['customerId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->customerId = $customerId;

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, static::$schema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withEmail(string $email): self
    {
        $validator = new Validator();
        $validator->validate($email, static::$schema['properties']['email']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->email = $email;

        return $clone;
    }

    public function withoutEmail(): self
    {
        $clone = clone $this;
        unset($clone->email);

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, static::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withLogoRefId(string $logoRefId): self
    {
        $validator = new Validator();
        $validator->validate($logoRefId, static::$schema['properties']['logoRefId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->logoRefId = $logoRefId;

        return $clone;
    }

    public function withoutLogoRefId(): self
    {
        $clone = clone $this;
        unset($clone->logoRefId);

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, static::$schema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withPhone(string $phone): self
    {
        $validator = new Validator();
        $validator->validate($phone, static::$schema['properties']['phone']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->phone = $phone;

        return $clone;
    }

    public function withoutPhone(): self
    {
        $clone = clone $this;
        unset($clone->phone);

        return $clone;
    }

    public function withState(ContributorState $state): self
    {
        $clone = clone $this;
        $clone->state = $state;

        return $clone;
    }

    public function withUrl(string $url): self
    {
        $validator = new Validator();
        $validator->validate($url, static::$schema['properties']['url']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->url = $url;

        return $clone;
    }

    public function withoutUrl(): self
    {
        $clone = clone $this;
        unset($clone->url);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Contributor Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Contributor
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $customerId = $input->{'customerId'};
        $description = $input->{'description'};
        $email = null;
        if (isset($input->{'email'})) {
            $email = $input->{'email'};
        }
        $id = $input->{'id'};
        $logoRefId = null;
        if (isset($input->{'logoRefId'})) {
            $logoRefId = $input->{'logoRefId'};
        }
        $name = $input->{'name'};
        $phone = null;
        if (isset($input->{'phone'})) {
            $phone = $input->{'phone'};
        }
        $state = ContributorState::from($input->{'state'});
        $url = null;
        if (isset($input->{'url'})) {
            $url = $input->{'url'};
        }

        $obj = new self($customerId, $description, $id, $name, $state);
        $obj->email = $email;
        $obj->logoRefId = $logoRefId;
        $obj->phone = $phone;
        $obj->url = $url;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['customerId'] = $this->customerId;
        $output['description'] = $this->description;
        if (isset($this->email)) {
            $output['email'] = $this->email;
        }
        $output['id'] = $this->id;
        if (isset($this->logoRefId)) {
            $output['logoRefId'] = $this->logoRefId;
        }
        $output['name'] = $this->name;
        if (isset($this->phone)) {
            $output['phone'] = $this->phone;
        }
        $output['state'] = $this->state->value;
        if (isset($this->url)) {
            $output['url'] = $this->url;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
