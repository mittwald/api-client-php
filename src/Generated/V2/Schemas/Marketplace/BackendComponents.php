<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.BackendComponents.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class BackendComponents
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'extensionAddedToContext' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.BackendComponent',
            ],
            'extensionInstanceRemovedFromContext' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.BackendComponent',
            ],
            'extensionInstanceSecretRotated' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.BackendComponent',
            ],
            'extensionInstanceUpdated' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.BackendComponent',
            ],
        ],
        'type' => 'object',
    ];

    private ?BackendComponent $extensionAddedToContext = null;

    private ?BackendComponent $extensionInstanceRemovedFromContext = null;

    private ?BackendComponent $extensionInstanceSecretRotated = null;

    private ?BackendComponent $extensionInstanceUpdated = null;

    /**
     *
     */
    public function __construct()
    {
    }

    public function getExtensionAddedToContext(): ?BackendComponent
    {
        return $this->extensionAddedToContext ?? null;
    }

    public function getExtensionInstanceRemovedFromContext(): ?BackendComponent
    {
        return $this->extensionInstanceRemovedFromContext ?? null;
    }

    public function getExtensionInstanceSecretRotated(): ?BackendComponent
    {
        return $this->extensionInstanceSecretRotated ?? null;
    }

    public function getExtensionInstanceUpdated(): ?BackendComponent
    {
        return $this->extensionInstanceUpdated ?? null;
    }

    public function withExtensionAddedToContext(BackendComponent $extensionAddedToContext): self
    {
        $clone = clone $this;
        $clone->extensionAddedToContext = $extensionAddedToContext;

        return $clone;
    }

    public function withoutExtensionAddedToContext(): self
    {
        $clone = clone $this;
        unset($clone->extensionAddedToContext);

        return $clone;
    }

    public function withExtensionInstanceRemovedFromContext(BackendComponent $extensionInstanceRemovedFromContext): self
    {
        $clone = clone $this;
        $clone->extensionInstanceRemovedFromContext = $extensionInstanceRemovedFromContext;

        return $clone;
    }

    public function withoutExtensionInstanceRemovedFromContext(): self
    {
        $clone = clone $this;
        unset($clone->extensionInstanceRemovedFromContext);

        return $clone;
    }

    public function withExtensionInstanceSecretRotated(BackendComponent $extensionInstanceSecretRotated): self
    {
        $clone = clone $this;
        $clone->extensionInstanceSecretRotated = $extensionInstanceSecretRotated;

        return $clone;
    }

    public function withoutExtensionInstanceSecretRotated(): self
    {
        $clone = clone $this;
        unset($clone->extensionInstanceSecretRotated);

        return $clone;
    }

    public function withExtensionInstanceUpdated(BackendComponent $extensionInstanceUpdated): self
    {
        $clone = clone $this;
        $clone->extensionInstanceUpdated = $extensionInstanceUpdated;

        return $clone;
    }

    public function withoutExtensionInstanceUpdated(): self
    {
        $clone = clone $this;
        unset($clone->extensionInstanceUpdated);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return BackendComponents Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): BackendComponents
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $extensionAddedToContext = null;
        if (isset($input->{'extensionAddedToContext'})) {
            $extensionAddedToContext = BackendComponent::buildFromInput($input->{'extensionAddedToContext'}, validate: $validate);
        }
        $extensionInstanceRemovedFromContext = null;
        if (isset($input->{'extensionInstanceRemovedFromContext'})) {
            $extensionInstanceRemovedFromContext = BackendComponent::buildFromInput($input->{'extensionInstanceRemovedFromContext'}, validate: $validate);
        }
        $extensionInstanceSecretRotated = null;
        if (isset($input->{'extensionInstanceSecretRotated'})) {
            $extensionInstanceSecretRotated = BackendComponent::buildFromInput($input->{'extensionInstanceSecretRotated'}, validate: $validate);
        }
        $extensionInstanceUpdated = null;
        if (isset($input->{'extensionInstanceUpdated'})) {
            $extensionInstanceUpdated = BackendComponent::buildFromInput($input->{'extensionInstanceUpdated'}, validate: $validate);
        }

        $obj = new self();
        $obj->extensionAddedToContext = $extensionAddedToContext;
        $obj->extensionInstanceRemovedFromContext = $extensionInstanceRemovedFromContext;
        $obj->extensionInstanceSecretRotated = $extensionInstanceSecretRotated;
        $obj->extensionInstanceUpdated = $extensionInstanceUpdated;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->extensionAddedToContext)) {
            $output['extensionAddedToContext'] = $this->extensionAddedToContext->toJson();
        }
        if (isset($this->extensionInstanceRemovedFromContext)) {
            $output['extensionInstanceRemovedFromContext'] = $this->extensionInstanceRemovedFromContext->toJson();
        }
        if (isset($this->extensionInstanceSecretRotated)) {
            $output['extensionInstanceSecretRotated'] = $this->extensionInstanceSecretRotated->toJson();
        }
        if (isset($this->extensionInstanceUpdated)) {
            $output['extensionInstanceUpdated'] = $this->extensionInstanceUpdated->toJson();
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
