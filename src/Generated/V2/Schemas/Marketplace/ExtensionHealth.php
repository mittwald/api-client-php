<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.ExtensionHealth.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ExtensionHealth
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'extensionInstancesHealth' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ExtensionInstanceHealth',
                ],
                'type' => 'array',
            ],
            'functional' => [
                'type' => 'boolean',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
        ],
        'required' => [
            'id',
            'functional',
        ],
        'type' => 'object',
    ];

    /**
     * @var ExtensionInstanceHealth[]|null
     */
    private ?array $extensionInstancesHealth = null;

    private bool $functional;

    private string $id;

    public function __construct(bool $functional, string $id)
    {
        $this->functional = $functional;
        $this->id = $id;
    }

    /**
     * @return
     * ExtensionInstanceHealth[]|null
     */
    public function getExtensionInstancesHealth(): ?array
    {
        return $this->extensionInstancesHealth ?? null;
    }

    public function getFunctional(): bool
    {
        return $this->functional;
    }

    public function getId(): string
    {
        return $this->id;
    }

    /**
     * @param ExtensionInstanceHealth[] $extensionInstancesHealth
     */
    public function withExtensionInstancesHealth(array $extensionInstancesHealth): self
    {
        $clone = clone $this;
        $clone->extensionInstancesHealth = $extensionInstancesHealth;

        return $clone;
    }

    public function withoutExtensionInstancesHealth(): self
    {
        $clone = clone $this;
        unset($clone->extensionInstancesHealth);

        return $clone;
    }

    public function withFunctional(bool $functional): self
    {
        $validator = new Validator();
        $validator->validate($functional, static::$schema['properties']['functional']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->functional = $functional;

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, static::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ExtensionHealth Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ExtensionHealth
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $extensionInstancesHealth = null;
        if (isset($input->{'extensionInstancesHealth'})) {
            $extensionInstancesHealth = array_map(fn (array|object $i): ExtensionInstanceHealth => ExtensionInstanceHealth::buildFromInput($i, validate: $validate), $input->{'extensionInstancesHealth'});
        }
        $functional = (bool)($input->{'functional'});
        $id = $input->{'id'};

        $obj = new self($functional, $id);
        $obj->extensionInstancesHealth = $extensionInstancesHealth;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->extensionInstancesHealth)) {
            $output['extensionInstancesHealth'] = array_map(fn (ExtensionInstanceHealth $i): array => $i->toJson(), $this->extensionInstancesHealth);
        }
        $output['functional'] = $this->functional;
        $output['id'] = $this->id;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
