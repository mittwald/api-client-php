<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Marketplace;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.marketplace.ExtensionHealth.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ExtensionHealth
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'extensionInstances' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.marketplace.ExtensionInstanceHealth',
                ],
                'type' => 'array',
            ],
            'functional' => [
                'default' => false,
                'type' => 'boolean',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'inoperableReason' => [
                'example' => '9 of 10 webhooks in the last hour were unsuccessful.',
                'type' => 'string',
            ],
            'published' => [
                'default' => false,
                'type' => 'boolean',
            ],
            'withdrawalReason' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'id',
            'functional',
            'published',
            'extensionInstances',
        ],
        'type' => 'object',
    ];

    /**
     * @var ExtensionInstanceHealth[]
     */
    private array $extensionInstances;

    private bool $functional = false;

    private string $id;

    private ?string $inoperableReason = null;

    private bool $published = false;

    private ?string $withdrawalReason = null;

    /**
     * @param ExtensionInstanceHealth[] $extensionInstances
     */
    public function __construct(array $extensionInstances, string $id)
    {
        $this->extensionInstances = $extensionInstances;
        $this->id = $id;
    }

    /**
     * @return ExtensionInstanceHealth[]
     */
    public function getExtensionInstances(): array
    {
        return $this->extensionInstances;
    }

    public function getFunctional(): bool
    {
        return $this->functional;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getInoperableReason(): ?string
    {
        return $this->inoperableReason ?? null;
    }

    public function getPublished(): bool
    {
        return $this->published;
    }

    public function getWithdrawalReason(): ?string
    {
        return $this->withdrawalReason ?? null;
    }

    /**
     * @param ExtensionInstanceHealth[] $extensionInstances
     */
    public function withExtensionInstances(array $extensionInstances): self
    {
        $clone = clone $this;
        $clone->extensionInstances = $extensionInstances;

        return $clone;
    }

    public function withFunctional(bool $functional): self
    {
        $validator = new Validator();
        $validator->validate($functional, self::$internalValidationSchema['properties']['functional']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->functional = $functional;

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, self::$internalValidationSchema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withInoperableReason(string $inoperableReason): self
    {
        $validator = new Validator();
        $validator->validate($inoperableReason, self::$internalValidationSchema['properties']['inoperableReason']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->inoperableReason = $inoperableReason;

        return $clone;
    }

    public function withoutInoperableReason(): self
    {
        $clone = clone $this;
        unset($clone->inoperableReason);

        return $clone;
    }

    public function withPublished(bool $published): self
    {
        $validator = new Validator();
        $validator->validate($published, self::$internalValidationSchema['properties']['published']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->published = $published;

        return $clone;
    }

    public function withWithdrawalReason(string $withdrawalReason): self
    {
        $validator = new Validator();
        $validator->validate($withdrawalReason, self::$internalValidationSchema['properties']['withdrawalReason']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->withdrawalReason = $withdrawalReason;

        return $clone;
    }

    public function withoutWithdrawalReason(): self
    {
        $clone = clone $this;
        unset($clone->withdrawalReason);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ExtensionHealth Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ExtensionHealth
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $extensionInstances = array_map(fn (array|object $i): ExtensionInstanceHealth => ExtensionInstanceHealth::buildFromInput($i, validate: $validate), $input->{'extensionInstances'});
        $functional = false;
        if (isset($input->{'functional'})) {
            $functional = (bool)($input->{'functional'});
        }
        $id = $input->{'id'};
        $inoperableReason = null;
        if (isset($input->{'inoperableReason'})) {
            $inoperableReason = $input->{'inoperableReason'};
        }
        $published = false;
        if (isset($input->{'published'})) {
            $published = (bool)($input->{'published'});
        }
        $withdrawalReason = null;
        if (isset($input->{'withdrawalReason'})) {
            $withdrawalReason = $input->{'withdrawalReason'};
        }

        $obj = new self($extensionInstances, $id);
        $obj->functional = $functional;
        $obj->inoperableReason = $inoperableReason;
        $obj->published = $published;
        $obj->withdrawalReason = $withdrawalReason;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['extensionInstances'] = array_map(fn (ExtensionInstanceHealth $i): array => $i->toJson(), $this->extensionInstances);
        $output['functional'] = $this->functional;
        $output['id'] = $this->id;
        if (isset($this->inoperableReason)) {
            $output['inoperableReason'] = $this->inoperableReason;
        }
        $output['published'] = $this->published;
        if (isset($this->withdrawalReason)) {
            $output['withdrawalReason'] = $this->withdrawalReason;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
