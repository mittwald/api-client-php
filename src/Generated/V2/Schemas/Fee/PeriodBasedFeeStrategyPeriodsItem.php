<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Fee;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * A strategy for fees that occur periodically
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class PeriodBasedFeeStrategyPeriodsItem
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'feeValidFrom' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'feeValidUntil' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'monthlyPrice' => [
                'description' => 'The monthly price in Euro Cents.',
                'type' => 'number',
            ],
        ],
        'required' => [
            'monthlyPrice',
        ],
        'type' => 'object',
    ];

    private ?DateTime $feeValidFrom = null;

    private ?DateTime $feeValidUntil = null;

    /**
     * The monthly price in Euro Cents.
     */
    private int|float $monthlyPrice;

    /**
     * @param int|float $monthlyPrice
     */
    public function __construct(int|float $monthlyPrice)
    {
        $this->monthlyPrice = $monthlyPrice;
    }

    public function getFeeValidFrom(): ?DateTime
    {
        return $this->feeValidFrom ?? null;
    }

    public function getFeeValidUntil(): ?DateTime
    {
        return $this->feeValidUntil ?? null;
    }

    public function getMonthlyPrice(): int|float
    {
        return $this->monthlyPrice;
    }

    public function withFeeValidFrom(DateTime $feeValidFrom): self
    {
        $clone = clone $this;
        $clone->feeValidFrom = $feeValidFrom;

        return $clone;
    }

    public function withoutFeeValidFrom(): self
    {
        $clone = clone $this;
        unset($clone->feeValidFrom);

        return $clone;
    }

    public function withFeeValidUntil(DateTime $feeValidUntil): self
    {
        $clone = clone $this;
        $clone->feeValidUntil = $feeValidUntil;

        return $clone;
    }

    public function withoutFeeValidUntil(): self
    {
        $clone = clone $this;
        unset($clone->feeValidUntil);

        return $clone;
    }

    /**
     * @param int|float $monthlyPrice
     */
    public function withMonthlyPrice(int|float $monthlyPrice): self
    {
        $validator = new Validator();
        $validator->validate($monthlyPrice, self::$schema['properties']['monthlyPrice']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->monthlyPrice = $monthlyPrice;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return PeriodBasedFeeStrategyPeriodsItem Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): PeriodBasedFeeStrategyPeriodsItem
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $feeValidFrom = null;
        if (isset($input->{'feeValidFrom'})) {
            $feeValidFrom = new DateTime($input->{'feeValidFrom'});
        }
        $feeValidUntil = null;
        if (isset($input->{'feeValidUntil'})) {
            $feeValidUntil = new DateTime($input->{'feeValidUntil'});
        }
        $monthlyPrice = str_contains((string)($input->{'monthlyPrice'}), '.') ? (float)($input->{'monthlyPrice'}) : (int)($input->{'monthlyPrice'});

        $obj = new self($monthlyPrice);
        $obj->feeValidFrom = $feeValidFrom;
        $obj->feeValidUntil = $feeValidUntil;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->feeValidFrom)) {
            $output['feeValidFrom'] = ($this->feeValidFrom)->format(DateTime::ATOM);
        }
        if (isset($this->feeValidUntil)) {
            $output['feeValidUntil'] = ($this->feeValidUntil)->format(DateTime::ATOM);
        }
        $output['monthlyPrice'] = $this->monthlyPrice;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->feeValidFrom)) {
            $this->feeValidFrom = clone $this->feeValidFrom;
        }
        if (isset($this->feeValidUntil)) {
            $this->feeValidUntil = clone $this->feeValidUntil;
        }
    }
}
