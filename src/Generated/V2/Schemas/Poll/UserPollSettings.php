<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Poll;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.poll.UserPollSettings.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class UserPollSettings
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'completedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'dontShowUntil' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'ignoredAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'shouldShow' => [
                'type' => 'boolean',
            ],
            'status' => [
                'enum' => [
                    'completed',
                    'muted',
                    'ignored',
                    'new',
                ],
                'type' => 'string',
            ],
            'userId' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'userId',
            'shouldShow',
            'status',
        ],
        'type' => 'object',
    ];

    private ?DateTime $completedAt = null;

    private ?DateTime $dontShowUntil = null;

    private ?DateTime $ignoredAt = null;

    private bool $shouldShow;

    private UserPollSettingsStatus $status;

    private string $userId;

    public function __construct(bool $shouldShow, UserPollSettingsStatus $status, string $userId)
    {
        $this->shouldShow = $shouldShow;
        $this->status = $status;
        $this->userId = $userId;
    }

    public function getCompletedAt(): ?DateTime
    {
        return $this->completedAt ?? null;
    }

    public function getDontShowUntil(): ?DateTime
    {
        return $this->dontShowUntil ?? null;
    }

    public function getIgnoredAt(): ?DateTime
    {
        return $this->ignoredAt ?? null;
    }

    public function getShouldShow(): bool
    {
        return $this->shouldShow;
    }

    public function getStatus(): UserPollSettingsStatus
    {
        return $this->status;
    }

    public function getUserId(): string
    {
        return $this->userId;
    }

    public function withCompletedAt(DateTime $completedAt): self
    {
        $clone = clone $this;
        $clone->completedAt = $completedAt;

        return $clone;
    }

    public function withoutCompletedAt(): self
    {
        $clone = clone $this;
        unset($clone->completedAt);

        return $clone;
    }

    public function withDontShowUntil(DateTime $dontShowUntil): self
    {
        $clone = clone $this;
        $clone->dontShowUntil = $dontShowUntil;

        return $clone;
    }

    public function withoutDontShowUntil(): self
    {
        $clone = clone $this;
        unset($clone->dontShowUntil);

        return $clone;
    }

    public function withIgnoredAt(DateTime $ignoredAt): self
    {
        $clone = clone $this;
        $clone->ignoredAt = $ignoredAt;

        return $clone;
    }

    public function withoutIgnoredAt(): self
    {
        $clone = clone $this;
        unset($clone->ignoredAt);

        return $clone;
    }

    public function withShouldShow(bool $shouldShow): self
    {
        $validator = new Validator();
        $validator->validate($shouldShow, static::$schema['properties']['shouldShow']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->shouldShow = $shouldShow;

        return $clone;
    }

    public function withStatus(UserPollSettingsStatus $status): self
    {
        $clone = clone $this;
        $clone->status = $status;

        return $clone;
    }

    public function withUserId(string $userId): self
    {
        $validator = new Validator();
        $validator->validate($userId, static::$schema['properties']['userId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->userId = $userId;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return UserPollSettings Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): UserPollSettings
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $completedAt = null;
        if (isset($input->{'completedAt'})) {
            $completedAt = new DateTime($input->{'completedAt'});
        }
        $dontShowUntil = null;
        if (isset($input->{'dontShowUntil'})) {
            $dontShowUntil = new DateTime($input->{'dontShowUntil'});
        }
        $ignoredAt = null;
        if (isset($input->{'ignoredAt'})) {
            $ignoredAt = new DateTime($input->{'ignoredAt'});
        }
        $shouldShow = (bool)($input->{'shouldShow'});
        $status = UserPollSettingsStatus::from($input->{'status'});
        $userId = $input->{'userId'};

        $obj = new self($shouldShow, $status, $userId);
        $obj->completedAt = $completedAt;
        $obj->dontShowUntil = $dontShowUntil;
        $obj->ignoredAt = $ignoredAt;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->completedAt)) {
            $output['completedAt'] = ($this->completedAt)->format(DateTime::ATOM);
        }
        if (isset($this->dontShowUntil)) {
            $output['dontShowUntil'] = ($this->dontShowUntil)->format(DateTime::ATOM);
        }
        if (isset($this->ignoredAt)) {
            $output['ignoredAt'] = ($this->ignoredAt)->format(DateTime::ATOM);
        }
        $output['shouldShow'] = $this->shouldShow;
        $output['status'] = ($this->status)->value;
        $output['userId'] = $this->userId;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->completedAt)) {
            $this->completedAt = clone $this->completedAt;
        }
        if (isset($this->dontShowUntil)) {
            $this->dontShowUntil = clone $this->dontShowUntil;
        }
        if (isset($this->ignoredAt)) {
            $this->ignoredAt = clone $this->ignoredAt;
        }
    }
}
