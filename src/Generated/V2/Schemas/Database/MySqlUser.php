<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Database;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.database.MySqlUser.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class MySqlUser
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'accessIpMask' => [
                'type' => 'string',
            ],
            'accessLevel' => [
                'enum' => [
                    'full',
                    'readonly',
                ],
                'type' => 'string',
            ],
            'createdAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'databaseId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'description' => [
                'type' => 'string',
            ],
            'disabled' => [
                'type' => 'boolean',
            ],
            'externalAccess' => [
                'type' => 'boolean',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'mainUser' => [
                'type' => 'boolean',
            ],
            'name' => [
                'type' => 'string',
            ],
            'passwordUpdatedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'status' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.database.DatabaseUserStatus',
            ],
            'statusSetAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'updatedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
        ],
        'required' => [
            'id',
            'createdAt',
            'updatedAt',
            'databaseId',
            'name',
            'passwordUpdatedAt',
            'mainUser',
            'disabled',
            'accessLevel',
            'externalAccess',
            'status',
            'statusSetAt',
        ],
        'type' => 'object',
    ];

    private ?string $accessIpMask = null;

    private MySqlUserAccessLevel $accessLevel;

    private DateTime $createdAt;

    private string $databaseId;

    private ?string $description = null;

    private bool $disabled;

    private bool $externalAccess;

    private string $id;

    private bool $mainUser;

    private string $name;

    private DateTime $passwordUpdatedAt;

    private DatabaseUserStatus $status;

    private DateTime $statusSetAt;

    private DateTime $updatedAt;

    public function __construct(MySqlUserAccessLevel $accessLevel, DateTime $createdAt, string $databaseId, bool $disabled, bool $externalAccess, string $id, bool $mainUser, string $name, DateTime $passwordUpdatedAt, DatabaseUserStatus $status, DateTime $statusSetAt, DateTime $updatedAt)
    {
        $this->accessLevel = $accessLevel;
        $this->createdAt = $createdAt;
        $this->databaseId = $databaseId;
        $this->disabled = $disabled;
        $this->externalAccess = $externalAccess;
        $this->id = $id;
        $this->mainUser = $mainUser;
        $this->name = $name;
        $this->passwordUpdatedAt = $passwordUpdatedAt;
        $this->status = $status;
        $this->statusSetAt = $statusSetAt;
        $this->updatedAt = $updatedAt;
    }

    public function getAccessIpMask(): ?string
    {
        return $this->accessIpMask ?? null;
    }

    public function getAccessLevel(): MySqlUserAccessLevel
    {
        return $this->accessLevel;
    }

    public function getCreatedAt(): DateTime
    {
        return $this->createdAt;
    }

    public function getDatabaseId(): string
    {
        return $this->databaseId;
    }

    public function getDescription(): ?string
    {
        return $this->description ?? null;
    }

    public function getDisabled(): bool
    {
        return $this->disabled;
    }

    public function getExternalAccess(): bool
    {
        return $this->externalAccess;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getMainUser(): bool
    {
        return $this->mainUser;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getPasswordUpdatedAt(): DateTime
    {
        return $this->passwordUpdatedAt;
    }

    public function getStatus(): DatabaseUserStatus
    {
        return $this->status;
    }

    public function getStatusSetAt(): DateTime
    {
        return $this->statusSetAt;
    }

    public function getUpdatedAt(): DateTime
    {
        return $this->updatedAt;
    }

    public function withAccessIpMask(string $accessIpMask): self
    {
        $validator = new Validator();
        $validator->validate($accessIpMask, static::$schema['properties']['accessIpMask']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->accessIpMask = $accessIpMask;

        return $clone;
    }

    public function withoutAccessIpMask(): self
    {
        $clone = clone $this;
        unset($clone->accessIpMask);

        return $clone;
    }

    public function withAccessLevel(MySqlUserAccessLevel $accessLevel): self
    {
        $clone = clone $this;
        $clone->accessLevel = $accessLevel;

        return $clone;
    }

    public function withCreatedAt(DateTime $createdAt): self
    {
        $clone = clone $this;
        $clone->createdAt = $createdAt;

        return $clone;
    }

    public function withDatabaseId(string $databaseId): self
    {
        $validator = new Validator();
        $validator->validate($databaseId, static::$schema['properties']['databaseId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->databaseId = $databaseId;

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, static::$schema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withoutDescription(): self
    {
        $clone = clone $this;
        unset($clone->description);

        return $clone;
    }

    public function withDisabled(bool $disabled): self
    {
        $validator = new Validator();
        $validator->validate($disabled, static::$schema['properties']['disabled']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->disabled = $disabled;

        return $clone;
    }

    public function withExternalAccess(bool $externalAccess): self
    {
        $validator = new Validator();
        $validator->validate($externalAccess, static::$schema['properties']['externalAccess']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->externalAccess = $externalAccess;

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, static::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withMainUser(bool $mainUser): self
    {
        $validator = new Validator();
        $validator->validate($mainUser, static::$schema['properties']['mainUser']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->mainUser = $mainUser;

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, static::$schema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withPasswordUpdatedAt(DateTime $passwordUpdatedAt): self
    {
        $clone = clone $this;
        $clone->passwordUpdatedAt = $passwordUpdatedAt;

        return $clone;
    }

    public function withStatus(DatabaseUserStatus $status): self
    {
        $clone = clone $this;
        $clone->status = $status;

        return $clone;
    }

    public function withStatusSetAt(DateTime $statusSetAt): self
    {
        $clone = clone $this;
        $clone->statusSetAt = $statusSetAt;

        return $clone;
    }

    public function withUpdatedAt(DateTime $updatedAt): self
    {
        $clone = clone $this;
        $clone->updatedAt = $updatedAt;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return MySqlUser Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): MySqlUser
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $accessIpMask = null;
        if (isset($input->{'accessIpMask'})) {
            $accessIpMask = $input->{'accessIpMask'};
        }
        $accessLevel = MySqlUserAccessLevel::from($input->{'accessLevel'});
        $createdAt = new DateTime($input->{'createdAt'});
        $databaseId = $input->{'databaseId'};
        $description = null;
        if (isset($input->{'description'})) {
            $description = $input->{'description'};
        }
        $disabled = (bool)($input->{'disabled'});
        $externalAccess = (bool)($input->{'externalAccess'});
        $id = $input->{'id'};
        $mainUser = (bool)($input->{'mainUser'});
        $name = $input->{'name'};
        $passwordUpdatedAt = new DateTime($input->{'passwordUpdatedAt'});
        $status = DatabaseUserStatus::from($input->{'status'});
        $statusSetAt = new DateTime($input->{'statusSetAt'});
        $updatedAt = new DateTime($input->{'updatedAt'});

        $obj = new self($accessLevel, $createdAt, $databaseId, $disabled, $externalAccess, $id, $mainUser, $name, $passwordUpdatedAt, $status, $statusSetAt, $updatedAt);
        $obj->accessIpMask = $accessIpMask;
        $obj->description = $description;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->accessIpMask)) {
            $output['accessIpMask'] = $this->accessIpMask;
        }
        $output['accessLevel'] = ($this->accessLevel)->value;
        $output['createdAt'] = ($this->createdAt)->format(DateTime::ATOM);
        $output['databaseId'] = $this->databaseId;
        if (isset($this->description)) {
            $output['description'] = $this->description;
        }
        $output['disabled'] = $this->disabled;
        $output['externalAccess'] = $this->externalAccess;
        $output['id'] = $this->id;
        $output['mainUser'] = $this->mainUser;
        $output['name'] = $this->name;
        $output['passwordUpdatedAt'] = ($this->passwordUpdatedAt)->format(DateTime::ATOM);
        $output['status'] = $this->status->value;
        $output['statusSetAt'] = ($this->statusSetAt)->format(DateTime::ATOM);
        $output['updatedAt'] = ($this->updatedAt)->format(DateTime::ATOM);

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->createdAt = clone $this->createdAt;
        $this->passwordUpdatedAt = clone $this->passwordUpdatedAt;
        $this->statusSetAt = clone $this->statusSetAt;
        $this->updatedAt = clone $this->updatedAt;
    }
}
