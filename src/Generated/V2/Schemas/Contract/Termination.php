<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Contract;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.contract.Termination.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Termination
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'cancellationForbidden' => [
                'description' => 'Indicates whether the User is allowed to cancel the Termination.',
                'type' => 'boolean',
            ],
            'explanation' => [
                'example' => 'Not needed anymore',
                'type' => 'string',
            ],
            'reason' => [
                'example' => 'Not needed anymore',
                'type' => 'string',
            ],
            'scheduledAtDate' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'scheduledByUserId' => [
                'type' => 'string',
            ],
            'targetDate' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
        ],
        'required' => [
            'scheduledAtDate',
            'targetDate',
        ],
        'type' => 'object',
    ];

    /**
     * Indicates whether the User is allowed to cancel the Termination.
     */
    private ?bool $cancellationForbidden = null;

    private ?string $explanation = null;

    private ?string $reason = null;

    private DateTime $scheduledAtDate;

    private ?string $scheduledByUserId = null;

    private DateTime $targetDate;

    public function __construct(DateTime $scheduledAtDate, DateTime $targetDate)
    {
        $this->scheduledAtDate = $scheduledAtDate;
        $this->targetDate = $targetDate;
    }

    public function getCancellationForbidden(): ?bool
    {
        return $this->cancellationForbidden ?? null;
    }

    public function getExplanation(): ?string
    {
        return $this->explanation ?? null;
    }

    public function getReason(): ?string
    {
        return $this->reason ?? null;
    }

    public function getScheduledAtDate(): DateTime
    {
        return $this->scheduledAtDate;
    }

    public function getScheduledByUserId(): ?string
    {
        return $this->scheduledByUserId ?? null;
    }

    public function getTargetDate(): DateTime
    {
        return $this->targetDate;
    }

    public function withCancellationForbidden(bool $cancellationForbidden): self
    {
        $validator = new Validator();
        $validator->validate($cancellationForbidden, self::$internalValidationSchema['properties']['cancellationForbidden']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->cancellationForbidden = $cancellationForbidden;

        return $clone;
    }

    public function withoutCancellationForbidden(): self
    {
        $clone = clone $this;
        unset($clone->cancellationForbidden);

        return $clone;
    }

    public function withExplanation(string $explanation): self
    {
        $validator = new Validator();
        $validator->validate($explanation, self::$internalValidationSchema['properties']['explanation']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->explanation = $explanation;

        return $clone;
    }

    public function withoutExplanation(): self
    {
        $clone = clone $this;
        unset($clone->explanation);

        return $clone;
    }

    public function withReason(string $reason): self
    {
        $validator = new Validator();
        $validator->validate($reason, self::$internalValidationSchema['properties']['reason']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->reason = $reason;

        return $clone;
    }

    public function withoutReason(): self
    {
        $clone = clone $this;
        unset($clone->reason);

        return $clone;
    }

    public function withScheduledAtDate(DateTime $scheduledAtDate): self
    {
        $clone = clone $this;
        $clone->scheduledAtDate = $scheduledAtDate;

        return $clone;
    }

    public function withScheduledByUserId(string $scheduledByUserId): self
    {
        $validator = new Validator();
        $validator->validate($scheduledByUserId, self::$internalValidationSchema['properties']['scheduledByUserId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->scheduledByUserId = $scheduledByUserId;

        return $clone;
    }

    public function withoutScheduledByUserId(): self
    {
        $clone = clone $this;
        unset($clone->scheduledByUserId);

        return $clone;
    }

    public function withTargetDate(DateTime $targetDate): self
    {
        $clone = clone $this;
        $clone->targetDate = $targetDate;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Termination Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Termination
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $cancellationForbidden = null;
        if (isset($input->{'cancellationForbidden'})) {
            $cancellationForbidden = (bool)($input->{'cancellationForbidden'});
        }
        $explanation = null;
        if (isset($input->{'explanation'})) {
            $explanation = $input->{'explanation'};
        }
        $reason = null;
        if (isset($input->{'reason'})) {
            $reason = $input->{'reason'};
        }
        $scheduledAtDate = new DateTime($input->{'scheduledAtDate'});
        $scheduledByUserId = null;
        if (isset($input->{'scheduledByUserId'})) {
            $scheduledByUserId = $input->{'scheduledByUserId'};
        }
        $targetDate = new DateTime($input->{'targetDate'});

        $obj = new self($scheduledAtDate, $targetDate);
        $obj->cancellationForbidden = $cancellationForbidden;
        $obj->explanation = $explanation;
        $obj->reason = $reason;
        $obj->scheduledByUserId = $scheduledByUserId;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->cancellationForbidden)) {
            $output['cancellationForbidden'] = $this->cancellationForbidden;
        }
        if (isset($this->explanation)) {
            $output['explanation'] = $this->explanation;
        }
        if (isset($this->reason)) {
            $output['reason'] = $this->reason;
        }
        $output['scheduledAtDate'] = ($this->scheduledAtDate)->format(DateTime::ATOM);
        if (isset($this->scheduledByUserId)) {
            $output['scheduledByUserId'] = $this->scheduledByUserId;
        }
        $output['targetDate'] = ($this->targetDate)->format(DateTime::ATOM);

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->scheduledAtDate = clone $this->scheduledAtDate;
        $this->targetDate = clone $this->targetDate;
    }
}
