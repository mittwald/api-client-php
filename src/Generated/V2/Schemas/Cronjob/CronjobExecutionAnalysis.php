<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Cronjob;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.cronjob.CronjobExecutionAnalysis.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class CronjobExecutionAnalysis
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'issues' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'message' => [
                'example' => '**Mögliche Fehlerursache**: Der zur Verfügung stehende Speicherplatz reicht für die Durchführung des Backups nicht aus. **Möglicher Lösungsansatz:** Passe den reservierten Speicherplatz für den Pod in den Umgebungsvariablen an.',
                'type' => 'string',
            ],
            'recommendation' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'message',
        ],
        'type' => 'object',
    ];

    /**
     * @var string[]|null
     */
    private ?array $issues = null;

    private string $message;

    private ?string $recommendation = null;

    public function __construct(string $message)
    {
        $this->message = $message;
    }

    /**
     * @return string[]|null
     */
    public function getIssues(): ?array
    {
        return $this->issues ?? null;
    }

    public function getMessage(): string
    {
        return $this->message;
    }

    public function getRecommendation(): ?string
    {
        return $this->recommendation ?? null;
    }

    /**
     * @param string[] $issues
     */
    public function withIssues(array $issues): self
    {
        $validator = new Validator();
        $validator->validate($issues, self::$internalValidationSchema['properties']['issues']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->issues = $issues;

        return $clone;
    }

    public function withoutIssues(): self
    {
        $clone = clone $this;
        unset($clone->issues);

        return $clone;
    }

    public function withMessage(string $message): self
    {
        $validator = new Validator();
        $validator->validate($message, self::$internalValidationSchema['properties']['message']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->message = $message;

        return $clone;
    }

    public function withRecommendation(string $recommendation): self
    {
        $validator = new Validator();
        $validator->validate($recommendation, self::$internalValidationSchema['properties']['recommendation']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->recommendation = $recommendation;

        return $clone;
    }

    public function withoutRecommendation(): self
    {
        $clone = clone $this;
        unset($clone->recommendation);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return CronjobExecutionAnalysis Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): CronjobExecutionAnalysis
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $issues = null;
        if (isset($input->{'issues'})) {
            $issues = $input->{'issues'};
        }
        $message = $input->{'message'};
        $recommendation = null;
        if (isset($input->{'recommendation'})) {
            $recommendation = $input->{'recommendation'};
        }

        $obj = new self($message);
        $obj->issues = $issues;
        $obj->recommendation = $recommendation;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->issues)) {
            $output['issues'] = $this->issues;
        }
        $output['message'] = $this->message;
        if (isset($this->recommendation)) {
            $output['recommendation'] = $this->recommendation;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
