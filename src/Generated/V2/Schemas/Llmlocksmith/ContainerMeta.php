<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Llmlocksmith;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.llmlocksmith.ContainerMeta.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ContainerMeta
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'containerId' => [
                'type' => 'string',
            ],
            'errorMessage' => [
                'type' => 'string',
            ],
            'ingressId' => [
                'type' => 'string',
            ],
            'stackId' => [
                'type' => 'string',
            ],
            'status' => [
                'enum' => [
                    'created',
                    'requested',
                    'failed',
                ],
                'type' => 'string',
            ],
        ],
        'required' => [
            'status',
        ],
        'type' => 'object',
    ];

    private ?string $containerId = null;

    private ?string $errorMessage = null;

    private ?string $ingressId = null;

    private ?string $stackId = null;

    private ContainerMetaStatus $status;

    public function __construct(ContainerMetaStatus $status)
    {
        $this->status = $status;
    }

    public function getContainerId(): ?string
    {
        return $this->containerId ?? null;
    }

    public function getErrorMessage(): ?string
    {
        return $this->errorMessage ?? null;
    }

    public function getIngressId(): ?string
    {
        return $this->ingressId ?? null;
    }

    public function getStackId(): ?string
    {
        return $this->stackId ?? null;
    }

    public function getStatus(): ContainerMetaStatus
    {
        return $this->status;
    }

    public function withContainerId(string $containerId): self
    {
        $validator = new Validator();
        $validator->validate($containerId, self::$internalValidationSchema['properties']['containerId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->containerId = $containerId;

        return $clone;
    }

    public function withoutContainerId(): self
    {
        $clone = clone $this;
        unset($clone->containerId);

        return $clone;
    }

    public function withErrorMessage(string $errorMessage): self
    {
        $validator = new Validator();
        $validator->validate($errorMessage, self::$internalValidationSchema['properties']['errorMessage']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->errorMessage = $errorMessage;

        return $clone;
    }

    public function withoutErrorMessage(): self
    {
        $clone = clone $this;
        unset($clone->errorMessage);

        return $clone;
    }

    public function withIngressId(string $ingressId): self
    {
        $validator = new Validator();
        $validator->validate($ingressId, self::$internalValidationSchema['properties']['ingressId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->ingressId = $ingressId;

        return $clone;
    }

    public function withoutIngressId(): self
    {
        $clone = clone $this;
        unset($clone->ingressId);

        return $clone;
    }

    public function withStackId(string $stackId): self
    {
        $validator = new Validator();
        $validator->validate($stackId, self::$internalValidationSchema['properties']['stackId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->stackId = $stackId;

        return $clone;
    }

    public function withoutStackId(): self
    {
        $clone = clone $this;
        unset($clone->stackId);

        return $clone;
    }

    public function withStatus(ContainerMetaStatus $status): self
    {
        $clone = clone $this;
        $clone->status = $status;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ContainerMeta Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ContainerMeta
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $containerId = null;
        if (isset($input->{'containerId'})) {
            $containerId = $input->{'containerId'};
        }
        $errorMessage = null;
        if (isset($input->{'errorMessage'})) {
            $errorMessage = $input->{'errorMessage'};
        }
        $ingressId = null;
        if (isset($input->{'ingressId'})) {
            $ingressId = $input->{'ingressId'};
        }
        $stackId = null;
        if (isset($input->{'stackId'})) {
            $stackId = $input->{'stackId'};
        }
        $status = ContainerMetaStatus::from($input->{'status'});

        $obj = new self($status);
        $obj->containerId = $containerId;
        $obj->errorMessage = $errorMessage;
        $obj->ingressId = $ingressId;
        $obj->stackId = $stackId;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->containerId)) {
            $output['containerId'] = $this->containerId;
        }
        if (isset($this->errorMessage)) {
            $output['errorMessage'] = $this->errorMessage;
        }
        if (isset($this->ingressId)) {
            $output['ingressId'] = $this->ingressId;
        }
        if (isset($this->stackId)) {
            $output['stackId'] = $this->stackId;
        }
        $output['status'] = ($this->status)->value;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
