<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Llmlocksmith;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.llmlocksmith.Licence.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Licence
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'containerMeta' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.llmlocksmith.ContainerMeta',
            ],
            'customerId' => [
                'type' => 'string',
            ],
            'isBlocked' => [
                'default' => false,
                'description' => 'Indicates whether the licence is blocked.',
                'type' => 'boolean',
            ],
            'licenceId' => [
                'type' => 'string',
            ],
            'licenceKey' => [
                'type' => 'string',
            ],
            'models' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'name' => [
                'type' => 'string',
            ],
            'projectId' => [
                'type' => 'string',
            ],
            'rateLimit' => [
                'type' => 'number',
            ],
        ],
        'required' => [
            'licenceId',
            'licenceKey',
            'models',
            'name',
            'rateLimit',
            'isBlocked',
        ],
        'type' => 'object',
    ];

    private ?ContainerMeta $containerMeta = null;

    private ?string $customerId = null;

    /**
     * Indicates whether the licence is blocked.
     */
    private bool $isBlocked = false;

    private string $licenceId;

    private string $licenceKey;

    /**
     * @var string[]
     */
    private array $models;

    private string $name;

    private ?string $projectId = null;

    private int|float $rateLimit;

    /**
     * @param string[] $models
     */
    public function __construct(string $licenceId, string $licenceKey, array $models, string $name, int|float $rateLimit)
    {
        $this->licenceId = $licenceId;
        $this->licenceKey = $licenceKey;
        $this->models = $models;
        $this->name = $name;
        $this->rateLimit = $rateLimit;
    }

    public function getContainerMeta(): ?ContainerMeta
    {
        return $this->containerMeta ?? null;
    }

    public function getCustomerId(): ?string
    {
        return $this->customerId ?? null;
    }

    public function getIsBlocked(): bool
    {
        return $this->isBlocked;
    }

    public function getLicenceId(): string
    {
        return $this->licenceId;
    }

    public function getLicenceKey(): string
    {
        return $this->licenceKey;
    }

    /**
     * @return string[]
     */
    public function getModels(): array
    {
        return $this->models;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getProjectId(): ?string
    {
        return $this->projectId ?? null;
    }

    public function getRateLimit(): int|float
    {
        return $this->rateLimit;
    }

    public function withContainerMeta(ContainerMeta $containerMeta): self
    {
        $clone = clone $this;
        $clone->containerMeta = $containerMeta;

        return $clone;
    }

    public function withoutContainerMeta(): self
    {
        $clone = clone $this;
        unset($clone->containerMeta);

        return $clone;
    }

    public function withCustomerId(string $customerId): self
    {
        $validator = new Validator();
        $validator->validate($customerId, self::$internalValidationSchema['properties']['customerId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->customerId = $customerId;

        return $clone;
    }

    public function withoutCustomerId(): self
    {
        $clone = clone $this;
        unset($clone->customerId);

        return $clone;
    }

    public function withIsBlocked(bool $isBlocked): self
    {
        $validator = new Validator();
        $validator->validate($isBlocked, self::$internalValidationSchema['properties']['isBlocked']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isBlocked = $isBlocked;

        return $clone;
    }

    public function withLicenceId(string $licenceId): self
    {
        $validator = new Validator();
        $validator->validate($licenceId, self::$internalValidationSchema['properties']['licenceId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->licenceId = $licenceId;

        return $clone;
    }

    public function withLicenceKey(string $licenceKey): self
    {
        $validator = new Validator();
        $validator->validate($licenceKey, self::$internalValidationSchema['properties']['licenceKey']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->licenceKey = $licenceKey;

        return $clone;
    }

    /**
     * @param string[] $models
     */
    public function withModels(array $models): self
    {
        $validator = new Validator();
        $validator->validate($models, self::$internalValidationSchema['properties']['models']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->models = $models;

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, self::$internalValidationSchema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withProjectId(string $projectId): self
    {
        $validator = new Validator();
        $validator->validate($projectId, self::$internalValidationSchema['properties']['projectId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->projectId = $projectId;

        return $clone;
    }

    public function withoutProjectId(): self
    {
        $clone = clone $this;
        unset($clone->projectId);

        return $clone;
    }

    public function withRateLimit(int|float $rateLimit): self
    {
        $validator = new Validator();
        $validator->validate($rateLimit, self::$internalValidationSchema['properties']['rateLimit']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->rateLimit = $rateLimit;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Licence Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Licence
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $containerMeta = null;
        if (isset($input->{'containerMeta'})) {
            $containerMeta = ContainerMeta::buildFromInput($input->{'containerMeta'}, validate: $validate);
        }
        $customerId = null;
        if (isset($input->{'customerId'})) {
            $customerId = $input->{'customerId'};
        }
        $isBlocked = false;
        if (isset($input->{'isBlocked'})) {
            $isBlocked = (bool)($input->{'isBlocked'});
        }
        $licenceId = $input->{'licenceId'};
        $licenceKey = $input->{'licenceKey'};
        $models = $input->{'models'};
        $name = $input->{'name'};
        $projectId = null;
        if (isset($input->{'projectId'})) {
            $projectId = $input->{'projectId'};
        }
        $rateLimit = str_contains((string)($input->{'rateLimit'}), '.') ? (float)($input->{'rateLimit'}) : (int)($input->{'rateLimit'});

        $obj = new self($licenceId, $licenceKey, $models, $name, $rateLimit);
        $obj->containerMeta = $containerMeta;
        $obj->customerId = $customerId;
        $obj->isBlocked = $isBlocked;
        $obj->projectId = $projectId;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->containerMeta)) {
            $output['containerMeta'] = $this->containerMeta->toJson();
        }
        if (isset($this->customerId)) {
            $output['customerId'] = $this->customerId;
        }
        $output['isBlocked'] = $this->isBlocked;
        $output['licenceId'] = $this->licenceId;
        $output['licenceKey'] = $this->licenceKey;
        $output['models'] = $this->models;
        $output['name'] = $this->name;
        if (isset($this->projectId)) {
            $output['projectId'] = $this->projectId;
        }
        $output['rateLimit'] = $this->rateLimit;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
