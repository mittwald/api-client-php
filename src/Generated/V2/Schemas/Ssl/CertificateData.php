<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Ssl;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.ssl.CertificateData.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class CertificateData
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'caBundle' => [
                'type' => 'string',
            ],
            'certificate' => [
                'type' => 'string',
            ],
            'signingRequest' => [
                'type' => 'string',
            ],
        ],
        'type' => 'object',
    ];

    private ?string $caBundle = null;

    private ?string $certificate = null;

    private ?string $signingRequest = null;

    /**
     *
     */
    public function __construct()
    {
    }

    public function getCaBundle(): ?string
    {
        return $this->caBundle ?? null;
    }

    public function getCertificate(): ?string
    {
        return $this->certificate ?? null;
    }

    public function getSigningRequest(): ?string
    {
        return $this->signingRequest ?? null;
    }

    public function withCaBundle(string $caBundle): self
    {
        $validator = new Validator();
        $validator->validate($caBundle, self::$schema['properties']['caBundle']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->caBundle = $caBundle;

        return $clone;
    }

    public function withoutCaBundle(): self
    {
        $clone = clone $this;
        unset($clone->caBundle);

        return $clone;
    }

    public function withCertificate(string $certificate): self
    {
        $validator = new Validator();
        $validator->validate($certificate, self::$schema['properties']['certificate']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->certificate = $certificate;

        return $clone;
    }

    public function withoutCertificate(): self
    {
        $clone = clone $this;
        unset($clone->certificate);

        return $clone;
    }

    public function withSigningRequest(string $signingRequest): self
    {
        $validator = new Validator();
        $validator->validate($signingRequest, self::$schema['properties']['signingRequest']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->signingRequest = $signingRequest;

        return $clone;
    }

    public function withoutSigningRequest(): self
    {
        $clone = clone $this;
        unset($clone->signingRequest);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return CertificateData Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): CertificateData
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $caBundle = null;
        if (isset($input->{'caBundle'})) {
            $caBundle = $input->{'caBundle'};
        }
        $certificate = null;
        if (isset($input->{'certificate'})) {
            $certificate = $input->{'certificate'};
        }
        $signingRequest = null;
        if (isset($input->{'signingRequest'})) {
            $signingRequest = $input->{'signingRequest'};
        }

        $obj = new self();
        $obj->caBundle = $caBundle;
        $obj->certificate = $certificate;
        $obj->signingRequest = $signingRequest;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->caBundle)) {
            $output['caBundle'] = $this->caBundle;
        }
        if (isset($this->certificate)) {
            $output['certificate'] = $this->certificate;
        }
        if (isset($this->signingRequest)) {
            $output['signingRequest'] = $this->signingRequest;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
