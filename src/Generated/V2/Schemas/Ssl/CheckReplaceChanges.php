<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Ssl;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.ssl.CheckReplaceChanges.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class CheckReplaceChanges
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'commonName' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.ssl.CheckReplaceFieldChange',
            ],
            'dnsNames' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.ssl.CheckReplaceSliceChange',
            ],
            'issuer' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.ssl.CheckReplaceFieldChange',
            ],
            'validFrom' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.ssl.CheckReplaceDateChange',
            ],
            'validTo' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.ssl.CheckReplaceDateChange',
            ],
        ],
        'type' => 'object',
    ];

    private ?CheckReplaceFieldChange $commonName = null;

    private ?CheckReplaceSliceChange $dnsNames = null;

    private ?CheckReplaceFieldChange $issuer = null;

    private ?CheckReplaceDateChange $validFrom = null;

    private ?CheckReplaceDateChange $validTo = null;

    /**
     *
     */
    public function __construct()
    {
    }

    public function getCommonName(): ?CheckReplaceFieldChange
    {
        return $this->commonName ?? null;
    }

    public function getDnsNames(): ?CheckReplaceSliceChange
    {
        return $this->dnsNames ?? null;
    }

    public function getIssuer(): ?CheckReplaceFieldChange
    {
        return $this->issuer ?? null;
    }

    public function getValidFrom(): ?CheckReplaceDateChange
    {
        return $this->validFrom ?? null;
    }

    public function getValidTo(): ?CheckReplaceDateChange
    {
        return $this->validTo ?? null;
    }

    public function withCommonName(CheckReplaceFieldChange $commonName): self
    {
        $clone = clone $this;
        $clone->commonName = $commonName;

        return $clone;
    }

    public function withoutCommonName(): self
    {
        $clone = clone $this;
        unset($clone->commonName);

        return $clone;
    }

    public function withDnsNames(CheckReplaceSliceChange $dnsNames): self
    {
        $clone = clone $this;
        $clone->dnsNames = $dnsNames;

        return $clone;
    }

    public function withoutDnsNames(): self
    {
        $clone = clone $this;
        unset($clone->dnsNames);

        return $clone;
    }

    public function withIssuer(CheckReplaceFieldChange $issuer): self
    {
        $clone = clone $this;
        $clone->issuer = $issuer;

        return $clone;
    }

    public function withoutIssuer(): self
    {
        $clone = clone $this;
        unset($clone->issuer);

        return $clone;
    }

    public function withValidFrom(CheckReplaceDateChange $validFrom): self
    {
        $clone = clone $this;
        $clone->validFrom = $validFrom;

        return $clone;
    }

    public function withoutValidFrom(): self
    {
        $clone = clone $this;
        unset($clone->validFrom);

        return $clone;
    }

    public function withValidTo(CheckReplaceDateChange $validTo): self
    {
        $clone = clone $this;
        $clone->validTo = $validTo;

        return $clone;
    }

    public function withoutValidTo(): self
    {
        $clone = clone $this;
        unset($clone->validTo);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return CheckReplaceChanges Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): CheckReplaceChanges
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $commonName = null;
        if (isset($input->{'commonName'})) {
            $commonName = CheckReplaceFieldChange::buildFromInput($input->{'commonName'}, validate: $validate);
        }
        $dnsNames = null;
        if (isset($input->{'dnsNames'})) {
            $dnsNames = CheckReplaceSliceChange::buildFromInput($input->{'dnsNames'}, validate: $validate);
        }
        $issuer = null;
        if (isset($input->{'issuer'})) {
            $issuer = CheckReplaceFieldChange::buildFromInput($input->{'issuer'}, validate: $validate);
        }
        $validFrom = null;
        if (isset($input->{'validFrom'})) {
            $validFrom = CheckReplaceDateChange::buildFromInput($input->{'validFrom'}, validate: $validate);
        }
        $validTo = null;
        if (isset($input->{'validTo'})) {
            $validTo = CheckReplaceDateChange::buildFromInput($input->{'validTo'}, validate: $validate);
        }

        $obj = new self();
        $obj->commonName = $commonName;
        $obj->dnsNames = $dnsNames;
        $obj->issuer = $issuer;
        $obj->validFrom = $validFrom;
        $obj->validTo = $validTo;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->commonName)) {
            $output['commonName'] = $this->commonName->toJson();
        }
        if (isset($this->dnsNames)) {
            $output['dnsNames'] = $this->dnsNames->toJson();
        }
        if (isset($this->issuer)) {
            $output['issuer'] = $this->issuer->toJson();
        }
        if (isset($this->validFrom)) {
            $output['validFrom'] = $this->validFrom->toJson();
        }
        if (isset($this->validTo)) {
            $output['validTo'] = $this->validTo->toJson();
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
