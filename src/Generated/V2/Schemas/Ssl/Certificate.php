<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Ssl;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.ssl.Certificate.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Certificate
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'caBundle' => [
                'type' => 'string',
            ],
            'certificate' => [
                'type' => 'string',
            ],
            'certificateOrderId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'certificateRequestId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'certificateType' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.ssl.CertificateType',
            ],
            'commonName' => [
                'type' => 'string',
            ],
            'contact' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.ssl.Contact',
            ],
            'dnsNames' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'isExpired' => [
                'type' => 'boolean',
            ],
            'issuer' => [
                'type' => 'string',
            ],
            'lastExpirationThresholdHit' => [
                'type' => 'integer',
            ],
            'projectId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'validFrom' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'validTo' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
        ],
        'required' => [
            'id',
            'certificateType',
            'certificateRequestId',
            'projectId',
            'validFrom',
            'validTo',
            'certificate',
            'isExpired',
            'lastExpirationThresholdHit',
        ],
        'type' => 'object',
    ];

    private ?string $caBundle = null;

    private string $certificate;

    private ?string $certificateOrderId = null;

    private string $certificateRequestId;

    private CertificateType $certificateType;

    private ?string $commonName = null;

    private ?Contact $contact = null;

    /**
     * @var string[]|null
     */
    private ?array $dnsNames = null;

    private string $id;

    private bool $isExpired;

    private ?string $issuer = null;

    private int $lastExpirationThresholdHit;

    private string $projectId;

    private DateTime $validFrom;

    private DateTime $validTo;

    public function __construct(string $certificate, string $certificateRequestId, CertificateType $certificateType, string $id, bool $isExpired, int $lastExpirationThresholdHit, string $projectId, DateTime $validFrom, DateTime $validTo)
    {
        $this->certificate = $certificate;
        $this->certificateRequestId = $certificateRequestId;
        $this->certificateType = $certificateType;
        $this->id = $id;
        $this->isExpired = $isExpired;
        $this->lastExpirationThresholdHit = $lastExpirationThresholdHit;
        $this->projectId = $projectId;
        $this->validFrom = $validFrom;
        $this->validTo = $validTo;
    }

    public function getCaBundle(): ?string
    {
        return $this->caBundle ?? null;
    }

    public function getCertificate(): string
    {
        return $this->certificate;
    }

    public function getCertificateOrderId(): ?string
    {
        return $this->certificateOrderId ?? null;
    }

    public function getCertificateRequestId(): string
    {
        return $this->certificateRequestId;
    }

    public function getCertificateType(): CertificateType
    {
        return $this->certificateType;
    }

    public function getCommonName(): ?string
    {
        return $this->commonName ?? null;
    }

    public function getContact(): ?Contact
    {
        return $this->contact ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getDnsNames(): ?array
    {
        return $this->dnsNames ?? null;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getIsExpired(): bool
    {
        return $this->isExpired;
    }

    public function getIssuer(): ?string
    {
        return $this->issuer ?? null;
    }

    public function getLastExpirationThresholdHit(): int
    {
        return $this->lastExpirationThresholdHit;
    }

    public function getProjectId(): string
    {
        return $this->projectId;
    }

    public function getValidFrom(): DateTime
    {
        return $this->validFrom;
    }

    public function getValidTo(): DateTime
    {
        return $this->validTo;
    }

    public function withCaBundle(string $caBundle): self
    {
        $validator = new Validator();
        $validator->validate($caBundle, self::$schema['properties']['caBundle']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->caBundle = $caBundle;

        return $clone;
    }

    public function withoutCaBundle(): self
    {
        $clone = clone $this;
        unset($clone->caBundle);

        return $clone;
    }

    public function withCertificate(string $certificate): self
    {
        $validator = new Validator();
        $validator->validate($certificate, self::$schema['properties']['certificate']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->certificate = $certificate;

        return $clone;
    }

    public function withCertificateOrderId(string $certificateOrderId): self
    {
        $validator = new Validator();
        $validator->validate($certificateOrderId, self::$schema['properties']['certificateOrderId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->certificateOrderId = $certificateOrderId;

        return $clone;
    }

    public function withoutCertificateOrderId(): self
    {
        $clone = clone $this;
        unset($clone->certificateOrderId);

        return $clone;
    }

    public function withCertificateRequestId(string $certificateRequestId): self
    {
        $validator = new Validator();
        $validator->validate($certificateRequestId, self::$schema['properties']['certificateRequestId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->certificateRequestId = $certificateRequestId;

        return $clone;
    }

    public function withCertificateType(CertificateType $certificateType): self
    {
        $clone = clone $this;
        $clone->certificateType = $certificateType;

        return $clone;
    }

    public function withCommonName(string $commonName): self
    {
        $validator = new Validator();
        $validator->validate($commonName, self::$schema['properties']['commonName']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->commonName = $commonName;

        return $clone;
    }

    public function withoutCommonName(): self
    {
        $clone = clone $this;
        unset($clone->commonName);

        return $clone;
    }

    public function withContact(Contact $contact): self
    {
        $clone = clone $this;
        $clone->contact = $contact;

        return $clone;
    }

    public function withoutContact(): self
    {
        $clone = clone $this;
        unset($clone->contact);

        return $clone;
    }

    /**
     * @param string[] $dnsNames
     */
    public function withDnsNames(array $dnsNames): self
    {
        $validator = new Validator();
        $validator->validate($dnsNames, self::$schema['properties']['dnsNames']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->dnsNames = $dnsNames;

        return $clone;
    }

    public function withoutDnsNames(): self
    {
        $clone = clone $this;
        unset($clone->dnsNames);

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, self::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withIsExpired(bool $isExpired): self
    {
        $validator = new Validator();
        $validator->validate($isExpired, self::$schema['properties']['isExpired']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isExpired = $isExpired;

        return $clone;
    }

    public function withIssuer(string $issuer): self
    {
        $validator = new Validator();
        $validator->validate($issuer, self::$schema['properties']['issuer']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->issuer = $issuer;

        return $clone;
    }

    public function withoutIssuer(): self
    {
        $clone = clone $this;
        unset($clone->issuer);

        return $clone;
    }

    public function withLastExpirationThresholdHit(int $lastExpirationThresholdHit): self
    {
        $validator = new Validator();
        $validator->validate($lastExpirationThresholdHit, self::$schema['properties']['lastExpirationThresholdHit']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->lastExpirationThresholdHit = $lastExpirationThresholdHit;

        return $clone;
    }

    public function withProjectId(string $projectId): self
    {
        $validator = new Validator();
        $validator->validate($projectId, self::$schema['properties']['projectId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->projectId = $projectId;

        return $clone;
    }

    public function withValidFrom(DateTime $validFrom): self
    {
        $clone = clone $this;
        $clone->validFrom = $validFrom;

        return $clone;
    }

    public function withValidTo(DateTime $validTo): self
    {
        $clone = clone $this;
        $clone->validTo = $validTo;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Certificate Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Certificate
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $caBundle = null;
        if (isset($input->{'caBundle'})) {
            $caBundle = $input->{'caBundle'};
        }
        $certificate = $input->{'certificate'};
        $certificateOrderId = null;
        if (isset($input->{'certificateOrderId'})) {
            $certificateOrderId = $input->{'certificateOrderId'};
        }
        $certificateRequestId = $input->{'certificateRequestId'};
        $certificateType = CertificateType::from($input->{'certificateType'});
        $commonName = null;
        if (isset($input->{'commonName'})) {
            $commonName = $input->{'commonName'};
        }
        $contact = null;
        if (isset($input->{'contact'})) {
            $contact = Contact::buildFromInput($input->{'contact'}, validate: $validate);
        }
        $dnsNames = null;
        if (isset($input->{'dnsNames'})) {
            $dnsNames = $input->{'dnsNames'};
        }
        $id = $input->{'id'};
        $isExpired = (bool)($input->{'isExpired'});
        $issuer = null;
        if (isset($input->{'issuer'})) {
            $issuer = $input->{'issuer'};
        }
        $lastExpirationThresholdHit = (int)($input->{'lastExpirationThresholdHit'});
        $projectId = $input->{'projectId'};
        $validFrom = new DateTime($input->{'validFrom'});
        $validTo = new DateTime($input->{'validTo'});

        $obj = new self($certificate, $certificateRequestId, $certificateType, $id, $isExpired, $lastExpirationThresholdHit, $projectId, $validFrom, $validTo);
        $obj->caBundle = $caBundle;
        $obj->certificateOrderId = $certificateOrderId;
        $obj->commonName = $commonName;
        $obj->contact = $contact;
        $obj->dnsNames = $dnsNames;
        $obj->issuer = $issuer;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->caBundle)) {
            $output['caBundle'] = $this->caBundle;
        }
        $output['certificate'] = $this->certificate;
        if (isset($this->certificateOrderId)) {
            $output['certificateOrderId'] = $this->certificateOrderId;
        }
        $output['certificateRequestId'] = $this->certificateRequestId;
        $output['certificateType'] = $this->certificateType->value;
        if (isset($this->commonName)) {
            $output['commonName'] = $this->commonName;
        }
        if (isset($this->contact)) {
            $output['contact'] = $this->contact->toJson();
        }
        if (isset($this->dnsNames)) {
            $output['dnsNames'] = $this->dnsNames;
        }
        $output['id'] = $this->id;
        $output['isExpired'] = $this->isExpired;
        if (isset($this->issuer)) {
            $output['issuer'] = $this->issuer;
        }
        $output['lastExpirationThresholdHit'] = $this->lastExpirationThresholdHit;
        $output['projectId'] = $this->projectId;
        $output['validFrom'] = ($this->validFrom)->format(DateTime::ATOM);
        $output['validTo'] = ($this->validTo)->format(DateTime::ATOM);

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->validFrom = clone $this->validFrom;
        $this->validTo = clone $this->validTo;
    }
}
