<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Ssl;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.ssl.Contact.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Contact
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'city' => [
                'type' => 'string',
            ],
            'company' => [
                'type' => 'string',
            ],
            'country' => [
                'description' => 'Two letter abbreviation - country code (ISO 3166-1 Alpha-2).',
                'example' => 'DE',
                'pattern' => '^[A-Z]{2}$',
                'type' => 'string',
            ],
            'organizationalUnit' => [
                'type' => 'string',
            ],
            'state' => [
                'type' => 'string',
            ],
        ],
        'type' => 'object',
    ];

    private ?string $city = null;

    private ?string $company = null;

    /**
     * Two letter abbreviation - country code (ISO 3166-1 Alpha-2).
     */
    private ?string $country = null;

    private ?string $organizationalUnit = null;

    private ?string $state = null;

    /**
     *
     */
    public function __construct()
    {
    }

    public function getCity(): ?string
    {
        return $this->city ?? null;
    }

    public function getCompany(): ?string
    {
        return $this->company ?? null;
    }

    public function getCountry(): ?string
    {
        return $this->country ?? null;
    }

    public function getOrganizationalUnit(): ?string
    {
        return $this->organizationalUnit ?? null;
    }

    public function getState(): ?string
    {
        return $this->state ?? null;
    }

    public function withCity(string $city): self
    {
        $validator = new Validator();
        $validator->validate($city, self::$schema['properties']['city']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->city = $city;

        return $clone;
    }

    public function withoutCity(): self
    {
        $clone = clone $this;
        unset($clone->city);

        return $clone;
    }

    public function withCompany(string $company): self
    {
        $validator = new Validator();
        $validator->validate($company, self::$schema['properties']['company']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->company = $company;

        return $clone;
    }

    public function withoutCompany(): self
    {
        $clone = clone $this;
        unset($clone->company);

        return $clone;
    }

    public function withCountry(string $country): self
    {
        $validator = new Validator();
        $validator->validate($country, self::$schema['properties']['country']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->country = $country;

        return $clone;
    }

    public function withoutCountry(): self
    {
        $clone = clone $this;
        unset($clone->country);

        return $clone;
    }

    public function withOrganizationalUnit(string $organizationalUnit): self
    {
        $validator = new Validator();
        $validator->validate($organizationalUnit, self::$schema['properties']['organizationalUnit']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->organizationalUnit = $organizationalUnit;

        return $clone;
    }

    public function withoutOrganizationalUnit(): self
    {
        $clone = clone $this;
        unset($clone->organizationalUnit);

        return $clone;
    }

    public function withState(string $state): self
    {
        $validator = new Validator();
        $validator->validate($state, self::$schema['properties']['state']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->state = $state;

        return $clone;
    }

    public function withoutState(): self
    {
        $clone = clone $this;
        unset($clone->state);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Contact Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Contact
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $city = null;
        if (isset($input->{'city'})) {
            $city = $input->{'city'};
        }
        $company = null;
        if (isset($input->{'company'})) {
            $company = $input->{'company'};
        }
        $country = null;
        if (isset($input->{'country'})) {
            $country = $input->{'country'};
        }
        $organizationalUnit = null;
        if (isset($input->{'organizationalUnit'})) {
            $organizationalUnit = $input->{'organizationalUnit'};
        }
        $state = null;
        if (isset($input->{'state'})) {
            $state = $input->{'state'};
        }

        $obj = new self();
        $obj->city = $city;
        $obj->company = $company;
        $obj->country = $country;
        $obj->organizationalUnit = $organizationalUnit;
        $obj->state = $state;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->city)) {
            $output['city'] = $this->city;
        }
        if (isset($this->company)) {
            $output['company'] = $this->company;
        }
        if (isset($this->country)) {
            $output['country'] = $this->country;
        }
        if (isset($this->organizationalUnit)) {
            $output['organizationalUnit'] = $this->organizationalUnit;
        }
        if (isset($this->state)) {
            $output['state'] = $this->state;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
