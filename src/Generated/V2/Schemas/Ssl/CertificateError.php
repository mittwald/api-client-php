<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Ssl;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.ssl.CertificateError.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class CertificateError
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'message' => [
                'oneOf' => [
                    [
                        'description' => 'Failed to read the certificate.',
                        'enum' => [
                            'certificate_read_failed',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'Failed to decode the certificate.',
                        'enum' => [
                            'certificate_decode_failed',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'An error occurred while parsing the certificate.',
                        'enum' => [
                            'certificate_parsing_failed',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The certificate is self-signed.',
                        'enum' => [
                            'certificate_self_signed',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The certificate is not authorized to sign.',
                        'enum' => [
                            'certificate_not_authorized_to_sign',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The certificate has expired.',
                        'enum' => [
                            'certificate_expired',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The Certificate Authority (CA) is not authorized for this name.',
                        'enum' => [
                            'ca_not_authorized_for_this_name',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'There are too many intermediate certificates.',
                        'enum' => [
                            'too_many_intermediates',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The certificate\'s usage is incompatible.',
                        'enum' => [
                            'incompatible_usage',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The certificate is signed by an unknown authority.',
                        'enum' => [
                            'unknown_authority',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'Failed to read the private key.',
                        'enum' => [
                            'private_key_read_failed',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'Failed to decode the private key.',
                        'enum' => [
                            'private_key_decode_failed',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'An error occurred while parsing the private key.',
                        'enum' => [
                            'private_key_parse_failed',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The private key is encrypted.',
                        'enum' => [
                            'private_key_encrypted',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The private key is not RSA.',
                        'enum' => [
                            'private_key_not_rsa',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'The private key does not match the certificate.',
                        'enum' => [
                            'private_key_mismatch',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'An unknown error occurred related to Cloudflare.',
                        'enum' => [
                            'unknown_cloudflare_error',
                        ],
                        'type' => 'string',
                    ],
                    [
                        'description' => 'An unknown error occurred.',
                        'enum' => [
                            'unknown',
                        ],
                        'type' => 'string',
                    ],
                ],
            ],
        ],
        'required' => [
            'message',
        ],
        'type' => 'object',
    ];

    private CertificateErrorMessageAlternative1|CertificateErrorMessageAlternative2|CertificateErrorMessageAlternative3|CertificateErrorMessageAlternative4|CertificateErrorMessageAlternative5|CertificateErrorMessageAlternative6|CertificateErrorMessageAlternative7|CertificateErrorMessageAlternative8|CertificateErrorMessageAlternative9|CertificateErrorMessageAlternative10|CertificateErrorMessageAlternative11|CertificateErrorMessageAlternative12|CertificateErrorMessageAlternative13|CertificateErrorMessageAlternative14|CertificateErrorMessageAlternative15|CertificateErrorMessageAlternative16|CertificateErrorMessageAlternative17|CertificateErrorMessageAlternative18 $message;

    /**
     * @param CertificateErrorMessageAlternative1|CertificateErrorMessageAlternative2|CertificateErrorMessageAlternative3|CertificateErrorMessageAlternative4|CertificateErrorMessageAlternative5|CertificateErrorMessageAlternative6|CertificateErrorMessageAlternative7|CertificateErrorMessageAlternative8|CertificateErrorMessageAlternative9|CertificateErrorMessageAlternative10|CertificateErrorMessageAlternative11|CertificateErrorMessageAlternative12|CertificateErrorMessageAlternative13|CertificateErrorMessageAlternative14|CertificateErrorMessageAlternative15|CertificateErrorMessageAlternative16|CertificateErrorMessageAlternative17|CertificateErrorMessageAlternative18 $message
     */
    public function __construct(CertificateErrorMessageAlternative1|CertificateErrorMessageAlternative10|CertificateErrorMessageAlternative11|CertificateErrorMessageAlternative12|CertificateErrorMessageAlternative13|CertificateErrorMessageAlternative14|CertificateErrorMessageAlternative15|CertificateErrorMessageAlternative16|CertificateErrorMessageAlternative17|CertificateErrorMessageAlternative18|CertificateErrorMessageAlternative2|CertificateErrorMessageAlternative3|CertificateErrorMessageAlternative4|CertificateErrorMessageAlternative5|CertificateErrorMessageAlternative6|CertificateErrorMessageAlternative7|CertificateErrorMessageAlternative8|CertificateErrorMessageAlternative9 $message)
    {
        $this->message = $message;
    }

    public function getMessage(): CertificateErrorMessageAlternative1|CertificateErrorMessageAlternative10|CertificateErrorMessageAlternative11|CertificateErrorMessageAlternative12|CertificateErrorMessageAlternative13|CertificateErrorMessageAlternative14|CertificateErrorMessageAlternative15|CertificateErrorMessageAlternative16|CertificateErrorMessageAlternative17|CertificateErrorMessageAlternative18|CertificateErrorMessageAlternative2|CertificateErrorMessageAlternative3|CertificateErrorMessageAlternative4|CertificateErrorMessageAlternative5|CertificateErrorMessageAlternative6|CertificateErrorMessageAlternative7|CertificateErrorMessageAlternative8|CertificateErrorMessageAlternative9
    {
        return $this->message;
    }

    /**
     * @param CertificateErrorMessageAlternative1|CertificateErrorMessageAlternative2|CertificateErrorMessageAlternative3|CertificateErrorMessageAlternative4|CertificateErrorMessageAlternative5|CertificateErrorMessageAlternative6|CertificateErrorMessageAlternative7|CertificateErrorMessageAlternative8|CertificateErrorMessageAlternative9|CertificateErrorMessageAlternative10|CertificateErrorMessageAlternative11|CertificateErrorMessageAlternative12|CertificateErrorMessageAlternative13|CertificateErrorMessageAlternative14|CertificateErrorMessageAlternative15|CertificateErrorMessageAlternative16|CertificateErrorMessageAlternative17|CertificateErrorMessageAlternative18 $message
     */
    public function withMessage(CertificateErrorMessageAlternative1|CertificateErrorMessageAlternative10|CertificateErrorMessageAlternative11|CertificateErrorMessageAlternative12|CertificateErrorMessageAlternative13|CertificateErrorMessageAlternative14|CertificateErrorMessageAlternative15|CertificateErrorMessageAlternative16|CertificateErrorMessageAlternative17|CertificateErrorMessageAlternative18|CertificateErrorMessageAlternative2|CertificateErrorMessageAlternative3|CertificateErrorMessageAlternative4|CertificateErrorMessageAlternative5|CertificateErrorMessageAlternative6|CertificateErrorMessageAlternative7|CertificateErrorMessageAlternative8|CertificateErrorMessageAlternative9 $message): self
    {
        $clone = clone $this;
        $clone->message = $message;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return CertificateError Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): CertificateError
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $message = match (true) {
            CertificateErrorMessageAlternative1::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative1::from($input->{'message'}),
            CertificateErrorMessageAlternative2::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative2::from($input->{'message'}),
            CertificateErrorMessageAlternative3::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative3::from($input->{'message'}),
            CertificateErrorMessageAlternative4::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative4::from($input->{'message'}),
            CertificateErrorMessageAlternative5::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative5::from($input->{'message'}),
            CertificateErrorMessageAlternative6::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative6::from($input->{'message'}),
            CertificateErrorMessageAlternative7::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative7::from($input->{'message'}),
            CertificateErrorMessageAlternative8::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative8::from($input->{'message'}),
            CertificateErrorMessageAlternative9::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative9::from($input->{'message'}),
            CertificateErrorMessageAlternative10::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative10::from($input->{'message'}),
            CertificateErrorMessageAlternative11::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative11::from($input->{'message'}),
            CertificateErrorMessageAlternative12::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative12::from($input->{'message'}),
            CertificateErrorMessageAlternative13::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative13::from($input->{'message'}),
            CertificateErrorMessageAlternative14::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative14::from($input->{'message'}),
            CertificateErrorMessageAlternative15::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative15::from($input->{'message'}),
            CertificateErrorMessageAlternative16::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative16::from($input->{'message'}),
            CertificateErrorMessageAlternative17::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative17::from($input->{'message'}),
            CertificateErrorMessageAlternative18::tryFrom($input->{'message'}) !== null => CertificateErrorMessageAlternative18::from($input->{'message'}),
        };

        $obj = new self($message);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['message'] = match (true) {
            $this->message instanceof CertificateErrorMessageAlternative1, $this->message instanceof CertificateErrorMessageAlternative2, $this->message instanceof CertificateErrorMessageAlternative3, $this->message instanceof CertificateErrorMessageAlternative4, $this->message instanceof CertificateErrorMessageAlternative5, $this->message instanceof CertificateErrorMessageAlternative6, $this->message instanceof CertificateErrorMessageAlternative7, $this->message instanceof CertificateErrorMessageAlternative8, $this->message instanceof CertificateErrorMessageAlternative9, $this->message instanceof CertificateErrorMessageAlternative10, $this->message instanceof CertificateErrorMessageAlternative11, $this->message instanceof CertificateErrorMessageAlternative12, $this->message instanceof CertificateErrorMessageAlternative13, $this->message instanceof CertificateErrorMessageAlternative14, $this->message instanceof CertificateErrorMessageAlternative15, $this->message instanceof CertificateErrorMessageAlternative16, $this->message instanceof CertificateErrorMessageAlternative17, $this->message instanceof CertificateErrorMessageAlternative18 => ($this->message)->value,
        };

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->message = match (true) {
            $this->message instanceof CertificateErrorMessageAlternative1, $this->message instanceof CertificateErrorMessageAlternative2, $this->message instanceof CertificateErrorMessageAlternative3, $this->message instanceof CertificateErrorMessageAlternative4, $this->message instanceof CertificateErrorMessageAlternative5, $this->message instanceof CertificateErrorMessageAlternative6, $this->message instanceof CertificateErrorMessageAlternative7, $this->message instanceof CertificateErrorMessageAlternative8, $this->message instanceof CertificateErrorMessageAlternative9, $this->message instanceof CertificateErrorMessageAlternative10, $this->message instanceof CertificateErrorMessageAlternative11, $this->message instanceof CertificateErrorMessageAlternative12, $this->message instanceof CertificateErrorMessageAlternative13, $this->message instanceof CertificateErrorMessageAlternative14, $this->message instanceof CertificateErrorMessageAlternative15, $this->message instanceof CertificateErrorMessageAlternative16, $this->message instanceof CertificateErrorMessageAlternative17, $this->message instanceof CertificateErrorMessageAlternative18 => $this->message,
        };
    }
}
