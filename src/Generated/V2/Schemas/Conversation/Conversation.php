<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Conversation;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.conversation.Conversation.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Conversation
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'category' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.conversation.Category',
            ],
            'conversationId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'createdAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'createdBy' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.conversation.User',
            ],
            'lastMessage' => [
                'properties' => [
                    'createdAt' => [
                        'format' => 'date-time',
                        'type' => 'string',
                    ],
                    'createdBy' => [
                        '$ref' => '#/components/schemas/de.mittwald.v1.conversation.User',
                    ],
                ],
                'required' => [
                    'createdAt',
                ],
                'type' => 'object',
            ],
            'lastMessageAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'lastMessageBy' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.conversation.User',
            ],
            'mainUser' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.conversation.User',
            ],
            'notificationRoles' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.conversation.NotificationRole',
                ],
                'type' => 'array',
            ],
            'relatedTo' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.conversation.RelatedAggregateReference',
            ],
            'relations' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.conversation.AggregateReference',
                ],
                'type' => 'array',
            ],
            'sharedWith' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.conversation.ShareableAggregateReference',
            ],
            'shortId' => [
                'type' => 'string',
            ],
            'status' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.conversation.Status',
            ],
            'title' => [
                'type' => 'string',
            ],
            'visibility' => [
                'enum' => [
                    'shared',
                    'private',
                ],
                'type' => 'string',
            ],
        ],
        'required' => [
            'conversationId',
            'shortId',
            'title',
            'createdAt',
            'status',
            'visibility',
            'mainUser',
        ],
        'type' => 'object',
    ];

    private ?Category $category = null;

    private string $conversationId;

    private DateTime $createdAt;

    private ?User $createdBy = null;

    private ?ConversationLastMessage $lastMessage = null;

    private ?DateTime $lastMessageAt = null;

    private ?User $lastMessageBy = null;

    private User $mainUser;

    /**
     * @var NotificationRole[]|null
     */
    private ?array $notificationRoles = null;

    private RelatedAggregateReferenceAlternative1|RelatedAggregateReferenceAlternative2|RelatedAggregateReferenceAlternative3|RelatedAggregateReferenceAlternative4|RelatedAggregateReferenceAlternative5|RelatedAggregateReferenceAlternative6|RelatedAggregateReferenceAlternative7|null $relatedTo = null;

    /**
     * @var AggregateReference[]|null
     */
    private ?array $relations = null;

    private ShareableAggregateReferenceAlternative1|ShareableAggregateReferenceAlternative2|ShareableAggregateReferenceAlternative3|ShareableAggregateReferenceAlternative4|null $sharedWith = null;

    private string $shortId;

    private Status $status;

    private string $title;

    private ConversationVisibility $visibility;

    public function __construct(string $conversationId, DateTime $createdAt, User $mainUser, string $shortId, Status $status, string $title, ConversationVisibility $visibility)
    {
        $this->conversationId = $conversationId;
        $this->createdAt = $createdAt;
        $this->mainUser = $mainUser;
        $this->shortId = $shortId;
        $this->status = $status;
        $this->title = $title;
        $this->visibility = $visibility;
    }

    public function getCategory(): ?Category
    {
        return $this->category ?? null;
    }

    public function getConversationId(): string
    {
        return $this->conversationId;
    }

    public function getCreatedAt(): DateTime
    {
        return $this->createdAt;
    }

    public function getCreatedBy(): ?User
    {
        return $this->createdBy ?? null;
    }

    public function getLastMessage(): ?ConversationLastMessage
    {
        return $this->lastMessage ?? null;
    }

    public function getLastMessageAt(): ?DateTime
    {
        return $this->lastMessageAt ?? null;
    }

    public function getLastMessageBy(): ?User
    {
        return $this->lastMessageBy ?? null;
    }

    public function getMainUser(): User
    {
        return $this->mainUser;
    }

    /**
     * @return NotificationRole[]|null
     */
    public function getNotificationRoles(): ?array
    {
        return $this->notificationRoles ?? null;
    }

    public function getRelatedTo(): RelatedAggregateReferenceAlternative1|RelatedAggregateReferenceAlternative2|RelatedAggregateReferenceAlternative3|RelatedAggregateReferenceAlternative4|RelatedAggregateReferenceAlternative5|RelatedAggregateReferenceAlternative6|RelatedAggregateReferenceAlternative7|null
    {
        return $this->relatedTo;
    }

    /**
     * @return AggregateReference[]|null
     */
    public function getRelations(): ?array
    {
        return $this->relations ?? null;
    }

    public function getSharedWith(): ShareableAggregateReferenceAlternative1|ShareableAggregateReferenceAlternative2|ShareableAggregateReferenceAlternative3|ShareableAggregateReferenceAlternative4|null
    {
        return $this->sharedWith;
    }

    public function getShortId(): string
    {
        return $this->shortId;
    }

    public function getStatus(): Status
    {
        return $this->status;
    }

    public function getTitle(): string
    {
        return $this->title;
    }

    public function getVisibility(): ConversationVisibility
    {
        return $this->visibility;
    }

    public function withCategory(Category $category): self
    {
        $clone = clone $this;
        $clone->category = $category;

        return $clone;
    }

    public function withoutCategory(): self
    {
        $clone = clone $this;
        unset($clone->category);

        return $clone;
    }

    public function withConversationId(string $conversationId): self
    {
        $validator = new Validator();
        $validator->validate($conversationId, self::$internalValidationSchema['properties']['conversationId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->conversationId = $conversationId;

        return $clone;
    }

    public function withCreatedAt(DateTime $createdAt): self
    {
        $clone = clone $this;
        $clone->createdAt = $createdAt;

        return $clone;
    }

    public function withCreatedBy(User $createdBy): self
    {
        $clone = clone $this;
        $clone->createdBy = $createdBy;

        return $clone;
    }

    public function withoutCreatedBy(): self
    {
        $clone = clone $this;
        unset($clone->createdBy);

        return $clone;
    }

    public function withLastMessage(ConversationLastMessage $lastMessage): self
    {
        $clone = clone $this;
        $clone->lastMessage = $lastMessage;

        return $clone;
    }

    public function withoutLastMessage(): self
    {
        $clone = clone $this;
        unset($clone->lastMessage);

        return $clone;
    }

    public function withLastMessageAt(DateTime $lastMessageAt): self
    {
        $clone = clone $this;
        $clone->lastMessageAt = $lastMessageAt;

        return $clone;
    }

    public function withoutLastMessageAt(): self
    {
        $clone = clone $this;
        unset($clone->lastMessageAt);

        return $clone;
    }

    public function withLastMessageBy(User $lastMessageBy): self
    {
        $clone = clone $this;
        $clone->lastMessageBy = $lastMessageBy;

        return $clone;
    }

    public function withoutLastMessageBy(): self
    {
        $clone = clone $this;
        unset($clone->lastMessageBy);

        return $clone;
    }

    public function withMainUser(User $mainUser): self
    {
        $clone = clone $this;
        $clone->mainUser = $mainUser;

        return $clone;
    }

    /**
     * @param NotificationRole[] $notificationRoles
     */
    public function withNotificationRoles(array $notificationRoles): self
    {
        $clone = clone $this;
        $clone->notificationRoles = $notificationRoles;

        return $clone;
    }

    public function withoutNotificationRoles(): self
    {
        $clone = clone $this;
        unset($clone->notificationRoles);

        return $clone;
    }

    public function withRelatedTo(RelatedAggregateReferenceAlternative1|RelatedAggregateReferenceAlternative2|RelatedAggregateReferenceAlternative3|RelatedAggregateReferenceAlternative4|RelatedAggregateReferenceAlternative5|RelatedAggregateReferenceAlternative6|RelatedAggregateReferenceAlternative7 $relatedTo): self
    {
        $clone = clone $this;
        $clone->relatedTo = $relatedTo;

        return $clone;
    }

    public function withoutRelatedTo(): self
    {
        $clone = clone $this;
        unset($clone->relatedTo);

        return $clone;
    }

    /**
     * @param AggregateReference[] $relations
     */
    public function withRelations(array $relations): self
    {
        $clone = clone $this;
        $clone->relations = $relations;

        return $clone;
    }

    public function withoutRelations(): self
    {
        $clone = clone $this;
        unset($clone->relations);

        return $clone;
    }

    public function withSharedWith(ShareableAggregateReferenceAlternative1|ShareableAggregateReferenceAlternative2|ShareableAggregateReferenceAlternative3|ShareableAggregateReferenceAlternative4 $sharedWith): self
    {
        $clone = clone $this;
        $clone->sharedWith = $sharedWith;

        return $clone;
    }

    public function withoutSharedWith(): self
    {
        $clone = clone $this;
        unset($clone->sharedWith);

        return $clone;
    }

    public function withShortId(string $shortId): self
    {
        $validator = new Validator();
        $validator->validate($shortId, self::$internalValidationSchema['properties']['shortId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->shortId = $shortId;

        return $clone;
    }

    public function withStatus(Status $status): self
    {
        $clone = clone $this;
        $clone->status = $status;

        return $clone;
    }

    public function withTitle(string $title): self
    {
        $validator = new Validator();
        $validator->validate($title, self::$internalValidationSchema['properties']['title']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->title = $title;

        return $clone;
    }

    public function withVisibility(ConversationVisibility $visibility): self
    {
        $clone = clone $this;
        $clone->visibility = $visibility;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Conversation Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Conversation
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $category = null;
        if (isset($input->{'category'})) {
            $category = Category::buildFromInput($input->{'category'}, validate: $validate);
        }
        $conversationId = $input->{'conversationId'};
        $createdAt = new DateTime($input->{'createdAt'});
        $createdBy = null;
        if (isset($input->{'createdBy'})) {
            $createdBy = User::buildFromInput($input->{'createdBy'}, validate: $validate);
        }
        $lastMessage = null;
        if (isset($input->{'lastMessage'})) {
            $lastMessage = ConversationLastMessage::buildFromInput($input->{'lastMessage'}, validate: $validate);
        }
        $lastMessageAt = null;
        if (isset($input->{'lastMessageAt'})) {
            $lastMessageAt = new DateTime($input->{'lastMessageAt'});
        }
        $lastMessageBy = null;
        if (isset($input->{'lastMessageBy'})) {
            $lastMessageBy = User::buildFromInput($input->{'lastMessageBy'}, validate: $validate);
        }
        $mainUser = User::buildFromInput($input->{'mainUser'}, validate: $validate);
        $notificationRoles = null;
        if (isset($input->{'notificationRoles'})) {
            $notificationRoles = array_map(fn (string $i): NotificationRole => NotificationRole::from($i), $input->{'notificationRoles'});
        }
        $relatedTo = null;
        if (isset($input->{'relatedTo'})) {
            $relatedTo = match (true) {
                default => throw new InvalidArgumentException("input cannot be mapped to any valid type"),
                RelatedAggregateReferenceAlternative1::validateInput($input->{'relatedTo'}, true) => RelatedAggregateReferenceAlternative1::buildFromInput($input->{'relatedTo'}, validate: $validate),
                RelatedAggregateReferenceAlternative2::validateInput($input->{'relatedTo'}, true) => RelatedAggregateReferenceAlternative2::buildFromInput($input->{'relatedTo'}, validate: $validate),
                RelatedAggregateReferenceAlternative3::validateInput($input->{'relatedTo'}, true) => RelatedAggregateReferenceAlternative3::buildFromInput($input->{'relatedTo'}, validate: $validate),
                RelatedAggregateReferenceAlternative4::validateInput($input->{'relatedTo'}, true) => RelatedAggregateReferenceAlternative4::buildFromInput($input->{'relatedTo'}, validate: $validate),
                RelatedAggregateReferenceAlternative5::validateInput($input->{'relatedTo'}, true) => RelatedAggregateReferenceAlternative5::buildFromInput($input->{'relatedTo'}, validate: $validate),
                RelatedAggregateReferenceAlternative6::validateInput($input->{'relatedTo'}, true) => RelatedAggregateReferenceAlternative6::buildFromInput($input->{'relatedTo'}, validate: $validate),
                RelatedAggregateReferenceAlternative7::validateInput($input->{'relatedTo'}, true) => RelatedAggregateReferenceAlternative7::buildFromInput($input->{'relatedTo'}, validate: $validate),
            };
        }
        $relations = null;
        if (isset($input->{'relations'})) {
            $relations = array_map(fn (array|object $i): AggregateReference => AggregateReference::buildFromInput($i, validate: $validate), $input->{'relations'});
        }
        $sharedWith = null;
        if (isset($input->{'sharedWith'})) {
            $sharedWith = match (true) {
                default => throw new InvalidArgumentException("input cannot be mapped to any valid type"),
                ShareableAggregateReferenceAlternative1::validateInput($input->{'sharedWith'}, true) => ShareableAggregateReferenceAlternative1::buildFromInput($input->{'sharedWith'}, validate: $validate),
                ShareableAggregateReferenceAlternative2::validateInput($input->{'sharedWith'}, true) => ShareableAggregateReferenceAlternative2::buildFromInput($input->{'sharedWith'}, validate: $validate),
                ShareableAggregateReferenceAlternative3::validateInput($input->{'sharedWith'}, true) => ShareableAggregateReferenceAlternative3::buildFromInput($input->{'sharedWith'}, validate: $validate),
                ShareableAggregateReferenceAlternative4::validateInput($input->{'sharedWith'}, true) => ShareableAggregateReferenceAlternative4::buildFromInput($input->{'sharedWith'}, validate: $validate),
            };
        }
        $shortId = $input->{'shortId'};
        $status = Status::from($input->{'status'});
        $title = $input->{'title'};
        $visibility = ConversationVisibility::from($input->{'visibility'});

        $obj = new self($conversationId, $createdAt, $mainUser, $shortId, $status, $title, $visibility);
        $obj->category = $category;
        $obj->createdBy = $createdBy;
        $obj->lastMessage = $lastMessage;
        $obj->lastMessageAt = $lastMessageAt;
        $obj->lastMessageBy = $lastMessageBy;
        $obj->notificationRoles = $notificationRoles;
        $obj->relatedTo = $relatedTo;
        $obj->relations = $relations;
        $obj->sharedWith = $sharedWith;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->category)) {
            $output['category'] = $this->category->toJson();
        }
        $output['conversationId'] = $this->conversationId;
        $output['createdAt'] = ($this->createdAt)->format(DateTime::ATOM);
        if (isset($this->createdBy)) {
            $output['createdBy'] = $this->createdBy->toJson();
        }
        if (isset($this->lastMessage)) {
            $output['lastMessage'] = ($this->lastMessage)->toJson();
        }
        if (isset($this->lastMessageAt)) {
            $output['lastMessageAt'] = ($this->lastMessageAt)->format(DateTime::ATOM);
        }
        if (isset($this->lastMessageBy)) {
            $output['lastMessageBy'] = $this->lastMessageBy->toJson();
        }
        $output['mainUser'] = $this->mainUser->toJson();
        if (isset($this->notificationRoles)) {
            $output['notificationRoles'] = array_map(fn (NotificationRole $i): string => $i->value, $this->notificationRoles);
        }
        if (isset($this->relatedTo)) {
            $output['relatedTo'] = match (true) {
                default => throw new InvalidArgumentException("input cannot be mapped to any valid type"),
                ($this->relatedTo) instanceof RelatedAggregateReferenceAlternative1, ($this->relatedTo) instanceof RelatedAggregateReferenceAlternative2, ($this->relatedTo) instanceof RelatedAggregateReferenceAlternative3, ($this->relatedTo) instanceof RelatedAggregateReferenceAlternative4, ($this->relatedTo) instanceof RelatedAggregateReferenceAlternative5, ($this->relatedTo) instanceof RelatedAggregateReferenceAlternative6, ($this->relatedTo) instanceof RelatedAggregateReferenceAlternative7 => $this->relatedTo->toJson(),
            };
        }
        if (isset($this->relations)) {
            $output['relations'] = array_map(fn (AggregateReference $i): array => $i->toJson(), $this->relations);
        }
        if (isset($this->sharedWith)) {
            $output['sharedWith'] = match (true) {
                default => throw new InvalidArgumentException("input cannot be mapped to any valid type"),
                ($this->sharedWith) instanceof ShareableAggregateReferenceAlternative1, ($this->sharedWith) instanceof ShareableAggregateReferenceAlternative2, ($this->sharedWith) instanceof ShareableAggregateReferenceAlternative3, ($this->sharedWith) instanceof ShareableAggregateReferenceAlternative4 => $this->sharedWith->toJson(),
            };
        }
        $output['shortId'] = $this->shortId;
        $output['status'] = $this->status->value;
        $output['title'] = $this->title;
        $output['visibility'] = ($this->visibility)->value;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->createdAt = clone $this->createdAt;
        if (isset($this->lastMessage)) {
            $this->lastMessage = clone $this->lastMessage;
        }
        if (isset($this->lastMessageAt)) {
            $this->lastMessageAt = clone $this->lastMessageAt;
        }
    }
}
