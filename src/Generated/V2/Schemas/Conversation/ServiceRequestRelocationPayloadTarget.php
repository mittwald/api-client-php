<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Conversation;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for
 * de.mittwald.v1.conversation.ServiceRequestRelocationPayload.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ServiceRequestRelocationPayloadTarget
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'accountShortId' => [
                'type' => 'string',
            ],
            'application' => [
                'type' => 'string',
            ],
            'articleType' => [
                'type' => 'string',
            ],
            'organisation' => [
                'type' => 'string',
            ],
            'prices' => [
                'items' => [
                    'properties' => [
                        'name' => [
                            'type' => 'string',
                        ],
                        'price' => [
                            'type' => 'number',
                        ],
                    ],
                    'type' => 'object',
                ],
                'type' => 'array',
            ],
            'product' => [
                'type' => 'string',
            ],
            'withDataCompare' => [
                'type' => 'boolean',
            ],
        ],
        'required' => [
            'organisation',
            'accountShortId',
            'product',
            'articleType',
        ],
        'type' => 'object',
    ];

    private string $accountShortId;

    private ?string $application = null;

    private string $articleType;

    private string $organisation;

    /**
     * @var ServiceRequestRelocationPayloadTargetPricesItem[]|null
     */
    private ?array $prices = null;

    private string $product;

    private ?bool $withDataCompare = null;

    public function __construct(string $accountShortId, string $articleType, string $organisation, string $product)
    {
        $this->accountShortId = $accountShortId;
        $this->articleType = $articleType;
        $this->organisation = $organisation;
        $this->product = $product;
    }

    public function getAccountShortId(): string
    {
        return $this->accountShortId;
    }

    public function getApplication(): ?string
    {
        return $this->application ?? null;
    }

    public function getArticleType(): string
    {
        return $this->articleType;
    }

    public function getOrganisation(): string
    {
        return $this->organisation;
    }

    /**
     * @return ServiceRequestRelocationPayloadTargetPricesItem[]|null
     */
    public function getPrices(): ?array
    {
        return $this->prices ?? null;
    }

    public function getProduct(): string
    {
        return $this->product;
    }

    public function getWithDataCompare(): ?bool
    {
        return $this->withDataCompare ?? null;
    }

    public function withAccountShortId(string $accountShortId): self
    {
        $validator = new Validator();
        $validator->validate($accountShortId, static::$schema['properties']['accountShortId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->accountShortId = $accountShortId;

        return $clone;
    }

    public function withApplication(string $application): self
    {
        $validator = new Validator();
        $validator->validate($application, static::$schema['properties']['application']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->application = $application;

        return $clone;
    }

    public function withoutApplication(): self
    {
        $clone = clone $this;
        unset($clone->application);

        return $clone;
    }

    public function withArticleType(string $articleType): self
    {
        $validator = new Validator();
        $validator->validate($articleType, static::$schema['properties']['articleType']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->articleType = $articleType;

        return $clone;
    }

    public function withOrganisation(string $organisation): self
    {
        $validator = new Validator();
        $validator->validate($organisation, static::$schema['properties']['organisation']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->organisation = $organisation;

        return $clone;
    }

    /**
     * @param ServiceRequestRelocationPayloadTargetPricesItem[] $prices
     */
    public function withPrices(array $prices): self
    {
        $clone = clone $this;
        $clone->prices = $prices;

        return $clone;
    }

    public function withoutPrices(): self
    {
        $clone = clone $this;
        unset($clone->prices);

        return $clone;
    }

    public function withProduct(string $product): self
    {
        $validator = new Validator();
        $validator->validate($product, static::$schema['properties']['product']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->product = $product;

        return $clone;
    }

    public function withWithDataCompare(bool $withDataCompare): self
    {
        $validator = new Validator();
        $validator->validate($withDataCompare, static::$schema['properties']['withDataCompare']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->withDataCompare = $withDataCompare;

        return $clone;
    }

    public function withoutWithDataCompare(): self
    {
        $clone = clone $this;
        unset($clone->withDataCompare);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ServiceRequestRelocationPayloadTarget Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ServiceRequestRelocationPayloadTarget
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $accountShortId = $input->{'accountShortId'};
        $application = null;
        if (isset($input->{'application'})) {
            $application = $input->{'application'};
        }
        $articleType = $input->{'articleType'};
        $organisation = $input->{'organisation'};
        $prices = null;
        if (isset($input->{'prices'})) {
            $prices = array_map(fn (array|object $i): ServiceRequestRelocationPayloadTargetPricesItem => ServiceRequestRelocationPayloadTargetPricesItem::buildFromInput($i, validate: $validate), $input->{'prices'});
        }
        $product = $input->{'product'};
        $withDataCompare = null;
        if (isset($input->{'withDataCompare'})) {
            $withDataCompare = (bool)($input->{'withDataCompare'});
        }

        $obj = new self($accountShortId, $articleType, $organisation, $product);
        $obj->application = $application;
        $obj->prices = $prices;
        $obj->withDataCompare = $withDataCompare;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['accountShortId'] = $this->accountShortId;
        if (isset($this->application)) {
            $output['application'] = $this->application;
        }
        $output['articleType'] = $this->articleType;
        $output['organisation'] = $this->organisation;
        if (isset($this->prices)) {
            $output['prices'] = array_map(fn (ServiceRequestRelocationPayloadTargetPricesItem $i) => $i->toJson(), $this->prices);
        }
        $output['product'] = $this->product;
        if (isset($this->withDataCompare)) {
            $output['withDataCompare'] = $this->withDataCompare;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->prices)) {
            $this->prices = array_map(fn (ServiceRequestRelocationPayloadTargetPricesItem $i) => clone $i, $this->prices);
        }
    }
}
