<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Conversation;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for
 * de.mittwald.v1.conversation.ServiceRequestRelocationPayload.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ServiceRequestRelocationPayloadDomain
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'allDomains' => [
                'type' => 'boolean',
            ],
            'domains' => [
                'items' => [
                    'properties' => [
                        'authCode' => [
                            'type' => 'string',
                        ],
                        'domainName' => [
                            'type' => 'string',
                        ],
                    ],
                    'type' => 'object',
                ],
                'type' => 'array',
            ],
        ],
        'type' => 'object',
    ];

    private ?bool $allDomains = null;

    /**
     * @var ServiceRequestRelocationPayloadDomainDomainsItem[]|null
     */
    private ?array $domains = null;

    /**
     *
     */
    public function __construct()
    {
    }

    public function getAllDomains(): ?bool
    {
        return $this->allDomains ?? null;
    }

    /**
     * @return ServiceRequestRelocationPayloadDomainDomainsItem[]|null
     */
    public function getDomains(): ?array
    {
        return $this->domains ?? null;
    }

    public function withAllDomains(bool $allDomains): self
    {
        $validator = new Validator();
        $validator->validate($allDomains, static::$schema['properties']['allDomains']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->allDomains = $allDomains;

        return $clone;
    }

    public function withoutAllDomains(): self
    {
        $clone = clone $this;
        unset($clone->allDomains);

        return $clone;
    }

    /**
     * @param ServiceRequestRelocationPayloadDomainDomainsItem[] $domains
     */
    public function withDomains(array $domains): self
    {
        $clone = clone $this;
        $clone->domains = $domains;

        return $clone;
    }

    public function withoutDomains(): self
    {
        $clone = clone $this;
        unset($clone->domains);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ServiceRequestRelocationPayloadDomain Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ServiceRequestRelocationPayloadDomain
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $allDomains = null;
        if (isset($input->{'allDomains'})) {
            $allDomains = (bool)($input->{'allDomains'});
        }
        $domains = null;
        if (isset($input->{'domains'})) {
            $domains = array_map(fn (array|object $i): ServiceRequestRelocationPayloadDomainDomainsItem => ServiceRequestRelocationPayloadDomainDomainsItem::buildFromInput($i, validate: $validate), $input->{'domains'});
        }

        $obj = new self();
        $obj->allDomains = $allDomains;
        $obj->domains = $domains;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->allDomains)) {
            $output['allDomains'] = $this->allDomains;
        }
        if (isset($this->domains)) {
            $output['domains'] = array_map(fn (ServiceRequestRelocationPayloadDomainDomainsItem $i) => $i->toJson(), $this->domains);
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->domains)) {
            $this->domains = array_map(fn (ServiceRequestRelocationPayloadDomainDomainsItem $i) => clone $i, $this->domains);
        }
    }
}
