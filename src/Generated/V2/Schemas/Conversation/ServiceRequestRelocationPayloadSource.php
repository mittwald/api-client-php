<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Conversation;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for
 * de.mittwald.v1.conversation.ServiceRequestRelocationPayload.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ServiceRequestRelocationPayloadSource
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'providerName' => [
                'type' => 'string',
            ],
            'providerPassword' => [
                'type' => 'string',
            ],
            'providerUrl' => [
                'type' => 'string',
            ],
            'providerUsername' => [
                'type' => 'string',
            ],
            'sourceAccount' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'sourceAccount',
            'providerName',
            'providerUrl',
            'providerUsername',
            'providerPassword',
        ],
        'type' => 'object',
    ];

    private string $providerName;

    private string $providerPassword;

    private string $providerUrl;

    private string $providerUsername;

    private string $sourceAccount;

    public function __construct(string $providerName, string $providerPassword, string $providerUrl, string $providerUsername, string $sourceAccount)
    {
        $this->providerName = $providerName;
        $this->providerPassword = $providerPassword;
        $this->providerUrl = $providerUrl;
        $this->providerUsername = $providerUsername;
        $this->sourceAccount = $sourceAccount;
    }

    public function getProviderName(): string
    {
        return $this->providerName;
    }

    public function getProviderPassword(): string
    {
        return $this->providerPassword;
    }

    public function getProviderUrl(): string
    {
        return $this->providerUrl;
    }

    public function getProviderUsername(): string
    {
        return $this->providerUsername;
    }

    public function getSourceAccount(): string
    {
        return $this->sourceAccount;
    }

    public function withProviderName(string $providerName): self
    {
        $validator = new Validator();
        $validator->validate($providerName, self::$internalValidationSchema['properties']['providerName']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->providerName = $providerName;

        return $clone;
    }

    public function withProviderPassword(string $providerPassword): self
    {
        $validator = new Validator();
        $validator->validate($providerPassword, self::$internalValidationSchema['properties']['providerPassword']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->providerPassword = $providerPassword;

        return $clone;
    }

    public function withProviderUrl(string $providerUrl): self
    {
        $validator = new Validator();
        $validator->validate($providerUrl, self::$internalValidationSchema['properties']['providerUrl']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->providerUrl = $providerUrl;

        return $clone;
    }

    public function withProviderUsername(string $providerUsername): self
    {
        $validator = new Validator();
        $validator->validate($providerUsername, self::$internalValidationSchema['properties']['providerUsername']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->providerUsername = $providerUsername;

        return $clone;
    }

    public function withSourceAccount(string $sourceAccount): self
    {
        $validator = new Validator();
        $validator->validate($sourceAccount, self::$internalValidationSchema['properties']['sourceAccount']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->sourceAccount = $sourceAccount;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ServiceRequestRelocationPayloadSource Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ServiceRequestRelocationPayloadSource
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $providerName = $input->{'providerName'};
        $providerPassword = $input->{'providerPassword'};
        $providerUrl = $input->{'providerUrl'};
        $providerUsername = $input->{'providerUsername'};
        $sourceAccount = $input->{'sourceAccount'};

        $obj = new self($providerName, $providerPassword, $providerUrl, $providerUsername, $sourceAccount);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['providerName'] = $this->providerName;
        $output['providerPassword'] = $this->providerPassword;
        $output['providerUrl'] = $this->providerUrl;
        $output['providerUsername'] = $this->providerUsername;
        $output['sourceAccount'] = $this->sourceAccount;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
