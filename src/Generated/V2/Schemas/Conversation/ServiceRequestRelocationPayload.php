<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Conversation;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for
 * de.mittwald.v1.conversation.ServiceRequestRelocationPayload.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ServiceRequestRelocationPayload
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'contact' => [
                'properties' => [
                    'email' => [
                        'type' => 'string',
                    ],
                    'firstname' => [
                        'type' => 'string',
                    ],
                    'lastname' => [
                        'type' => 'string',
                    ],
                    'phone' => [
                        'type' => 'string',
                    ],
                ],
                'required' => [
                    'firstname',
                    'lastname',
                    'email',
                ],
                'type' => 'object',
            ],
            'domain' => [
                'properties' => [
                    'allDomains' => [
                        'type' => 'boolean',
                    ],
                    'domains' => [
                        'items' => [
                            'properties' => [
                                'authCode' => [
                                    'type' => 'string',
                                ],
                                'domainName' => [
                                    'type' => 'string',
                                ],
                            ],
                            'type' => 'object',
                        ],
                        'type' => 'array',
                    ],
                ],
                'type' => 'object',
            ],
            'notes' => [
                'type' => 'string',
            ],
            'preferredRelocationDate' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'redirectusKey' => [
                'type' => 'number',
            ],
            'source' => [
                'properties' => [
                    'providerName' => [
                        'type' => 'string',
                    ],
                    'providerPassword' => [
                        'type' => 'string',
                    ],
                    'providerUrl' => [
                        'type' => 'string',
                    ],
                    'providerUsername' => [
                        'type' => 'string',
                    ],
                    'sourceAccount' => [
                        'type' => 'string',
                    ],
                ],
                'required' => [
                    'sourceAccount',
                    'providerName',
                    'providerUrl',
                    'providerUsername',
                    'providerPassword',
                ],
                'type' => 'object',
            ],
            'target' => [
                'properties' => [
                    'accountShortId' => [
                        'type' => 'string',
                    ],
                    'application' => [
                        'type' => 'string',
                    ],
                    'articleType' => [
                        'type' => 'string',
                    ],
                    'organisation' => [
                        'type' => 'string',
                    ],
                    'prices' => [
                        'items' => [
                            'properties' => [
                                'name' => [
                                    'type' => 'string',
                                ],
                                'price' => [
                                    'type' => 'number',
                                ],
                            ],
                            'type' => 'object',
                        ],
                        'type' => 'array',
                    ],
                    'product' => [
                        'type' => 'string',
                    ],
                    'withDataCompare' => [
                        'type' => 'boolean',
                    ],
                ],
                'required' => [
                    'organisation',
                    'accountShortId',
                    'product',
                    'articleType',
                ],
                'type' => 'object',
            ],
            'userId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
        ],
        'required' => [
            'redirectusKey',
            'source',
            'target',
            'contact',
            'userId',
        ],
        'type' => 'object',
    ];

    private ServiceRequestRelocationPayloadContact $contact;

    private ?ServiceRequestRelocationPayloadDomain $domain = null;

    private ?string $notes = null;

    private ?DateTime $preferredRelocationDate = null;

    private int|float $redirectusKey;

    private ServiceRequestRelocationPayloadSource $source;

    private ServiceRequestRelocationPayloadTarget $target;

    private string $userId;

    public function __construct(ServiceRequestRelocationPayloadContact $contact, int|float $redirectusKey, ServiceRequestRelocationPayloadSource $source, ServiceRequestRelocationPayloadTarget $target, string $userId)
    {
        $this->contact = $contact;
        $this->redirectusKey = $redirectusKey;
        $this->source = $source;
        $this->target = $target;
        $this->userId = $userId;
    }

    public function getContact(): ServiceRequestRelocationPayloadContact
    {
        return $this->contact;
    }

    public function getDomain(): ?ServiceRequestRelocationPayloadDomain
    {
        return $this->domain ?? null;
    }

    public function getNotes(): ?string
    {
        return $this->notes ?? null;
    }

    public function getPreferredRelocationDate(): ?DateTime
    {
        return $this->preferredRelocationDate ?? null;
    }

    public function getRedirectusKey(): int|float
    {
        return $this->redirectusKey;
    }

    public function getSource(): ServiceRequestRelocationPayloadSource
    {
        return $this->source;
    }

    public function getTarget(): ServiceRequestRelocationPayloadTarget
    {
        return $this->target;
    }

    public function getUserId(): string
    {
        return $this->userId;
    }

    public function withContact(ServiceRequestRelocationPayloadContact $contact): self
    {
        $clone = clone $this;
        $clone->contact = $contact;

        return $clone;
    }

    public function withDomain(ServiceRequestRelocationPayloadDomain $domain): self
    {
        $clone = clone $this;
        $clone->domain = $domain;

        return $clone;
    }

    public function withoutDomain(): self
    {
        $clone = clone $this;
        unset($clone->domain);

        return $clone;
    }

    public function withNotes(string $notes): self
    {
        $validator = new Validator();
        $validator->validate($notes, self::$internalValidationSchema['properties']['notes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->notes = $notes;

        return $clone;
    }

    public function withoutNotes(): self
    {
        $clone = clone $this;
        unset($clone->notes);

        return $clone;
    }

    public function withPreferredRelocationDate(DateTime $preferredRelocationDate): self
    {
        $clone = clone $this;
        $clone->preferredRelocationDate = $preferredRelocationDate;

        return $clone;
    }

    public function withoutPreferredRelocationDate(): self
    {
        $clone = clone $this;
        unset($clone->preferredRelocationDate);

        return $clone;
    }

    public function withRedirectusKey(int|float $redirectusKey): self
    {
        $validator = new Validator();
        $validator->validate($redirectusKey, self::$internalValidationSchema['properties']['redirectusKey']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->redirectusKey = $redirectusKey;

        return $clone;
    }

    public function withSource(ServiceRequestRelocationPayloadSource $source): self
    {
        $clone = clone $this;
        $clone->source = $source;

        return $clone;
    }

    public function withTarget(ServiceRequestRelocationPayloadTarget $target): self
    {
        $clone = clone $this;
        $clone->target = $target;

        return $clone;
    }

    public function withUserId(string $userId): self
    {
        $validator = new Validator();
        $validator->validate($userId, self::$internalValidationSchema['properties']['userId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->userId = $userId;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ServiceRequestRelocationPayload Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ServiceRequestRelocationPayload
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $contact = ServiceRequestRelocationPayloadContact::buildFromInput($input->{'contact'}, validate: $validate);
        $domain = null;
        if (isset($input->{'domain'})) {
            $domain = ServiceRequestRelocationPayloadDomain::buildFromInput($input->{'domain'}, validate: $validate);
        }
        $notes = null;
        if (isset($input->{'notes'})) {
            $notes = $input->{'notes'};
        }
        $preferredRelocationDate = null;
        if (isset($input->{'preferredRelocationDate'})) {
            $preferredRelocationDate = new DateTime($input->{'preferredRelocationDate'});
        }
        $redirectusKey = str_contains((string)($input->{'redirectusKey'}), '.') ? (float)($input->{'redirectusKey'}) : (int)($input->{'redirectusKey'});
        $source = ServiceRequestRelocationPayloadSource::buildFromInput($input->{'source'}, validate: $validate);
        $target = ServiceRequestRelocationPayloadTarget::buildFromInput($input->{'target'}, validate: $validate);
        $userId = $input->{'userId'};

        $obj = new self($contact, $redirectusKey, $source, $target, $userId);
        $obj->domain = $domain;
        $obj->notes = $notes;
        $obj->preferredRelocationDate = $preferredRelocationDate;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['contact'] = ($this->contact)->toJson();
        if (isset($this->domain)) {
            $output['domain'] = ($this->domain)->toJson();
        }
        if (isset($this->notes)) {
            $output['notes'] = $this->notes;
        }
        if (isset($this->preferredRelocationDate)) {
            $output['preferredRelocationDate'] = ($this->preferredRelocationDate)->format(DateTime::ATOM);
        }
        $output['redirectusKey'] = $this->redirectusKey;
        $output['source'] = ($this->source)->toJson();
        $output['target'] = ($this->target)->toJson();
        $output['userId'] = $this->userId;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->contact = clone $this->contact;
        if (isset($this->domain)) {
            $this->domain = clone $this->domain;
        }
        if (isset($this->preferredRelocationDate)) {
            $this->preferredRelocationDate = clone $this->preferredRelocationDate;
        }
        $this->source = clone $this->source;
        $this->target = clone $this->target;
    }
}
