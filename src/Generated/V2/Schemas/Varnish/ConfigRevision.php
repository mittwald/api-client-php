<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Varnish;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.varnish.ConfigRevision.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ConfigRevision
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'expire' => [
                'type' => 'integer',
            ],
            'files' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.varnish.ConfigFileRef',
                ],
                'type' => 'array',
            ],
            'note' => [
                'type' => 'string',
            ],
            'revision' => [
                'minimum' => 1,
                'type' => 'integer',
            ],
            'updated' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
        ],
        'required' => [
            'revision',
            'updated',
            'files',
        ],
        'type' => 'object',
    ];

    private ?int $expire = null;

    /**
     * @var ConfigFileRef[]
     */
    private array $files;

    private ?string $note = null;

    private int $revision;

    private DateTime $updated;

    /**
     * @param ConfigFileRef[] $files
     */
    public function __construct(array $files, int $revision, DateTime $updated)
    {
        $this->files = $files;
        $this->revision = $revision;
        $this->updated = $updated;
    }

    public function getExpire(): ?int
    {
        return $this->expire ?? null;
    }

    /**
     * @return ConfigFileRef[]
     */
    public function getFiles(): array
    {
        return $this->files;
    }

    public function getNote(): ?string
    {
        return $this->note ?? null;
    }

    public function getRevision(): int
    {
        return $this->revision;
    }

    public function getUpdated(): DateTime
    {
        return $this->updated;
    }

    public function withExpire(int $expire): self
    {
        $validator = new Validator();
        $validator->validate($expire, self::$schema['properties']['expire']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->expire = $expire;

        return $clone;
    }

    public function withoutExpire(): self
    {
        $clone = clone $this;
        unset($clone->expire);

        return $clone;
    }

    /**
     * @param ConfigFileRef[] $files
     */
    public function withFiles(array $files): self
    {
        $clone = clone $this;
        $clone->files = $files;

        return $clone;
    }

    public function withNote(string $note): self
    {
        $validator = new Validator();
        $validator->validate($note, self::$schema['properties']['note']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->note = $note;

        return $clone;
    }

    public function withoutNote(): self
    {
        $clone = clone $this;
        unset($clone->note);

        return $clone;
    }

    public function withRevision(int $revision): self
    {
        $validator = new Validator();
        $validator->validate($revision, self::$schema['properties']['revision']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->revision = $revision;

        return $clone;
    }

    public function withUpdated(DateTime $updated): self
    {
        $clone = clone $this;
        $clone->updated = $updated;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ConfigRevision Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ConfigRevision
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $expire = null;
        if (isset($input->{'expire'})) {
            $expire = (int)($input->{'expire'});
        }
        $files = array_map(fn (array|object $i): ConfigFileRef => ConfigFileRef::buildFromInput($i, validate: $validate), $input->{'files'});
        $note = null;
        if (isset($input->{'note'})) {
            $note = $input->{'note'};
        }
        $revision = (int)($input->{'revision'});
        $updated = new DateTime($input->{'updated'});

        $obj = new self($files, $revision, $updated);
        $obj->expire = $expire;
        $obj->note = $note;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->expire)) {
            $output['expire'] = $this->expire;
        }
        $output['files'] = array_map(fn (ConfigFileRef $i): array => $i->toJson(), $this->files);
        if (isset($this->note)) {
            $output['note'] = $this->note;
        }
        $output['revision'] = $this->revision;
        $output['updated'] = ($this->updated)->format(DateTime::ATOM);

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->updated = clone $this->updated;
    }
}
