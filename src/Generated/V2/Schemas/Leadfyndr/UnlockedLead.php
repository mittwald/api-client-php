<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.UnlockedLead.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class UnlockedLead
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'actualUrl' => [
                'type' => 'string',
            ],
            'businessFields' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'company' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.leadfyndr.DetailCompany',
            ],
            'contact' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.leadfyndr.Contact',
            ],
            'description' => [
                'type' => 'string',
            ],
            'domain' => [
                'type' => 'string',
            ],
            'hoster' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.leadfyndr.Hoster',
            ],
            'languages' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'leadId' => [
                'type' => 'string',
            ],
            'mainTechnology' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.leadfyndr.Technology',
            ],
            'metrics' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.leadfyndr.DetailMetrics',
            ],
            'potential' => [
                'format' => 'float',
                'maximum' => 1,
                'minimum' => 0,
                'type' => 'number',
            ],
            'reservationAllowed' => [
                'type' => 'boolean',
            ],
            'reservedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'scannedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'screenshot' => [
                'type' => 'string',
            ],
            'socialMedia' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.leadfyndr.SocialMedia',
                ],
                'type' => 'array',
            ],
            'technologies' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.leadfyndr.Technology',
                ],
                'type' => 'array',
            ],
            'unlockedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
        ],
        'required' => [
            'leadId',
            'potential',
            'screenshot',
            'company',
            'metrics',
            'businessFields',
            'description',
            'technologies',
            'domain',
            'actualUrl',
            'socialMedia',
            'contact',
            'hoster',
            'unlockedAt',
            'languages',
        ],
        'type' => 'object',
    ];

    private string $actualUrl;

    /**
     * @var string[]
     */
    private array $businessFields;

    private DetailCompany $company;

    private Contact $contact;

    private string $description;

    private string $domain;

    private Hoster $hoster;

    /**
     * @var string[]
     */
    private array $languages;

    private string $leadId;

    private ?Technology $mainTechnology = null;

    private DetailMetrics $metrics;

    private int|float $potential;

    private ?bool $reservationAllowed = null;

    private ?DateTime $reservedAt = null;

    private ?DateTime $scannedAt = null;

    private string $screenshot;

    /**
     * @var SocialMedia[]
     */
    private array $socialMedia;

    /**
     * @var Technology[]
     */
    private array $technologies;

    private DateTime $unlockedAt;

    /**
     * @param string[] $businessFields
     * @param string[] $languages
     * @param SocialMedia[] $socialMedia
     * @param Technology[] $technologies
     */
    public function __construct(string $actualUrl, array $businessFields, DetailCompany $company, Contact $contact, string $description, string $domain, Hoster $hoster, array $languages, string $leadId, DetailMetrics $metrics, int|float $potential, string $screenshot, array $socialMedia, array $technologies, DateTime $unlockedAt)
    {
        $this->actualUrl = $actualUrl;
        $this->businessFields = $businessFields;
        $this->company = $company;
        $this->contact = $contact;
        $this->description = $description;
        $this->domain = $domain;
        $this->hoster = $hoster;
        $this->languages = $languages;
        $this->leadId = $leadId;
        $this->metrics = $metrics;
        $this->potential = $potential;
        $this->screenshot = $screenshot;
        $this->socialMedia = $socialMedia;
        $this->technologies = $technologies;
        $this->unlockedAt = $unlockedAt;
    }

    public function getActualUrl(): string
    {
        return $this->actualUrl;
    }

    /**
     * @return string[]
     */
    public function getBusinessFields(): array
    {
        return $this->businessFields;
    }

    public function getCompany(): DetailCompany
    {
        return $this->company;
    }

    public function getContact(): Contact
    {
        return $this->contact;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getDomain(): string
    {
        return $this->domain;
    }

    public function getHoster(): Hoster
    {
        return $this->hoster;
    }

    /**
     * @return string[]
     */
    public function getLanguages(): array
    {
        return $this->languages;
    }

    public function getLeadId(): string
    {
        return $this->leadId;
    }

    public function getMainTechnology(): ?Technology
    {
        return $this->mainTechnology ?? null;
    }

    public function getMetrics(): DetailMetrics
    {
        return $this->metrics;
    }

    public function getPotential(): int|float
    {
        return $this->potential;
    }

    public function getReservationAllowed(): ?bool
    {
        return $this->reservationAllowed ?? null;
    }

    public function getReservedAt(): ?DateTime
    {
        return $this->reservedAt ?? null;
    }

    public function getScannedAt(): ?DateTime
    {
        return $this->scannedAt ?? null;
    }

    public function getScreenshot(): string
    {
        return $this->screenshot;
    }

    /**
     * @return SocialMedia[]
     */
    public function getSocialMedia(): array
    {
        return $this->socialMedia;
    }

    /**
     * @return Technology[]
     */
    public function getTechnologies(): array
    {
        return $this->technologies;
    }

    public function getUnlockedAt(): DateTime
    {
        return $this->unlockedAt;
    }

    public function withActualUrl(string $actualUrl): self
    {
        $validator = new Validator();
        $validator->validate($actualUrl, self::$internalValidationSchema['properties']['actualUrl']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->actualUrl = $actualUrl;

        return $clone;
    }

    /**
     * @param string[] $businessFields
     */
    public function withBusinessFields(array $businessFields): self
    {
        $validator = new Validator();
        $validator->validate($businessFields, self::$internalValidationSchema['properties']['businessFields']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->businessFields = $businessFields;

        return $clone;
    }

    public function withCompany(DetailCompany $company): self
    {
        $clone = clone $this;
        $clone->company = $company;

        return $clone;
    }

    public function withContact(Contact $contact): self
    {
        $clone = clone $this;
        $clone->contact = $contact;

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$internalValidationSchema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withDomain(string $domain): self
    {
        $validator = new Validator();
        $validator->validate($domain, self::$internalValidationSchema['properties']['domain']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->domain = $domain;

        return $clone;
    }

    public function withHoster(Hoster $hoster): self
    {
        $clone = clone $this;
        $clone->hoster = $hoster;

        return $clone;
    }

    /**
     * @param string[] $languages
     */
    public function withLanguages(array $languages): self
    {
        $validator = new Validator();
        $validator->validate($languages, self::$internalValidationSchema['properties']['languages']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->languages = $languages;

        return $clone;
    }

    public function withLeadId(string $leadId): self
    {
        $validator = new Validator();
        $validator->validate($leadId, self::$internalValidationSchema['properties']['leadId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->leadId = $leadId;

        return $clone;
    }

    public function withMainTechnology(Technology $mainTechnology): self
    {
        $clone = clone $this;
        $clone->mainTechnology = $mainTechnology;

        return $clone;
    }

    public function withoutMainTechnology(): self
    {
        $clone = clone $this;
        unset($clone->mainTechnology);

        return $clone;
    }

    public function withMetrics(DetailMetrics $metrics): self
    {
        $clone = clone $this;
        $clone->metrics = $metrics;

        return $clone;
    }

    public function withPotential(int|float $potential): self
    {
        $validator = new Validator();
        $validator->validate($potential, self::$internalValidationSchema['properties']['potential']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->potential = $potential;

        return $clone;
    }

    public function withReservationAllowed(bool $reservationAllowed): self
    {
        $validator = new Validator();
        $validator->validate($reservationAllowed, self::$internalValidationSchema['properties']['reservationAllowed']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->reservationAllowed = $reservationAllowed;

        return $clone;
    }

    public function withoutReservationAllowed(): self
    {
        $clone = clone $this;
        unset($clone->reservationAllowed);

        return $clone;
    }

    public function withReservedAt(DateTime $reservedAt): self
    {
        $clone = clone $this;
        $clone->reservedAt = $reservedAt;

        return $clone;
    }

    public function withoutReservedAt(): self
    {
        $clone = clone $this;
        unset($clone->reservedAt);

        return $clone;
    }

    public function withScannedAt(DateTime $scannedAt): self
    {
        $clone = clone $this;
        $clone->scannedAt = $scannedAt;

        return $clone;
    }

    public function withoutScannedAt(): self
    {
        $clone = clone $this;
        unset($clone->scannedAt);

        return $clone;
    }

    public function withScreenshot(string $screenshot): self
    {
        $validator = new Validator();
        $validator->validate($screenshot, self::$internalValidationSchema['properties']['screenshot']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->screenshot = $screenshot;

        return $clone;
    }

    /**
     * @param SocialMedia[] $socialMedia
     */
    public function withSocialMedia(array $socialMedia): self
    {
        $clone = clone $this;
        $clone->socialMedia = $socialMedia;

        return $clone;
    }

    /**
     * @param Technology[] $technologies
     */
    public function withTechnologies(array $technologies): self
    {
        $clone = clone $this;
        $clone->technologies = $technologies;

        return $clone;
    }

    public function withUnlockedAt(DateTime $unlockedAt): self
    {
        $clone = clone $this;
        $clone->unlockedAt = $unlockedAt;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return UnlockedLead Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): UnlockedLead
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $actualUrl = $input->{'actualUrl'};
        $businessFields = $input->{'businessFields'};
        $company = DetailCompany::buildFromInput($input->{'company'}, validate: $validate);
        $contact = Contact::buildFromInput($input->{'contact'}, validate: $validate);
        $description = $input->{'description'};
        $domain = $input->{'domain'};
        $hoster = Hoster::buildFromInput($input->{'hoster'}, validate: $validate);
        $languages = $input->{'languages'};
        $leadId = $input->{'leadId'};
        $mainTechnology = null;
        if (isset($input->{'mainTechnology'})) {
            $mainTechnology = Technology::buildFromInput($input->{'mainTechnology'}, validate: $validate);
        }
        $metrics = DetailMetrics::buildFromInput($input->{'metrics'}, validate: $validate);
        $potential = str_contains((string)($input->{'potential'}), '.') ? (float)($input->{'potential'}) : (int)($input->{'potential'});
        $reservationAllowed = null;
        if (isset($input->{'reservationAllowed'})) {
            $reservationAllowed = (bool)($input->{'reservationAllowed'});
        }
        $reservedAt = null;
        if (isset($input->{'reservedAt'})) {
            $reservedAt = new DateTime($input->{'reservedAt'});
        }
        $scannedAt = null;
        if (isset($input->{'scannedAt'})) {
            $scannedAt = new DateTime($input->{'scannedAt'});
        }
        $screenshot = $input->{'screenshot'};
        $socialMedia = array_map(fn (array|object $i): SocialMedia => SocialMedia::buildFromInput($i, validate: $validate), $input->{'socialMedia'});
        $technologies = array_map(fn (array|object $i): Technology => Technology::buildFromInput($i, validate: $validate), $input->{'technologies'});
        $unlockedAt = new DateTime($input->{'unlockedAt'});

        $obj = new self($actualUrl, $businessFields, $company, $contact, $description, $domain, $hoster, $languages, $leadId, $metrics, $potential, $screenshot, $socialMedia, $technologies, $unlockedAt);
        $obj->mainTechnology = $mainTechnology;
        $obj->reservationAllowed = $reservationAllowed;
        $obj->reservedAt = $reservedAt;
        $obj->scannedAt = $scannedAt;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['actualUrl'] = $this->actualUrl;
        $output['businessFields'] = $this->businessFields;
        $output['company'] = $this->company->toJson();
        $output['contact'] = $this->contact->toJson();
        $output['description'] = $this->description;
        $output['domain'] = $this->domain;
        $output['hoster'] = $this->hoster->toJson();
        $output['languages'] = $this->languages;
        $output['leadId'] = $this->leadId;
        if (isset($this->mainTechnology)) {
            $output['mainTechnology'] = $this->mainTechnology->toJson();
        }
        $output['metrics'] = $this->metrics->toJson();
        $output['potential'] = $this->potential;
        if (isset($this->reservationAllowed)) {
            $output['reservationAllowed'] = $this->reservationAllowed;
        }
        if (isset($this->reservedAt)) {
            $output['reservedAt'] = ($this->reservedAt)->format(DateTime::ATOM);
        }
        if (isset($this->scannedAt)) {
            $output['scannedAt'] = ($this->scannedAt)->format(DateTime::ATOM);
        }
        $output['screenshot'] = $this->screenshot;
        $output['socialMedia'] = array_map(fn (SocialMedia $i): array => $i->toJson(), $this->socialMedia);
        $output['technologies'] = array_map(fn (Technology $i): array => $i->toJson(), $this->technologies);
        $output['unlockedAt'] = ($this->unlockedAt)->format(DateTime::ATOM);

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->reservedAt)) {
            $this->reservedAt = clone $this->reservedAt;
        }
        if (isset($this->scannedAt)) {
            $this->scannedAt = clone $this->scannedAt;
        }
        $this->unlockedAt = clone $this->unlockedAt;
    }
}
