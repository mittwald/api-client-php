<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.LeadsExport.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class LeadsExport
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'customerId' => [
                'type' => 'string',
            ],
            'exportId' => [
                'type' => 'string',
            ],
            'exportedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'exportedBy' => [
                'properties' => [
                    'avatarRefId' => [
                        'type' => 'string',
                    ],
                    'person' => [
                        'properties' => [
                            'firstName' => [
                                'type' => 'string',
                            ],
                            'lastName' => [
                                'type' => 'string',
                            ],
                        ],
                        'required' => [
                            'firstName',
                            'lastName',
                        ],
                        'type' => 'object',
                    ],
                    'required' => [
                        'userId',
                    ],
                    'userId' => [
                        'type' => 'string',
                    ],
                ],
                'type' => 'object',
            ],
            'leadCount' => [
                'description' => 'The number of leads included in the export.',
                'format' => 'int32',
                'type' => 'integer',
            ],
        ],
        'required' => [
            'exportId',
            'customerId',
            'exportedAt',
            'leadCount',
        ],
        'type' => 'object',
    ];

    private string $customerId;

    private string $exportId;

    private DateTime $exportedAt;

    private ?LeadsExportExportedBy $exportedBy = null;

    /**
     * The number of leads included in the export.
     */
    private int $leadCount;

    public function __construct(string $customerId, string $exportId, DateTime $exportedAt, int $leadCount)
    {
        $this->customerId = $customerId;
        $this->exportId = $exportId;
        $this->exportedAt = $exportedAt;
        $this->leadCount = $leadCount;
    }

    public function getCustomerId(): string
    {
        return $this->customerId;
    }

    public function getExportId(): string
    {
        return $this->exportId;
    }

    public function getExportedAt(): DateTime
    {
        return $this->exportedAt;
    }

    public function getExportedBy(): ?LeadsExportExportedBy
    {
        return $this->exportedBy ?? null;
    }

    public function getLeadCount(): int
    {
        return $this->leadCount;
    }

    public function withCustomerId(string $customerId): self
    {
        $validator = new Validator();
        $validator->validate($customerId, self::$internalValidationSchema['properties']['customerId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->customerId = $customerId;

        return $clone;
    }

    public function withExportId(string $exportId): self
    {
        $validator = new Validator();
        $validator->validate($exportId, self::$internalValidationSchema['properties']['exportId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->exportId = $exportId;

        return $clone;
    }

    public function withExportedAt(DateTime $exportedAt): self
    {
        $clone = clone $this;
        $clone->exportedAt = $exportedAt;

        return $clone;
    }

    public function withExportedBy(LeadsExportExportedBy $exportedBy): self
    {
        $clone = clone $this;
        $clone->exportedBy = $exportedBy;

        return $clone;
    }

    public function withoutExportedBy(): self
    {
        $clone = clone $this;
        unset($clone->exportedBy);

        return $clone;
    }

    public function withLeadCount(int $leadCount): self
    {
        $validator = new Validator();
        $validator->validate($leadCount, self::$internalValidationSchema['properties']['leadCount']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->leadCount = $leadCount;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return LeadsExport Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): LeadsExport
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $customerId = $input->{'customerId'};
        $exportId = $input->{'exportId'};
        $exportedAt = new DateTime($input->{'exportedAt'});
        $exportedBy = null;
        if (isset($input->{'exportedBy'})) {
            $exportedBy = LeadsExportExportedBy::buildFromInput($input->{'exportedBy'}, validate: $validate);
        }
        $leadCount = (int)($input->{'leadCount'});

        $obj = new self($customerId, $exportId, $exportedAt, $leadCount);
        $obj->exportedBy = $exportedBy;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['customerId'] = $this->customerId;
        $output['exportId'] = $this->exportId;
        $output['exportedAt'] = ($this->exportedAt)->format(DateTime::ATOM);
        if (isset($this->exportedBy)) {
            $output['exportedBy'] = ($this->exportedBy)->toJson();
        }
        $output['leadCount'] = $this->leadCount;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->exportedAt = clone $this->exportedAt;
        if (isset($this->exportedBy)) {
            $this->exportedBy = clone $this->exportedBy;
        }
    }
}
