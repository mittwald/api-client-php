<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.TariffOptions.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class TariffOptionsReservation
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'available' => [
                'minimum' => 0,
                'type' => 'number',
            ],
            'tariffLimit' => [
                'minimum' => 0,
                'type' => 'number',
            ],
            'used' => [
                'minimum' => 0,
                'type' => 'number',
            ],
        ],
        'required' => [
            'used',
            'available',
            'tariffLimit',
        ],
        'type' => 'object',
    ];

    private int|float $available;

    private int|float $tariffLimit;

    private int|float $used;

    public function __construct(int|float $available, int|float $tariffLimit, int|float $used)
    {
        $this->available = $available;
        $this->tariffLimit = $tariffLimit;
        $this->used = $used;
    }

    public function getAvailable(): int|float
    {
        return $this->available;
    }

    public function getTariffLimit(): int|float
    {
        return $this->tariffLimit;
    }

    public function getUsed(): int|float
    {
        return $this->used;
    }

    public function withAvailable(int|float $available): self
    {
        $validator = new Validator();
        $validator->validate($available, self::$internalValidationSchema['properties']['available']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->available = $available;

        return $clone;
    }

    public function withTariffLimit(int|float $tariffLimit): self
    {
        $validator = new Validator();
        $validator->validate($tariffLimit, self::$internalValidationSchema['properties']['tariffLimit']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->tariffLimit = $tariffLimit;

        return $clone;
    }

    public function withUsed(int|float $used): self
    {
        $validator = new Validator();
        $validator->validate($used, self::$internalValidationSchema['properties']['used']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->used = $used;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return TariffOptionsReservation Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): TariffOptionsReservation
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $available = str_contains((string)($input->{'available'}), '.') ? (float)($input->{'available'}) : (int)($input->{'available'});
        $tariffLimit = str_contains((string)($input->{'tariffLimit'}), '.') ? (float)($input->{'tariffLimit'}) : (int)($input->{'tariffLimit'});
        $used = str_contains((string)($input->{'used'}), '.') ? (float)($input->{'used'}) : (int)($input->{'used'});

        $obj = new self($available, $tariffLimit, $used);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['available'] = $this->available;
        $output['tariffLimit'] = $this->tariffLimit;
        $output['used'] = $this->used;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
