<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.Lighthouse.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Lighthouse
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'accessibility' => [
                'format' => 'float',
                'maximum' => 1,
                'minimum' => 0,
                'type' => 'number',
            ],
            'bestPractice' => [
                'format' => 'float',
                'maximum' => 1,
                'minimum' => 0,
                'type' => 'number',
            ],
            'cumulativeLayoutShift' => [
                'format' => 'float',
                'minimum' => 0,
                'type' => 'number',
            ],
            'firstContentfulPaint' => [
                'format' => 'float',
                'minimum' => 0,
                'type' => 'number',
            ],
            'largestContentfulPaint' => [
                'format' => 'float',
                'minimum' => 0,
                'type' => 'number',
            ],
            'performance' => [
                'format' => 'float',
                'maximum' => 1,
                'minimum' => 0,
                'type' => 'number',
            ],
            'seo' => [
                'format' => 'float',
                'maximum' => 1,
                'minimum' => 0,
                'type' => 'number',
            ],
            'totalBlockingTime' => [
                'format' => 'float',
                'minimum' => 0,
                'type' => 'number',
            ],
        ],
        'type' => 'object',
    ];

    private int|float|null $accessibility = null;

    private int|float|null $bestPractice = null;

    private int|float|null $cumulativeLayoutShift = null;

    private int|float|null $firstContentfulPaint = null;

    private int|float|null $largestContentfulPaint = null;

    private int|float|null $performance = null;

    private int|float|null $seo = null;

    private int|float|null $totalBlockingTime = null;

    /**
     *
     */
    public function __construct()
    {
    }

    public function getAccessibility(): int|float|null
    {
        return $this->accessibility;
    }

    public function getBestPractice(): int|float|null
    {
        return $this->bestPractice;
    }

    public function getCumulativeLayoutShift(): int|float|null
    {
        return $this->cumulativeLayoutShift;
    }

    public function getFirstContentfulPaint(): int|float|null
    {
        return $this->firstContentfulPaint;
    }

    public function getLargestContentfulPaint(): int|float|null
    {
        return $this->largestContentfulPaint;
    }

    public function getPerformance(): int|float|null
    {
        return $this->performance;
    }

    public function getSeo(): int|float|null
    {
        return $this->seo;
    }

    public function getTotalBlockingTime(): int|float|null
    {
        return $this->totalBlockingTime;
    }

    public function withAccessibility(int|float $accessibility): self
    {
        $validator = new Validator();
        $validator->validate($accessibility, self::$internalValidationSchema['properties']['accessibility']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->accessibility = $accessibility;

        return $clone;
    }

    public function withoutAccessibility(): self
    {
        $clone = clone $this;
        unset($clone->accessibility);

        return $clone;
    }

    public function withBestPractice(int|float $bestPractice): self
    {
        $validator = new Validator();
        $validator->validate($bestPractice, self::$internalValidationSchema['properties']['bestPractice']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->bestPractice = $bestPractice;

        return $clone;
    }

    public function withoutBestPractice(): self
    {
        $clone = clone $this;
        unset($clone->bestPractice);

        return $clone;
    }

    public function withCumulativeLayoutShift(int|float $cumulativeLayoutShift): self
    {
        $validator = new Validator();
        $validator->validate($cumulativeLayoutShift, self::$internalValidationSchema['properties']['cumulativeLayoutShift']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->cumulativeLayoutShift = $cumulativeLayoutShift;

        return $clone;
    }

    public function withoutCumulativeLayoutShift(): self
    {
        $clone = clone $this;
        unset($clone->cumulativeLayoutShift);

        return $clone;
    }

    public function withFirstContentfulPaint(int|float $firstContentfulPaint): self
    {
        $validator = new Validator();
        $validator->validate($firstContentfulPaint, self::$internalValidationSchema['properties']['firstContentfulPaint']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->firstContentfulPaint = $firstContentfulPaint;

        return $clone;
    }

    public function withoutFirstContentfulPaint(): self
    {
        $clone = clone $this;
        unset($clone->firstContentfulPaint);

        return $clone;
    }

    public function withLargestContentfulPaint(int|float $largestContentfulPaint): self
    {
        $validator = new Validator();
        $validator->validate($largestContentfulPaint, self::$internalValidationSchema['properties']['largestContentfulPaint']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->largestContentfulPaint = $largestContentfulPaint;

        return $clone;
    }

    public function withoutLargestContentfulPaint(): self
    {
        $clone = clone $this;
        unset($clone->largestContentfulPaint);

        return $clone;
    }

    public function withPerformance(int|float $performance): self
    {
        $validator = new Validator();
        $validator->validate($performance, self::$internalValidationSchema['properties']['performance']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->performance = $performance;

        return $clone;
    }

    public function withoutPerformance(): self
    {
        $clone = clone $this;
        unset($clone->performance);

        return $clone;
    }

    public function withSeo(int|float $seo): self
    {
        $validator = new Validator();
        $validator->validate($seo, self::$internalValidationSchema['properties']['seo']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->seo = $seo;

        return $clone;
    }

    public function withoutSeo(): self
    {
        $clone = clone $this;
        unset($clone->seo);

        return $clone;
    }

    public function withTotalBlockingTime(int|float $totalBlockingTime): self
    {
        $validator = new Validator();
        $validator->validate($totalBlockingTime, self::$internalValidationSchema['properties']['totalBlockingTime']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->totalBlockingTime = $totalBlockingTime;

        return $clone;
    }

    public function withoutTotalBlockingTime(): self
    {
        $clone = clone $this;
        unset($clone->totalBlockingTime);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Lighthouse Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Lighthouse
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $accessibility = null;
        if (isset($input->{'accessibility'})) {
            $accessibility = str_contains((string)($input->{'accessibility'}), '.') ? (float)($input->{'accessibility'}) : (int)($input->{'accessibility'});
        }
        $bestPractice = null;
        if (isset($input->{'bestPractice'})) {
            $bestPractice = str_contains((string)($input->{'bestPractice'}), '.') ? (float)($input->{'bestPractice'}) : (int)($input->{'bestPractice'});
        }
        $cumulativeLayoutShift = null;
        if (isset($input->{'cumulativeLayoutShift'})) {
            $cumulativeLayoutShift = str_contains((string)($input->{'cumulativeLayoutShift'}), '.') ? (float)($input->{'cumulativeLayoutShift'}) : (int)($input->{'cumulativeLayoutShift'});
        }
        $firstContentfulPaint = null;
        if (isset($input->{'firstContentfulPaint'})) {
            $firstContentfulPaint = str_contains((string)($input->{'firstContentfulPaint'}), '.') ? (float)($input->{'firstContentfulPaint'}) : (int)($input->{'firstContentfulPaint'});
        }
        $largestContentfulPaint = null;
        if (isset($input->{'largestContentfulPaint'})) {
            $largestContentfulPaint = str_contains((string)($input->{'largestContentfulPaint'}), '.') ? (float)($input->{'largestContentfulPaint'}) : (int)($input->{'largestContentfulPaint'});
        }
        $performance = null;
        if (isset($input->{'performance'})) {
            $performance = str_contains((string)($input->{'performance'}), '.') ? (float)($input->{'performance'}) : (int)($input->{'performance'});
        }
        $seo = null;
        if (isset($input->{'seo'})) {
            $seo = str_contains((string)($input->{'seo'}), '.') ? (float)($input->{'seo'}) : (int)($input->{'seo'});
        }
        $totalBlockingTime = null;
        if (isset($input->{'totalBlockingTime'})) {
            $totalBlockingTime = str_contains((string)($input->{'totalBlockingTime'}), '.') ? (float)($input->{'totalBlockingTime'}) : (int)($input->{'totalBlockingTime'});
        }

        $obj = new self();
        $obj->accessibility = $accessibility;
        $obj->bestPractice = $bestPractice;
        $obj->cumulativeLayoutShift = $cumulativeLayoutShift;
        $obj->firstContentfulPaint = $firstContentfulPaint;
        $obj->largestContentfulPaint = $largestContentfulPaint;
        $obj->performance = $performance;
        $obj->seo = $seo;
        $obj->totalBlockingTime = $totalBlockingTime;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->accessibility)) {
            $output['accessibility'] = $this->accessibility;
        }
        if (isset($this->bestPractice)) {
            $output['bestPractice'] = $this->bestPractice;
        }
        if (isset($this->cumulativeLayoutShift)) {
            $output['cumulativeLayoutShift'] = $this->cumulativeLayoutShift;
        }
        if (isset($this->firstContentfulPaint)) {
            $output['firstContentfulPaint'] = $this->firstContentfulPaint;
        }
        if (isset($this->largestContentfulPaint)) {
            $output['largestContentfulPaint'] = $this->largestContentfulPaint;
        }
        if (isset($this->performance)) {
            $output['performance'] = $this->performance;
        }
        if (isset($this->seo)) {
            $output['seo'] = $this->seo;
        }
        if (isset($this->totalBlockingTime)) {
            $output['totalBlockingTime'] = $this->totalBlockingTime;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
