<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.LeadsExportExporter.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class LeadsExportExporter
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'avatarRefId' => [
                'type' => 'string',
            ],
            'person' => [
                'properties' => [
                    'firstName' => [
                        'type' => 'string',
                    ],
                    'lastName' => [
                        'type' => 'string',
                    ],
                ],
                'required' => [
                    'firstName',
                    'lastName',
                ],
                'type' => 'object',
            ],
            'userId' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'userId',
        ],
        'type' => 'object',
    ];

    private ?string $avatarRefId = null;

    private ?LeadsExportExporterPerson $person = null;

    private string $userId;

    public function __construct(string $userId)
    {
        $this->userId = $userId;
    }

    public function getAvatarRefId(): ?string
    {
        return $this->avatarRefId ?? null;
    }

    public function getPerson(): ?LeadsExportExporterPerson
    {
        return $this->person ?? null;
    }

    public function getUserId(): string
    {
        return $this->userId;
    }

    public function withAvatarRefId(string $avatarRefId): self
    {
        $validator = new Validator();
        $validator->validate($avatarRefId, self::$internalValidationSchema['properties']['avatarRefId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->avatarRefId = $avatarRefId;

        return $clone;
    }

    public function withoutAvatarRefId(): self
    {
        $clone = clone $this;
        unset($clone->avatarRefId);

        return $clone;
    }

    public function withPerson(LeadsExportExporterPerson $person): self
    {
        $clone = clone $this;
        $clone->person = $person;

        return $clone;
    }

    public function withoutPerson(): self
    {
        $clone = clone $this;
        unset($clone->person);

        return $clone;
    }

    public function withUserId(string $userId): self
    {
        $validator = new Validator();
        $validator->validate($userId, self::$internalValidationSchema['properties']['userId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->userId = $userId;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return LeadsExportExporter Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): LeadsExportExporter
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $avatarRefId = null;
        if (isset($input->{'avatarRefId'})) {
            $avatarRefId = $input->{'avatarRefId'};
        }
        $person = null;
        if (isset($input->{'person'})) {
            $person = LeadsExportExporterPerson::buildFromInput($input->{'person'}, validate: $validate);
        }
        $userId = $input->{'userId'};

        $obj = new self($userId);
        $obj->avatarRefId = $avatarRefId;
        $obj->person = $person;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->avatarRefId)) {
            $output['avatarRefId'] = $this->avatarRefId;
        }
        if (isset($this->person)) {
            $output['person'] = ($this->person)->toJson();
        }
        $output['userId'] = $this->userId;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->person)) {
            $this->person = clone $this->person;
        }
    }
}
