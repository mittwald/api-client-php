<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.BasicCompany.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class BasicCompany
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'county' => [
                'type' => 'string',
            ],
            'employeeCount' => [
                'format' => 'int64',
                'type' => 'integer',
            ],
            'foundingYear' => [
                'type' => 'number',
            ],
            'salesVolume' => [
                'format' => 'int64',
                'type' => 'integer',
            ],
        ],
        'required' => [
            'county',
        ],
        'type' => 'object',
    ];

    private string $county;

    private ?int $employeeCount = null;

    private int|float|null $foundingYear = null;

    private ?int $salesVolume = null;

    public function __construct(string $county)
    {
        $this->county = $county;
    }

    public function getCounty(): string
    {
        return $this->county;
    }

    public function getEmployeeCount(): ?int
    {
        return $this->employeeCount ?? null;
    }

    public function getFoundingYear(): int|float|null
    {
        return $this->foundingYear;
    }

    public function getSalesVolume(): ?int
    {
        return $this->salesVolume ?? null;
    }

    public function withCounty(string $county): self
    {
        $validator = new Validator();
        $validator->validate($county, self::$internalValidationSchema['properties']['county']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->county = $county;

        return $clone;
    }

    public function withEmployeeCount(int $employeeCount): self
    {
        $validator = new Validator();
        $validator->validate($employeeCount, self::$internalValidationSchema['properties']['employeeCount']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->employeeCount = $employeeCount;

        return $clone;
    }

    public function withoutEmployeeCount(): self
    {
        $clone = clone $this;
        unset($clone->employeeCount);

        return $clone;
    }

    public function withFoundingYear(int|float $foundingYear): self
    {
        $validator = new Validator();
        $validator->validate($foundingYear, self::$internalValidationSchema['properties']['foundingYear']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->foundingYear = $foundingYear;

        return $clone;
    }

    public function withoutFoundingYear(): self
    {
        $clone = clone $this;
        unset($clone->foundingYear);

        return $clone;
    }

    public function withSalesVolume(int $salesVolume): self
    {
        $validator = new Validator();
        $validator->validate($salesVolume, self::$internalValidationSchema['properties']['salesVolume']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->salesVolume = $salesVolume;

        return $clone;
    }

    public function withoutSalesVolume(): self
    {
        $clone = clone $this;
        unset($clone->salesVolume);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return BasicCompany Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): BasicCompany
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $county = $input->{'county'};
        $employeeCount = null;
        if (isset($input->{'employeeCount'})) {
            $employeeCount = (int)($input->{'employeeCount'});
        }
        $foundingYear = null;
        if (isset($input->{'foundingYear'})) {
            $foundingYear = str_contains((string)($input->{'foundingYear'}), '.') ? (float)($input->{'foundingYear'}) : (int)($input->{'foundingYear'});
        }
        $salesVolume = null;
        if (isset($input->{'salesVolume'})) {
            $salesVolume = (int)($input->{'salesVolume'});
        }

        $obj = new self($county);
        $obj->employeeCount = $employeeCount;
        $obj->foundingYear = $foundingYear;
        $obj->salesVolume = $salesVolume;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['county'] = $this->county;
        if (isset($this->employeeCount)) {
            $output['employeeCount'] = $this->employeeCount;
        }
        if (isset($this->foundingYear)) {
            $output['foundingYear'] = $this->foundingYear;
        }
        if (isset($this->salesVolume)) {
            $output['salesVolume'] = $this->salesVolume;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
