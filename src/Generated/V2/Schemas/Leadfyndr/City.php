<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.City.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class City
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'city' => [
                'type' => 'string',
            ],
            'country' => [
                'type' => 'string',
            ],
            'county' => [
                'type' => 'string',
            ],
            'postCode' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'country',
            'postCode',
            'city',
        ],
        'type' => 'object',
    ];

    private string $city;

    private string $country;

    private ?string $county = null;

    private string $postCode;

    public function __construct(string $city, string $country, string $postCode)
    {
        $this->city = $city;
        $this->country = $country;
        $this->postCode = $postCode;
    }

    public function getCity(): string
    {
        return $this->city;
    }

    public function getCountry(): string
    {
        return $this->country;
    }

    public function getCounty(): ?string
    {
        return $this->county ?? null;
    }

    public function getPostCode(): string
    {
        return $this->postCode;
    }

    public function withCity(string $city): self
    {
        $validator = new Validator();
        $validator->validate($city, self::$internalValidationSchema['properties']['city']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->city = $city;

        return $clone;
    }

    public function withCountry(string $country): self
    {
        $validator = new Validator();
        $validator->validate($country, self::$internalValidationSchema['properties']['country']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->country = $country;

        return $clone;
    }

    public function withCounty(string $county): self
    {
        $validator = new Validator();
        $validator->validate($county, self::$internalValidationSchema['properties']['county']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->county = $county;

        return $clone;
    }

    public function withoutCounty(): self
    {
        $clone = clone $this;
        unset($clone->county);

        return $clone;
    }

    public function withPostCode(string $postCode): self
    {
        $validator = new Validator();
        $validator->validate($postCode, self::$internalValidationSchema['properties']['postCode']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->postCode = $postCode;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return City Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): City
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $city = $input->{'city'};
        $country = $input->{'country'};
        $county = null;
        if (isset($input->{'county'})) {
            $county = $input->{'county'};
        }
        $postCode = $input->{'postCode'};

        $obj = new self($city, $country, $postCode);
        $obj->county = $county;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['city'] = $this->city;
        $output['country'] = $this->country;
        if (isset($this->county)) {
            $output['county'] = $this->county;
        }
        $output['postCode'] = $this->postCode;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
