<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.Technology.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Technology
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'categories' => [
                'items' => [
                    'properties' => [
                        'name' => [
                            'type' => 'string',
                        ],
                        'parentCategories' => [
                            'items' => [
                                'type' => 'string',
                            ],
                            'type' => 'array',
                        ],
                        'priority' => [
                            'type' => 'number',
                        ],
                    ],
                    'required' => [
                        'name',
                        'priority',
                    ],
                    'type' => 'object',
                ],
                'type' => 'array',
            ],
            'categoryPriority' => [
                'type' => 'integer',
            ],
            'name' => [
                'type' => 'string',
            ],
            'version' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'name',
            'categoryPriority',
        ],
        'type' => 'object',
    ];

    /**
     * @var TechnologyCategoriesItem[]|null
     */
    private ?array $categories = null;

    private int $categoryPriority;

    private string $name;

    private ?string $version = null;

    public function __construct(int $categoryPriority, string $name)
    {
        $this->categoryPriority = $categoryPriority;
        $this->name = $name;
    }

    /**
     * @return TechnologyCategoriesItem[]|null
     */
    public function getCategories(): ?array
    {
        return $this->categories ?? null;
    }

    public function getCategoryPriority(): int
    {
        return $this->categoryPriority;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getVersion(): ?string
    {
        return $this->version ?? null;
    }

    /**
     * @param TechnologyCategoriesItem[] $categories
     */
    public function withCategories(array $categories): self
    {
        $clone = clone $this;
        $clone->categories = $categories;

        return $clone;
    }

    public function withoutCategories(): self
    {
        $clone = clone $this;
        unset($clone->categories);

        return $clone;
    }

    public function withCategoryPriority(int $categoryPriority): self
    {
        $validator = new Validator();
        $validator->validate($categoryPriority, self::$internalValidationSchema['properties']['categoryPriority']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->categoryPriority = $categoryPriority;

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, self::$internalValidationSchema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withVersion(string $version): self
    {
        $validator = new Validator();
        $validator->validate($version, self::$internalValidationSchema['properties']['version']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->version = $version;

        return $clone;
    }

    public function withoutVersion(): self
    {
        $clone = clone $this;
        unset($clone->version);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Technology Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Technology
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $categories = null;
        if (isset($input->{'categories'})) {
            $categories = array_map(fn (array|object $i): TechnologyCategoriesItem => TechnologyCategoriesItem::buildFromInput($i, validate: $validate), $input->{'categories'});
        }
        $categoryPriority = (int)($input->{'categoryPriority'});
        $name = $input->{'name'};
        $version = null;
        if (isset($input->{'version'})) {
            $version = $input->{'version'};
        }

        $obj = new self($categoryPriority, $name);
        $obj->categories = $categories;
        $obj->version = $version;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->categories)) {
            $output['categories'] = array_map(fn (TechnologyCategoriesItem $i) => $i->toJson(), $this->categories);
        }
        $output['categoryPriority'] = $this->categoryPriority;
        $output['name'] = $this->name;
        if (isset($this->version)) {
            $output['version'] = $this->version;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->categories)) {
            $this->categories = array_map(fn (TechnologyCategoriesItem $i) => clone $i, $this->categories);
        }
    }
}
