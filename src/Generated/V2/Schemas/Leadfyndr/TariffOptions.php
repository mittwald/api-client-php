<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Leadfyndr;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.leadfyndr.TariffOptions.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class TariffOptions
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'nextUnlockRenewalDate' => [
                'format' => 'date',
                'type' => 'string',
            ],
            'reservation' => [
                'properties' => [
                    'available' => [
                        'minimum' => 0,
                        'type' => 'number',
                    ],
                    'tariffLimit' => [
                        'minimum' => 0,
                        'type' => 'number',
                    ],
                    'used' => [
                        'minimum' => 0,
                        'type' => 'number',
                    ],
                ],
                'required' => [
                    'used',
                    'available',
                    'tariffLimit',
                ],
                'type' => 'object',
            ],
            'unlocked' => [
                'properties' => [
                    'available' => [
                        'minimum' => 0,
                        'type' => 'number',
                    ],
                    'tariffLimit' => [
                        'minimum' => 0,
                        'type' => 'number',
                    ],
                    'used' => [
                        'minimum' => 0,
                        'type' => 'number',
                    ],
                ],
                'required' => [
                    'used',
                    'available',
                    'tariffLimit',
                ],
                'type' => 'object',
            ],
        ],
        'required' => [
            'unlocked',
            'reservation',
        ],
        'type' => 'object',
    ];

    private ?string $nextUnlockRenewalDate = null;

    private TariffOptionsReservation $reservation;

    private TariffOptionsUnlocked $unlocked;

    public function __construct(TariffOptionsReservation $reservation, TariffOptionsUnlocked $unlocked)
    {
        $this->reservation = $reservation;
        $this->unlocked = $unlocked;
    }

    public function getNextUnlockRenewalDate(): ?string
    {
        return $this->nextUnlockRenewalDate ?? null;
    }

    public function getReservation(): TariffOptionsReservation
    {
        return $this->reservation;
    }

    public function getUnlocked(): TariffOptionsUnlocked
    {
        return $this->unlocked;
    }

    public function withNextUnlockRenewalDate(string $nextUnlockRenewalDate): self
    {
        $validator = new Validator();
        $validator->validate($nextUnlockRenewalDate, self::$internalValidationSchema['properties']['nextUnlockRenewalDate']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->nextUnlockRenewalDate = $nextUnlockRenewalDate;

        return $clone;
    }

    public function withoutNextUnlockRenewalDate(): self
    {
        $clone = clone $this;
        unset($clone->nextUnlockRenewalDate);

        return $clone;
    }

    public function withReservation(TariffOptionsReservation $reservation): self
    {
        $clone = clone $this;
        $clone->reservation = $reservation;

        return $clone;
    }

    public function withUnlocked(TariffOptionsUnlocked $unlocked): self
    {
        $clone = clone $this;
        $clone->unlocked = $unlocked;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return TariffOptions Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): TariffOptions
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $nextUnlockRenewalDate = null;
        if (isset($input->{'nextUnlockRenewalDate'})) {
            $nextUnlockRenewalDate = $input->{'nextUnlockRenewalDate'};
        }
        $reservation = TariffOptionsReservation::buildFromInput($input->{'reservation'}, validate: $validate);
        $unlocked = TariffOptionsUnlocked::buildFromInput($input->{'unlocked'}, validate: $validate);

        $obj = new self($reservation, $unlocked);
        $obj->nextUnlockRenewalDate = $nextUnlockRenewalDate;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->nextUnlockRenewalDate)) {
            $output['nextUnlockRenewalDate'] = $this->nextUnlockRenewalDate;
        }
        $output['reservation'] = ($this->reservation)->toJson();
        $output['unlocked'] = ($this->unlocked)->toJson();

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->reservation = clone $this->reservation;
        $this->unlocked = clone $this->unlocked;
    }
}
