<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\App;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.app.DefaultCronjob.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class DefaultCronjob
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'active' => [
                'example' => true,
                'type' => 'boolean',
            ],
            'command' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.app.CronjobCommand',
            ],
            'description' => [
                'example' => 'Beschreibung des Cronjobs',
                'type' => 'string',
            ],
            'interval' => [
                'example' => '0 5 * * *',
                'type' => 'string',
            ],
            'timeout' => [
                'example' => 300,
                'format' => 'int32',
                'type' => 'integer',
            ],
            'urlTemplate' => [
                'example' => 'https://example.com/cronjob',
                'type' => 'string',
            ],
        ],
        'required' => [
            'interval',
            'active',
            'description',
            'timeout',
        ],
        'type' => 'object',
    ];

    private bool $active;

    private ?CronjobCommand $command = null;

    private string $description;

    private string $interval;

    private int $timeout;

    private ?string $urlTemplate = null;

    public function __construct(bool $active, string $description, string $interval, int $timeout)
    {
        $this->active = $active;
        $this->description = $description;
        $this->interval = $interval;
        $this->timeout = $timeout;
    }

    public function getActive(): bool
    {
        return $this->active;
    }

    public function getCommand(): ?CronjobCommand
    {
        return $this->command ?? null;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getInterval(): string
    {
        return $this->interval;
    }

    public function getTimeout(): int
    {
        return $this->timeout;
    }

    public function getUrlTemplate(): ?string
    {
        return $this->urlTemplate ?? null;
    }

    public function withActive(bool $active): self
    {
        $validator = new Validator();
        $validator->validate($active, self::$internalValidationSchema['properties']['active']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->active = $active;

        return $clone;
    }

    public function withCommand(CronjobCommand $command): self
    {
        $clone = clone $this;
        $clone->command = $command;

        return $clone;
    }

    public function withoutCommand(): self
    {
        $clone = clone $this;
        unset($clone->command);

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$internalValidationSchema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withInterval(string $interval): self
    {
        $validator = new Validator();
        $validator->validate($interval, self::$internalValidationSchema['properties']['interval']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->interval = $interval;

        return $clone;
    }

    public function withTimeout(int $timeout): self
    {
        $validator = new Validator();
        $validator->validate($timeout, self::$internalValidationSchema['properties']['timeout']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->timeout = $timeout;

        return $clone;
    }

    public function withUrlTemplate(string $urlTemplate): self
    {
        $validator = new Validator();
        $validator->validate($urlTemplate, self::$internalValidationSchema['properties']['urlTemplate']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->urlTemplate = $urlTemplate;

        return $clone;
    }

    public function withoutUrlTemplate(): self
    {
        $clone = clone $this;
        unset($clone->urlTemplate);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return DefaultCronjob Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): DefaultCronjob
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $active = (bool)($input->{'active'});
        $command = null;
        if (isset($input->{'command'})) {
            $command = CronjobCommand::buildFromInput($input->{'command'}, validate: $validate);
        }
        $description = $input->{'description'};
        $interval = $input->{'interval'};
        $timeout = (int)($input->{'timeout'});
        $urlTemplate = null;
        if (isset($input->{'urlTemplate'})) {
            $urlTemplate = $input->{'urlTemplate'};
        }

        $obj = new self($active, $description, $interval, $timeout);
        $obj->command = $command;
        $obj->urlTemplate = $urlTemplate;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['active'] = $this->active;
        if (isset($this->command)) {
            $output['command'] = $this->command->toJson();
        }
        $output['description'] = $this->description;
        $output['interval'] = $this->interval;
        $output['timeout'] = $this->timeout;
        if (isset($this->urlTemplate)) {
            $output['urlTemplate'] = $this->urlTemplate;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
