<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Order;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.order.LeadFyndrOrderPreview.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class LeadFyndrOrderPreview
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'reservationLimit' => [
                'example' => 15,
                'type' => 'integer',
            ],
            'unlockLimit' => [
                'example' => 80,
                'type' => 'integer',
            ],
        ],
        'required' => [
            'unlockLimit',
            'reservationLimit',
        ],
        'type' => 'object',
    ];

    private int $reservationLimit;

    private int $unlockLimit;

    public function __construct(int $reservationLimit, int $unlockLimit)
    {
        $this->reservationLimit = $reservationLimit;
        $this->unlockLimit = $unlockLimit;
    }

    public function getReservationLimit(): int
    {
        return $this->reservationLimit;
    }

    public function getUnlockLimit(): int
    {
        return $this->unlockLimit;
    }

    public function withReservationLimit(int $reservationLimit): self
    {
        $validator = new Validator();
        $validator->validate($reservationLimit, self::$internalValidationSchema['properties']['reservationLimit']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->reservationLimit = $reservationLimit;

        return $clone;
    }

    public function withUnlockLimit(int $unlockLimit): self
    {
        $validator = new Validator();
        $validator->validate($unlockLimit, self::$internalValidationSchema['properties']['unlockLimit']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->unlockLimit = $unlockLimit;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return LeadFyndrOrderPreview Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): LeadFyndrOrderPreview
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $reservationLimit = (int)($input->{'reservationLimit'});
        $unlockLimit = (int)($input->{'unlockLimit'});

        $obj = new self($reservationLimit, $unlockLimit);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['reservationLimit'] = $this->reservationLimit;
        $output['unlockLimit'] = $this->unlockLimit;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
