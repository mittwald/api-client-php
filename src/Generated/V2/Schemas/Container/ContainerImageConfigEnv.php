<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Container;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.container.ContainerImageConfigEnv.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ContainerImageConfigEnv
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'description' => [
                'description' => 'The description of the env key.',
                'example' => 'The mysql user password.',
                'type' => 'string',
            ],
            'isAiGenerated' => [
                'description' => 'Whether the env has been ai generated.',
                'example' => true,
                'type' => 'boolean',
            ],
            'isSensitive' => [
                'description' => 'Whether the env key is a sensitive field, e.g. password fields.',
                'example' => true,
                'type' => 'boolean',
            ],
            'key' => [
                'description' => 'The env key.',
                'example' => 'MYSQL_PASSWORD',
                'type' => 'string',
            ],
            'value' => [
                'description' => 'The env default value.',
                'example' => 'my_password',
                'type' => 'string',
            ],
        ],
        'required' => [
            'key',
            'isAiGenerated',
        ],
        'type' => 'object',
    ];

    /**
     * The description of the env key.
     */
    private ?string $description = null;

    /**
     * Whether the env has been ai generated.
     */
    private bool $isAiGenerated;

    /**
     * Whether the env key is a sensitive field, e.g. password fields.
     */
    private ?bool $isSensitive = null;

    /**
     * The env key.
     */
    private string $key;

    /**
     * The env default value.
     */
    private ?string $value = null;

    public function __construct(bool $isAiGenerated, string $key)
    {
        $this->isAiGenerated = $isAiGenerated;
        $this->key = $key;
    }

    public function getDescription(): ?string
    {
        return $this->description ?? null;
    }

    public function getIsAiGenerated(): bool
    {
        return $this->isAiGenerated;
    }

    public function getIsSensitive(): ?bool
    {
        return $this->isSensitive ?? null;
    }

    public function getKey(): string
    {
        return $this->key;
    }

    public function getValue(): ?string
    {
        return $this->value ?? null;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, static::$schema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withoutDescription(): self
    {
        $clone = clone $this;
        unset($clone->description);

        return $clone;
    }

    public function withIsAiGenerated(bool $isAiGenerated): self
    {
        $validator = new Validator();
        $validator->validate($isAiGenerated, static::$schema['properties']['isAiGenerated']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isAiGenerated = $isAiGenerated;

        return $clone;
    }

    public function withIsSensitive(bool $isSensitive): self
    {
        $validator = new Validator();
        $validator->validate($isSensitive, static::$schema['properties']['isSensitive']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isSensitive = $isSensitive;

        return $clone;
    }

    public function withoutIsSensitive(): self
    {
        $clone = clone $this;
        unset($clone->isSensitive);

        return $clone;
    }

    public function withKey(string $key): self
    {
        $validator = new Validator();
        $validator->validate($key, static::$schema['properties']['key']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->key = $key;

        return $clone;
    }

    public function withValue(string $value): self
    {
        $validator = new Validator();
        $validator->validate($value, static::$schema['properties']['value']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->value = $value;

        return $clone;
    }

    public function withoutValue(): self
    {
        $clone = clone $this;
        unset($clone->value);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ContainerImageConfigEnv Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ContainerImageConfigEnv
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $description = null;
        if (isset($input->{'description'})) {
            $description = $input->{'description'};
        }
        $isAiGenerated = (bool)($input->{'isAiGenerated'});
        $isSensitive = null;
        if (isset($input->{'isSensitive'})) {
            $isSensitive = (bool)($input->{'isSensitive'});
        }
        $key = $input->{'key'};
        $value = null;
        if (isset($input->{'value'})) {
            $value = $input->{'value'};
        }

        $obj = new self($isAiGenerated, $key);
        $obj->description = $description;
        $obj->isSensitive = $isSensitive;
        $obj->value = $value;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->description)) {
            $output['description'] = $this->description;
        }
        $output['isAiGenerated'] = $this->isAiGenerated;
        if (isset($this->isSensitive)) {
            $output['isSensitive'] = $this->isSensitive;
        }
        $output['key'] = $this->key;
        if (isset($this->value)) {
            $output['value'] = $this->value;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
