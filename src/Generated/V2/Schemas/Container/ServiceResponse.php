<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Container;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.container.ServiceResponse.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ServiceResponse
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'deployedState' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.container.ServiceState',
            ],
            'description' => [
                'example' => 'MySQL DB',
                'type' => 'string',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'pendingState' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.container.ServiceState',
            ],
            'projectId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'serviceName' => [
                'example' => 'mysql-db',
                'type' => 'string',
            ],
            'stackId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'status' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.container.ServiceStatus',
            ],
        ],
        'required' => [
            'id',
            'stackId',
            'projectId',
            'description',
            'serviceName',
            'pendingState',
            'deployedState',
            'status',
        ],
        'type' => 'object',
    ];

    private ServiceState $deployedState;

    private string $description;

    private string $id;

    private ServiceState $pendingState;

    private string $projectId;

    private string $serviceName;

    private string $stackId;

    private ServiceStatus $status;

    public function __construct(ServiceState $deployedState, string $description, string $id, ServiceState $pendingState, string $projectId, string $serviceName, string $stackId, ServiceStatus $status)
    {
        $this->deployedState = $deployedState;
        $this->description = $description;
        $this->id = $id;
        $this->pendingState = $pendingState;
        $this->projectId = $projectId;
        $this->serviceName = $serviceName;
        $this->stackId = $stackId;
        $this->status = $status;
    }

    public function getDeployedState(): ServiceState
    {
        return $this->deployedState;
    }

    public function getDescription(): string
    {
        return $this->description;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getPendingState(): ServiceState
    {
        return $this->pendingState;
    }

    public function getProjectId(): string
    {
        return $this->projectId;
    }

    public function getServiceName(): string
    {
        return $this->serviceName;
    }

    public function getStackId(): string
    {
        return $this->stackId;
    }

    public function getStatus(): ServiceStatus
    {
        return $this->status;
    }

    public function withDeployedState(ServiceState $deployedState): self
    {
        $clone = clone $this;
        $clone->deployedState = $deployedState;

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$schema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, self::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withPendingState(ServiceState $pendingState): self
    {
        $clone = clone $this;
        $clone->pendingState = $pendingState;

        return $clone;
    }

    public function withProjectId(string $projectId): self
    {
        $validator = new Validator();
        $validator->validate($projectId, self::$schema['properties']['projectId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->projectId = $projectId;

        return $clone;
    }

    public function withServiceName(string $serviceName): self
    {
        $validator = new Validator();
        $validator->validate($serviceName, self::$schema['properties']['serviceName']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->serviceName = $serviceName;

        return $clone;
    }

    public function withStackId(string $stackId): self
    {
        $validator = new Validator();
        $validator->validate($stackId, self::$schema['properties']['stackId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->stackId = $stackId;

        return $clone;
    }

    public function withStatus(ServiceStatus $status): self
    {
        $clone = clone $this;
        $clone->status = $status;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ServiceResponse Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ServiceResponse
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $deployedState = ServiceState::buildFromInput($input->{'deployedState'}, validate: $validate);
        $description = $input->{'description'};
        $id = $input->{'id'};
        $pendingState = ServiceState::buildFromInput($input->{'pendingState'}, validate: $validate);
        $projectId = $input->{'projectId'};
        $serviceName = $input->{'serviceName'};
        $stackId = $input->{'stackId'};
        $status = ServiceStatus::from($input->{'status'});

        $obj = new self($deployedState, $description, $id, $pendingState, $projectId, $serviceName, $stackId, $status);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['deployedState'] = $this->deployedState->toJson();
        $output['description'] = $this->description;
        $output['id'] = $this->id;
        $output['pendingState'] = $this->pendingState->toJson();
        $output['projectId'] = $this->projectId;
        $output['serviceName'] = $this->serviceName;
        $output['stackId'] = $this->stackId;
        $output['status'] = $this->status->value;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
