<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Container;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.container.ContainerImageConfigVolume.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ContainerImageConfigVolume
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'description' => [
                'description' => 'The description of the volume path.',
                'example' => 'The mysql database files.',
                'type' => 'string',
            ],
            'isAiGenerated' => [
                'description' => 'Whether the volume has been ai generated.',
                'example' => true,
                'type' => 'boolean',
            ],
            'volume' => [
                'description' => 'The volume path.',
                'example' => '/var/lib/mysql',
                'type' => 'string',
            ],
        ],
        'required' => [
            'volume',
            'isAiGenerated',
        ],
        'type' => 'object',
    ];

    /**
     * The description of the volume path.
     */
    private ?string $description = null;

    /**
     * Whether the volume has been ai generated.
     */
    private bool $isAiGenerated;

    /**
     * The volume path.
     */
    private string $volume;

    public function __construct(bool $isAiGenerated, string $volume)
    {
        $this->isAiGenerated = $isAiGenerated;
        $this->volume = $volume;
    }

    public function getDescription(): ?string
    {
        return $this->description ?? null;
    }

    public function getIsAiGenerated(): bool
    {
        return $this->isAiGenerated;
    }

    public function getVolume(): string
    {
        return $this->volume;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$internalValidationSchema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withoutDescription(): self
    {
        $clone = clone $this;
        unset($clone->description);

        return $clone;
    }

    public function withIsAiGenerated(bool $isAiGenerated): self
    {
        $validator = new Validator();
        $validator->validate($isAiGenerated, self::$internalValidationSchema['properties']['isAiGenerated']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isAiGenerated = $isAiGenerated;

        return $clone;
    }

    public function withVolume(string $volume): self
    {
        $validator = new Validator();
        $validator->validate($volume, self::$internalValidationSchema['properties']['volume']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->volume = $volume;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ContainerImageConfigVolume Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ContainerImageConfigVolume
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $description = null;
        if (isset($input->{'description'})) {
            $description = $input->{'description'};
        }
        $isAiGenerated = (bool)($input->{'isAiGenerated'});
        $volume = $input->{'volume'};

        $obj = new self($isAiGenerated, $volume);
        $obj->description = $description;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->description)) {
            $output['description'] = $this->description;
        }
        $output['isAiGenerated'] = $this->isAiGenerated;
        $output['volume'] = $this->volume;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
