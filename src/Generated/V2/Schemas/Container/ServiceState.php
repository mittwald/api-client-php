<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Container;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.container.ServiceState.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ServiceState
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'command' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'entrypoint' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'envs' => [
                'additionalProperties' => [
                    'type' => 'string',
                ],
                'type' => 'object',
            ],
            'image' => [
                'type' => 'string',
            ],
            'imageDigest' => [
                'type' => 'string',
            ],
            'ports' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'volumes' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
        ],
        'required' => [
            'image',
        ],
        'type' => 'object',
    ];

    /**
     * @var string[]|null
     */
    private ?array $command = null;

    /**
     * @var string[]|null
     */
    private ?array $entrypoint = null;

    /**
     * @var string[]|null
     */
    private ?array $envs = null;

    private string $image;

    private ?string $imageDigest = null;

    /**
     * @var string[]|null
     */
    private ?array $ports = null;

    /**
     * @var string[]|null
     */
    private ?array $volumes = null;

    public function __construct(string $image)
    {
        $this->image = $image;
    }

    /**
     * @return string[]|null
     */
    public function getCommand(): ?array
    {
        return $this->command ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getEntrypoint(): ?array
    {
        return $this->entrypoint ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getEnvs(): ?array
    {
        return $this->envs ?? null;
    }

    public function getImage(): string
    {
        return $this->image;
    }

    public function getImageDigest(): ?string
    {
        return $this->imageDigest ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getPorts(): ?array
    {
        return $this->ports ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getVolumes(): ?array
    {
        return $this->volumes ?? null;
    }

    /**
     * @param string[] $command
     */
    public function withCommand(array $command): self
    {
        $validator = new Validator();
        $validator->validate($command, self::$schema['properties']['command']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->command = $command;

        return $clone;
    }

    public function withoutCommand(): self
    {
        $clone = clone $this;
        unset($clone->command);

        return $clone;
    }

    /**
     * @param string[] $entrypoint
     */
    public function withEntrypoint(array $entrypoint): self
    {
        $validator = new Validator();
        $validator->validate($entrypoint, self::$schema['properties']['entrypoint']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->entrypoint = $entrypoint;

        return $clone;
    }

    public function withoutEntrypoint(): self
    {
        $clone = clone $this;
        unset($clone->entrypoint);

        return $clone;
    }

    /**
     * @param string[] $envs
     */
    public function withEnvs(array $envs): self
    {
        $validator = new Validator();
        $validator->validate($envs, self::$schema['properties']['envs']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->envs = $envs;

        return $clone;
    }

    public function withoutEnvs(): self
    {
        $clone = clone $this;
        unset($clone->envs);

        return $clone;
    }

    public function withImage(string $image): self
    {
        $validator = new Validator();
        $validator->validate($image, self::$schema['properties']['image']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->image = $image;

        return $clone;
    }

    public function withImageDigest(string $imageDigest): self
    {
        $validator = new Validator();
        $validator->validate($imageDigest, self::$schema['properties']['imageDigest']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->imageDigest = $imageDigest;

        return $clone;
    }

    public function withoutImageDigest(): self
    {
        $clone = clone $this;
        unset($clone->imageDigest);

        return $clone;
    }

    /**
     * @param string[] $ports
     */
    public function withPorts(array $ports): self
    {
        $validator = new Validator();
        $validator->validate($ports, self::$schema['properties']['ports']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->ports = $ports;

        return $clone;
    }

    public function withoutPorts(): self
    {
        $clone = clone $this;
        unset($clone->ports);

        return $clone;
    }

    /**
     * @param string[] $volumes
     */
    public function withVolumes(array $volumes): self
    {
        $validator = new Validator();
        $validator->validate($volumes, self::$schema['properties']['volumes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->volumes = $volumes;

        return $clone;
    }

    public function withoutVolumes(): self
    {
        $clone = clone $this;
        unset($clone->volumes);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ServiceState Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ServiceState
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $command = null;
        if (isset($input->{'command'})) {
            $command = $input->{'command'};
        }
        $entrypoint = null;
        if (isset($input->{'entrypoint'})) {
            $entrypoint = $input->{'entrypoint'};
        }
        $envs = null;
        if (isset($input->{'envs'})) {
            $envs = (array)$input->{'envs'};
        }
        $image = $input->{'image'};
        $imageDigest = null;
        if (isset($input->{'imageDigest'})) {
            $imageDigest = $input->{'imageDigest'};
        }
        $ports = null;
        if (isset($input->{'ports'})) {
            $ports = $input->{'ports'};
        }
        $volumes = null;
        if (isset($input->{'volumes'})) {
            $volumes = $input->{'volumes'};
        }

        $obj = new self($image);
        $obj->command = $command;
        $obj->entrypoint = $entrypoint;
        $obj->envs = $envs;
        $obj->imageDigest = $imageDigest;
        $obj->ports = $ports;
        $obj->volumes = $volumes;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->command)) {
            $output['command'] = $this->command;
        }
        if (isset($this->entrypoint)) {
            $output['entrypoint'] = $this->entrypoint;
        }
        if (isset($this->envs)) {
            $output['envs'] = $this->envs;
        }
        $output['image'] = $this->image;
        if (isset($this->imageDigest)) {
            $output['imageDigest'] = $this->imageDigest;
        }
        if (isset($this->ports)) {
            $output['ports'] = $this->ports;
        }
        if (isset($this->volumes)) {
            $output['volumes'] = $this->volumes;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
