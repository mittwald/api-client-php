<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Container;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.container.ContainerImageConfig.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ContainerImageConfig
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'command' => [
                'description' => 'Command of the container image.',
                'items' => [
                    'example' => 'mysqld',
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'entrypoint' => [
                'description' => 'Entrypoint of the container image.',
                'items' => [
                    'example' => 'docker-entrypoint.sh',
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'env' => [
                'description' => 'List of environment variables the container image has.',
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.container.ContainerImageConfigEnv',
                ],
                'type' => 'array',
            ],
            'exposedPorts' => [
                'description' => 'List of exposed ports the container image has.',
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.container.ContainerImageConfigExposedPort',
                ],
                'type' => 'array',
            ],
            'hasAiGeneratedData' => [
                'description' => 'Whether the image config has ai generated data.',
                'example' => true,
                'type' => 'boolean',
            ],
            'isAiAvailable' => [
                'description' => 'Whether ai generation is available for the image reference.',
                'example' => true,
                'type' => 'boolean',
            ],
            'isUserRoot' => [
                'description' => 'Whether the container user is root.',
                'example' => false,
                'type' => 'boolean',
            ],
            'overwritingUser' => [
                'description' => 'If set, this user will be used to run the container.',
                'example' => 1000,
                'type' => 'integer',
            ],
            'user' => [
                'description' => 'The user the container image is running with, if overwritingUser is not set.',
                'example' => 'mysql',
                'type' => 'string',
            ],
            'userId' => [
                'description' => 'The user id the container image is running with, if overwritingUser is not set.',
                'example' => 0,
                'type' => 'integer',
            ],
            'volumes' => [
                'description' => 'List of volumes the container image has.',
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.container.ContainerImageConfigVolume',
                ],
                'type' => 'array',
            ],
        ],
        'required' => [
            'user',
            'userId',
            'isUserRoot',
            'hasAiGeneratedData',
            'isAiAvailable',
        ],
        'type' => 'object',
    ];

    /**
     * Command of the container image.
     *
     * @var string[]|null
     */
    private ?array $command = null;

    /**
     * Entrypoint of the container image.
     *
     * @var string[]|null
     */
    private ?array $entrypoint = null;

    /**
     * List of environment variables the container image has.
     *
     * @var ContainerImageConfigEnv[]|null
     */
    private ?array $env = null;

    /**
     * List of exposed ports the container image has.
     *
     * @var ContainerImageConfigExposedPort[]|null
     */
    private ?array $exposedPorts = null;

    /**
     * Whether the image config has ai generated data.
     */
    private bool $hasAiGeneratedData;

    /**
     * Whether ai generation is available for the image reference.
     */
    private bool $isAiAvailable;

    /**
     * Whether the container user is root.
     */
    private bool $isUserRoot;

    /**
     * If set, this user will be used to run the container.
     */
    private ?int $overwritingUser = null;

    /**
     * The user the container image is running with, if overwritingUser is not set.
     */
    private string $user;

    /**
     * The user id the container image is running with, if overwritingUser is not set.
     */
    private int $userId;

    /**
     * List of volumes the container image has.
     *
     * @var ContainerImageConfigVolume[]|null
     */
    private ?array $volumes = null;

    public function __construct(bool $hasAiGeneratedData, bool $isAiAvailable, bool $isUserRoot, string $user, int $userId)
    {
        $this->hasAiGeneratedData = $hasAiGeneratedData;
        $this->isAiAvailable = $isAiAvailable;
        $this->isUserRoot = $isUserRoot;
        $this->user = $user;
        $this->userId = $userId;
    }

    /**
     * @return string[]|null
     */
    public function getCommand(): ?array
    {
        return $this->command ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getEntrypoint(): ?array
    {
        return $this->entrypoint ?? null;
    }

    /**
     * @return ContainerImageConfigEnv[]|null
     */
    public function getEnv(): ?array
    {
        return $this->env ?? null;
    }

    /**
     * @return ContainerImageConfigExposedPort[]|null
     */
    public function getExposedPorts(): ?array
    {
        return $this->exposedPorts ?? null;
    }

    public function getHasAiGeneratedData(): bool
    {
        return $this->hasAiGeneratedData;
    }

    public function getIsAiAvailable(): bool
    {
        return $this->isAiAvailable;
    }

    public function getIsUserRoot(): bool
    {
        return $this->isUserRoot;
    }

    public function getOverwritingUser(): ?int
    {
        return $this->overwritingUser ?? null;
    }

    public function getUser(): string
    {
        return $this->user;
    }

    public function getUserId(): int
    {
        return $this->userId;
    }

    /**
     * @return ContainerImageConfigVolume[]|null
     */
    public function getVolumes(): ?array
    {
        return $this->volumes ?? null;
    }

    /**
     * @param string[] $command
     */
    public function withCommand(array $command): self
    {
        $validator = new Validator();
        $validator->validate($command, self::$schema['properties']['command']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->command = $command;

        return $clone;
    }

    public function withoutCommand(): self
    {
        $clone = clone $this;
        unset($clone->command);

        return $clone;
    }

    /**
     * @param string[] $entrypoint
     */
    public function withEntrypoint(array $entrypoint): self
    {
        $validator = new Validator();
        $validator->validate($entrypoint, self::$schema['properties']['entrypoint']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->entrypoint = $entrypoint;

        return $clone;
    }

    public function withoutEntrypoint(): self
    {
        $clone = clone $this;
        unset($clone->entrypoint);

        return $clone;
    }

    /**
     * @param ContainerImageConfigEnv[] $env
     */
    public function withEnv(array $env): self
    {
        $clone = clone $this;
        $clone->env = $env;

        return $clone;
    }

    public function withoutEnv(): self
    {
        $clone = clone $this;
        unset($clone->env);

        return $clone;
    }

    /**
     * @param ContainerImageConfigExposedPort[] $exposedPorts
     */
    public function withExposedPorts(array $exposedPorts): self
    {
        $clone = clone $this;
        $clone->exposedPorts = $exposedPorts;

        return $clone;
    }

    public function withoutExposedPorts(): self
    {
        $clone = clone $this;
        unset($clone->exposedPorts);

        return $clone;
    }

    public function withHasAiGeneratedData(bool $hasAiGeneratedData): self
    {
        $validator = new Validator();
        $validator->validate($hasAiGeneratedData, self::$schema['properties']['hasAiGeneratedData']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->hasAiGeneratedData = $hasAiGeneratedData;

        return $clone;
    }

    public function withIsAiAvailable(bool $isAiAvailable): self
    {
        $validator = new Validator();
        $validator->validate($isAiAvailable, self::$schema['properties']['isAiAvailable']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isAiAvailable = $isAiAvailable;

        return $clone;
    }

    public function withIsUserRoot(bool $isUserRoot): self
    {
        $validator = new Validator();
        $validator->validate($isUserRoot, self::$schema['properties']['isUserRoot']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isUserRoot = $isUserRoot;

        return $clone;
    }

    public function withOverwritingUser(int $overwritingUser): self
    {
        $validator = new Validator();
        $validator->validate($overwritingUser, self::$schema['properties']['overwritingUser']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->overwritingUser = $overwritingUser;

        return $clone;
    }

    public function withoutOverwritingUser(): self
    {
        $clone = clone $this;
        unset($clone->overwritingUser);

        return $clone;
    }

    public function withUser(string $user): self
    {
        $validator = new Validator();
        $validator->validate($user, self::$schema['properties']['user']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->user = $user;

        return $clone;
    }

    public function withUserId(int $userId): self
    {
        $validator = new Validator();
        $validator->validate($userId, self::$schema['properties']['userId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->userId = $userId;

        return $clone;
    }

    /**
     * @param ContainerImageConfigVolume[] $volumes
     */
    public function withVolumes(array $volumes): self
    {
        $clone = clone $this;
        $clone->volumes = $volumes;

        return $clone;
    }

    public function withoutVolumes(): self
    {
        $clone = clone $this;
        unset($clone->volumes);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ContainerImageConfig Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ContainerImageConfig
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $command = null;
        if (isset($input->{'command'})) {
            $command = $input->{'command'};
        }
        $entrypoint = null;
        if (isset($input->{'entrypoint'})) {
            $entrypoint = $input->{'entrypoint'};
        }
        $env = null;
        if (isset($input->{'env'})) {
            $env = array_map(fn (array|object $i): ContainerImageConfigEnv => ContainerImageConfigEnv::buildFromInput($i, validate: $validate), $input->{'env'});
        }
        $exposedPorts = null;
        if (isset($input->{'exposedPorts'})) {
            $exposedPorts = array_map(fn (array|object $i): ContainerImageConfigExposedPort => ContainerImageConfigExposedPort::buildFromInput($i, validate: $validate), $input->{'exposedPorts'});
        }
        $hasAiGeneratedData = (bool)($input->{'hasAiGeneratedData'});
        $isAiAvailable = (bool)($input->{'isAiAvailable'});
        $isUserRoot = (bool)($input->{'isUserRoot'});
        $overwritingUser = null;
        if (isset($input->{'overwritingUser'})) {
            $overwritingUser = (int)($input->{'overwritingUser'});
        }
        $user = $input->{'user'};
        $userId = (int)($input->{'userId'});
        $volumes = null;
        if (isset($input->{'volumes'})) {
            $volumes = array_map(fn (array|object $i): ContainerImageConfigVolume => ContainerImageConfigVolume::buildFromInput($i, validate: $validate), $input->{'volumes'});
        }

        $obj = new self($hasAiGeneratedData, $isAiAvailable, $isUserRoot, $user, $userId);
        $obj->command = $command;
        $obj->entrypoint = $entrypoint;
        $obj->env = $env;
        $obj->exposedPorts = $exposedPorts;
        $obj->overwritingUser = $overwritingUser;
        $obj->volumes = $volumes;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->command)) {
            $output['command'] = $this->command;
        }
        if (isset($this->entrypoint)) {
            $output['entrypoint'] = $this->entrypoint;
        }
        if (isset($this->env)) {
            $output['env'] = array_map(fn (ContainerImageConfigEnv $i): array => $i->toJson(), $this->env);
        }
        if (isset($this->exposedPorts)) {
            $output['exposedPorts'] = array_map(fn (ContainerImageConfigExposedPort $i): array => $i->toJson(), $this->exposedPorts);
        }
        $output['hasAiGeneratedData'] = $this->hasAiGeneratedData;
        $output['isAiAvailable'] = $this->isAiAvailable;
        $output['isUserRoot'] = $this->isUserRoot;
        if (isset($this->overwritingUser)) {
            $output['overwritingUser'] = $this->overwritingUser;
        }
        $output['user'] = $this->user;
        $output['userId'] = $this->userId;
        if (isset($this->volumes)) {
            $output['volumes'] = array_map(fn (ContainerImageConfigVolume $i): array => $i->toJson(), $this->volumes);
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
