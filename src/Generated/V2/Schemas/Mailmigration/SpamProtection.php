<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Mailmigration;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.mailmigration.SpamProtection.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class SpamProtection
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'active' => [
                'type' => 'boolean',
            ],
            'deleteSensitivity' => [
                'type' => 'integer',
            ],
            'folder' => [
                'default' => 0,
                'description' => 'SPAM_FOLDER_INBOX_UNSPECIFIED = 0 SPAM_FOLDER_SPAM = 1',
                'enum' => [
                    0,
                    1,
                ],
                'type' => 'integer',
            ],
            'keepDays' => [
                'type' => 'integer',
            ],
            'relocateSensitivity' => [
                'type' => 'integer',
            ],
        ],
        'required' => [
            'active',
            'folder',
            'keepDays',
        ],
        'type' => 'object',
    ];

    private bool $active;

    private ?int $deleteSensitivity = null;

    /**
     * SPAM_FOLDER_INBOX_UNSPECIFIED = 0 SPAM_FOLDER_SPAM = 1
     */
    private int $folder;

    private int $keepDays;

    private ?int $relocateSensitivity = null;

    public function __construct(bool $active, int $folder, int $keepDays)
    {
        $this->active = $active;
        $this->folder = $folder;
        $this->keepDays = $keepDays;
    }

    public function getActive(): bool
    {
        return $this->active;
    }

    public function getDeleteSensitivity(): ?int
    {
        return $this->deleteSensitivity ?? null;
    }

    public function getFolder(): int
    {
        return $this->folder;
    }

    public function getKeepDays(): int
    {
        return $this->keepDays;
    }

    public function getRelocateSensitivity(): ?int
    {
        return $this->relocateSensitivity ?? null;
    }

    public function withActive(bool $active): self
    {
        $validator = new Validator();
        $validator->validate($active, static::$schema['properties']['active']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->active = $active;

        return $clone;
    }

    public function withDeleteSensitivity(int $deleteSensitivity): self
    {
        $validator = new Validator();
        $validator->validate($deleteSensitivity, static::$schema['properties']['deleteSensitivity']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->deleteSensitivity = $deleteSensitivity;

        return $clone;
    }

    public function withoutDeleteSensitivity(): self
    {
        $clone = clone $this;
        unset($clone->deleteSensitivity);

        return $clone;
    }

    public function withFolder(int $folder): self
    {
        $validator = new Validator();
        $validator->validate($folder, static::$schema['properties']['folder']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->folder = $folder;

        return $clone;
    }

    public function withKeepDays(int $keepDays): self
    {
        $validator = new Validator();
        $validator->validate($keepDays, static::$schema['properties']['keepDays']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->keepDays = $keepDays;

        return $clone;
    }

    public function withRelocateSensitivity(int $relocateSensitivity): self
    {
        $validator = new Validator();
        $validator->validate($relocateSensitivity, static::$schema['properties']['relocateSensitivity']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->relocateSensitivity = $relocateSensitivity;

        return $clone;
    }

    public function withoutRelocateSensitivity(): self
    {
        $clone = clone $this;
        unset($clone->relocateSensitivity);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return SpamProtection Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): SpamProtection
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $active = (bool)($input->{'active'});
        $deleteSensitivity = null;
        if (isset($input->{'deleteSensitivity'})) {
            $deleteSensitivity = (int)($input->{'deleteSensitivity'});
        }
        $folder = 0;
        if (isset($input->{'folder'})) {
            $folder = (int)($input->{'folder'});
        }
        $keepDays = (int)($input->{'keepDays'});
        $relocateSensitivity = null;
        if (isset($input->{'relocateSensitivity'})) {
            $relocateSensitivity = (int)($input->{'relocateSensitivity'});
        }

        $obj = new self($active, $folder, $keepDays);
        $obj->deleteSensitivity = $deleteSensitivity;
        $obj->relocateSensitivity = $relocateSensitivity;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['active'] = $this->active;
        if (isset($this->deleteSensitivity)) {
            $output['deleteSensitivity'] = $this->deleteSensitivity;
        }
        $output['folder'] = $this->folder;
        $output['keepDays'] = $this->keepDays;
        if (isset($this->relocateSensitivity)) {
            $output['relocateSensitivity'] = $this->relocateSensitivity;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
