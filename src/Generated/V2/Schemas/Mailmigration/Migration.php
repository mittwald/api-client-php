<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Mailmigration;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.mailmigration.Migration.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Migration
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'aborted' => [
                'type' => 'boolean',
            ],
            'addresses' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.MigrationMailAddress',
                ],
                'type' => 'array',
            ],
            'finalizers' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.MigrationFinalizeJob',
            ],
            'finished' => [
                'type' => 'boolean',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'mailboxes' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.MigrationMailbox',
                ],
                'type' => 'array',
            ],
            'sourceCoabProjectId' => [
                'type' => 'string',
            ],
            'targetNexusProjectId' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'id',
            'targetNexusProjectId',
            'sourceCoabProjectId',
            'addresses',
            'mailboxes',
            'finalizers',
            'finished',
            'aborted',
        ],
        'type' => 'object',
    ];

    private bool $aborted;

    /**
     * @var MigrationMailAddress[]
     */
    private array $addresses;

    private MigrationFinalizeJob $finalizers;

    private bool $finished;

    private string $id;

    /**
     * @var MigrationMailbox[]
     */
    private array $mailboxes;

    private string $sourceCoabProjectId;

    private string $targetNexusProjectId;

    /**
     * @param MigrationMailAddress[] $addresses
     * @param MigrationMailbox[] $mailboxes
     */
    public function __construct(bool $aborted, array $addresses, MigrationFinalizeJob $finalizers, bool $finished, string $id, array $mailboxes, string $sourceCoabProjectId, string $targetNexusProjectId)
    {
        $this->aborted = $aborted;
        $this->addresses = $addresses;
        $this->finalizers = $finalizers;
        $this->finished = $finished;
        $this->id = $id;
        $this->mailboxes = $mailboxes;
        $this->sourceCoabProjectId = $sourceCoabProjectId;
        $this->targetNexusProjectId = $targetNexusProjectId;
    }

    public function getAborted(): bool
    {
        return $this->aborted;
    }

    /**
     * @return MigrationMailAddress[]
     */
    public function getAddresses(): array
    {
        return $this->addresses;
    }

    public function getFinalizers(): MigrationFinalizeJob
    {
        return $this->finalizers;
    }

    public function getFinished(): bool
    {
        return $this->finished;
    }

    public function getId(): string
    {
        return $this->id;
    }

    /**
     * @return MigrationMailbox[]
     */
    public function getMailboxes(): array
    {
        return $this->mailboxes;
    }

    public function getSourceCoabProjectId(): string
    {
        return $this->sourceCoabProjectId;
    }

    public function getTargetNexusProjectId(): string
    {
        return $this->targetNexusProjectId;
    }

    public function withAborted(bool $aborted): self
    {
        $validator = new Validator();
        $validator->validate($aborted, self::$schema['properties']['aborted']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->aborted = $aborted;

        return $clone;
    }

    /**
     * @param MigrationMailAddress[] $addresses
     */
    public function withAddresses(array $addresses): self
    {
        $clone = clone $this;
        $clone->addresses = $addresses;

        return $clone;
    }

    public function withFinalizers(MigrationFinalizeJob $finalizers): self
    {
        $clone = clone $this;
        $clone->finalizers = $finalizers;

        return $clone;
    }

    public function withFinished(bool $finished): self
    {
        $validator = new Validator();
        $validator->validate($finished, self::$schema['properties']['finished']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->finished = $finished;

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, self::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    /**
     * @param MigrationMailbox[] $mailboxes
     */
    public function withMailboxes(array $mailboxes): self
    {
        $clone = clone $this;
        $clone->mailboxes = $mailboxes;

        return $clone;
    }

    public function withSourceCoabProjectId(string $sourceCoabProjectId): self
    {
        $validator = new Validator();
        $validator->validate($sourceCoabProjectId, self::$schema['properties']['sourceCoabProjectId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->sourceCoabProjectId = $sourceCoabProjectId;

        return $clone;
    }

    public function withTargetNexusProjectId(string $targetNexusProjectId): self
    {
        $validator = new Validator();
        $validator->validate($targetNexusProjectId, self::$schema['properties']['targetNexusProjectId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->targetNexusProjectId = $targetNexusProjectId;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Migration Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Migration
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $aborted = (bool)($input->{'aborted'});
        $addresses = array_map(fn (array|object $i): MigrationMailAddress => MigrationMailAddress::buildFromInput($i, validate: $validate), $input->{'addresses'});
        $finalizers = MigrationFinalizeJob::buildFromInput($input->{'finalizers'}, validate: $validate);
        $finished = (bool)($input->{'finished'});
        $id = $input->{'id'};
        $mailboxes = array_map(fn (array|object $i): MigrationMailbox => MigrationMailbox::buildFromInput($i, validate: $validate), $input->{'mailboxes'});
        $sourceCoabProjectId = $input->{'sourceCoabProjectId'};
        $targetNexusProjectId = $input->{'targetNexusProjectId'};

        $obj = new self($aborted, $addresses, $finalizers, $finished, $id, $mailboxes, $sourceCoabProjectId, $targetNexusProjectId);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['aborted'] = $this->aborted;
        $output['addresses'] = array_map(fn (MigrationMailAddress $i): array => $i->toJson(), $this->addresses);
        $output['finalizers'] = $this->finalizers->toJson();
        $output['finished'] = $this->finished;
        $output['id'] = $this->id;
        $output['mailboxes'] = array_map(fn (MigrationMailbox $i): array => $i->toJson(), $this->mailboxes);
        $output['sourceCoabProjectId'] = $this->sourceCoabProjectId;
        $output['targetNexusProjectId'] = $this->targetNexusProjectId;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
