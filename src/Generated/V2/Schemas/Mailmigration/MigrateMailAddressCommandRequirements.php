<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Mailmigration;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for
 * de.mittwald.v1.mailmigration.MigrateMailAddressCommandRequirements.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class MigrateMailAddressCommandRequirements
{
    /**
     * Schema used to validate input for creating instances of this class
     *
     * @var array
     */
    private static array $schema = [
        'properties' => [
            'address' => [
                'type' => 'string',
            ],
            'autoResponder' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.AutoResponder',
            ],
            'forwardedAddresses' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'isCatchAll' => [
                'type' => 'boolean',
            ],
            'mailbox' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.Mailbox',
            ],
            'projectId' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'projectId',
        ],
        'type' => 'object',
    ];

    /**
     * @var string|null
     */
    private ?string $address = null;

    /**
     * @var AutoResponder|null
     */
    private ?AutoResponder $autoResponder = null;

    /**
     * @var string[]|null
     */
    private ?array $forwardedAddresses = null;

    /**
     * @var bool|null
     */
    private ?bool $isCatchAll = null;

    /**
     * @var Mailbox|null
     */
    private ?Mailbox $mailbox = null;

    /**
     * @var string
     */
    private string $projectId;

    /**
     * @param string $projectId
     */
    public function __construct(string $projectId)
    {
        $this->projectId = $projectId;
    }

    /**
     * @return string|null
     */
    public function getAddress(): ?string
    {
        return $this->address ?? null;
    }

    /**
     * @return
     * AutoResponder|null
     */
    public function getAutoResponder(): ?AutoResponder
    {
        return $this->autoResponder ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getForwardedAddresses(): ?array
    {
        return $this->forwardedAddresses ?? null;
    }

    /**
     * @return bool|null
     */
    public function getIsCatchAll(): ?bool
    {
        return $this->isCatchAll ?? null;
    }

    /**
     * @return Mailbox|null
     */
    public function getMailbox(): ?Mailbox
    {
        return $this->mailbox ?? null;
    }

    /**
     * @return string
     */
    public function getProjectId(): string
    {
        return $this->projectId;
    }

    /**
     * @param string $address
     * @return self
     */
    public function withAddress(string $address): self
    {
        $validator = new Validator();
        $validator->validate($address, static::$schema['properties']['address']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->address = $address;

        return $clone;
    }

    /**
     * @return self
     */
    public function withoutAddress(): self
    {
        $clone = clone $this;
        unset($clone->address);

        return $clone;
    }

    /**
     * @param AutoResponder $autoResponder
     * @return self
     */
    public function withAutoResponder(AutoResponder $autoResponder): self
    {
        $clone = clone $this;
        $clone->autoResponder = $autoResponder;

        return $clone;
    }

    /**
     * @return self
     */
    public function withoutAutoResponder(): self
    {
        $clone = clone $this;
        unset($clone->autoResponder);

        return $clone;
    }

    /**
     * @param string[] $forwardedAddresses
     * @return self
     */
    public function withForwardedAddresses(array $forwardedAddresses): self
    {
        $validator = new Validator();
        $validator->validate($forwardedAddresses, static::$schema['properties']['forwardedAddresses']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->forwardedAddresses = $forwardedAddresses;

        return $clone;
    }

    /**
     * @return self
     */
    public function withoutForwardedAddresses(): self
    {
        $clone = clone $this;
        unset($clone->forwardedAddresses);

        return $clone;
    }

    /**
     * @param bool $isCatchAll
     * @return self
     */
    public function withIsCatchAll(bool $isCatchAll): self
    {
        $validator = new Validator();
        $validator->validate($isCatchAll, static::$schema['properties']['isCatchAll']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->isCatchAll = $isCatchAll;

        return $clone;
    }

    /**
     * @return self
     */
    public function withoutIsCatchAll(): self
    {
        $clone = clone $this;
        unset($clone->isCatchAll);

        return $clone;
    }

    /**
     * @param Mailbox $mailbox
     * @return self
     */
    public function withMailbox(Mailbox $mailbox): self
    {
        $clone = clone $this;
        $clone->mailbox = $mailbox;

        return $clone;
    }

    /**
     * @return self
     */
    public function withoutMailbox(): self
    {
        $clone = clone $this;
        unset($clone->mailbox);

        return $clone;
    }

    /**
     * @param string $projectId
     * @return self
     */
    public function withProjectId(string $projectId): self
    {
        $validator = new Validator();
        $validator->validate($projectId, static::$schema['properties']['projectId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->projectId = $projectId;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return MigrateMailAddressCommandRequirements Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): MigrateMailAddressCommandRequirements
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $address = null;
        if (isset($input->{'address'})) {
            $address = $input->{'address'};
        }
        $autoResponder = null;
        if (isset($input->{'autoResponder'})) {
            $autoResponder = AutoResponder::buildFromInput($input->{'autoResponder'}, validate: $validate);
        }
        $forwardedAddresses = null;
        if (isset($input->{'forwardedAddresses'})) {
            $forwardedAddresses = $input->{'forwardedAddresses'};
        }
        $isCatchAll = null;
        if (isset($input->{'isCatchAll'})) {
            $isCatchAll = (bool)($input->{'isCatchAll'});
        }
        $mailbox = null;
        if (isset($input->{'mailbox'})) {
            $mailbox = Mailbox::buildFromInput($input->{'mailbox'}, validate: $validate);
        }
        $projectId = $input->{'projectId'};

        $obj = new self($projectId);
        $obj->address = $address;
        $obj->autoResponder = $autoResponder;
        $obj->forwardedAddresses = $forwardedAddresses;
        $obj->isCatchAll = $isCatchAll;
        $obj->mailbox = $mailbox;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->address)) {
            $output['address'] = $this->address;
        }
        if (isset($this->autoResponder)) {
            $output['autoResponder'] = $this->autoResponder->toJson();
        }
        if (isset($this->forwardedAddresses)) {
            $output['forwardedAddresses'] = $this->forwardedAddresses;
        }
        if (isset($this->isCatchAll)) {
            $output['isCatchAll'] = $this->isCatchAll;
        }
        if (isset($this->mailbox)) {
            $output['mailbox'] = $this->mailbox->toJson();
        }
        $output['projectId'] = $this->projectId;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
