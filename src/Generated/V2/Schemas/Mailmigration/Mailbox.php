<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Mailmigration;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.mailmigration.Mailbox.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Mailbox
{
    /**
     * Schema used to validate input for creating instances of this class
     *
     * @var array
     */
    private static array $schema = [
        'properties' => [
            'mailsystem' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.MailSystemSettings',
            ],
            'name' => [
                'type' => 'string',
            ],
            'passwordHash' => [
                'type' => 'string',
            ],
            'quotaInBytes' => [
                'type' => 'integer',
            ],
            'spamProtection' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.SpamProtection',
            ],
        ],
        'required' => [
            'name',
            'passwordHash',
            'quotaInBytes',
            'mailsystem',
        ],
        'type' => 'object',
    ];

    /**
     * @var MailSystemSettings
     */
    private MailSystemSettings $mailsystem;

    /**
     * @var string
     */
    private string $name;

    /**
     * @var string
     */
    private string $passwordHash;

    /**
     * @var int
     */
    private int $quotaInBytes;

    /**
     * @var SpamProtection|null
     */
    private ?SpamProtection $spamProtection = null;

    /**
     * @param MailSystemSettings $mailsystem
     * @param string $name
     * @param string $passwordHash
     * @param int $quotaInBytes
     */
    public function __construct(MailSystemSettings $mailsystem, string $name, string $passwordHash, int $quotaInBytes)
    {
        $this->mailsystem = $mailsystem;
        $this->name = $name;
        $this->passwordHash = $passwordHash;
        $this->quotaInBytes = $quotaInBytes;
    }

    /**
     * @return
     * MailSystemSettings
     */
    public function getMailsystem(): MailSystemSettings
    {
        return $this->mailsystem;
    }

    /**
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * @return string
     */
    public function getPasswordHash(): string
    {
        return $this->passwordHash;
    }

    /**
     * @return int
     */
    public function getQuotaInBytes(): int
    {
        return $this->quotaInBytes;
    }

    /**
     * @return
     * SpamProtection|null
     */
    public function getSpamProtection(): ?SpamProtection
    {
        return $this->spamProtection ?? null;
    }

    /**
     * @param MailSystemSettings $mailsystem
     * @return self
     */
    public function withMailsystem(MailSystemSettings $mailsystem): self
    {
        $clone = clone $this;
        $clone->mailsystem = $mailsystem;

        return $clone;
    }

    /**
     * @param string $name
     * @return self
     */
    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, static::$schema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    /**
     * @param string $passwordHash
     * @return self
     */
    public function withPasswordHash(string $passwordHash): self
    {
        $validator = new Validator();
        $validator->validate($passwordHash, static::$schema['properties']['passwordHash']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->passwordHash = $passwordHash;

        return $clone;
    }

    /**
     * @param int $quotaInBytes
     * @return self
     */
    public function withQuotaInBytes(int $quotaInBytes): self
    {
        $validator = new Validator();
        $validator->validate($quotaInBytes, static::$schema['properties']['quotaInBytes']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->quotaInBytes = $quotaInBytes;

        return $clone;
    }

    /**
     * @param SpamProtection $spamProtection
     * @return self
     */
    public function withSpamProtection(SpamProtection $spamProtection): self
    {
        $clone = clone $this;
        $clone->spamProtection = $spamProtection;

        return $clone;
    }

    /**
     * @return self
     */
    public function withoutSpamProtection(): self
    {
        $clone = clone $this;
        unset($clone->spamProtection);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Mailbox Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Mailbox
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $mailsystem = MailSystemSettings::buildFromInput($input->{'mailsystem'}, validate: $validate);
        $name = $input->{'name'};
        $passwordHash = $input->{'passwordHash'};
        $quotaInBytes = (int)($input->{'quotaInBytes'});
        $spamProtection = null;
        if (isset($input->{'spamProtection'})) {
            $spamProtection = SpamProtection::buildFromInput($input->{'spamProtection'}, validate: $validate);
        }

        $obj = new self($mailsystem, $name, $passwordHash, $quotaInBytes);
        $obj->spamProtection = $spamProtection;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['mailsystem'] = $this->mailsystem->toJson();
        $output['name'] = $this->name;
        $output['passwordHash'] = $this->passwordHash;
        $output['quotaInBytes'] = $this->quotaInBytes;
        if (isset($this->spamProtection)) {
            $output['spamProtection'] = $this->spamProtection->toJson();
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
