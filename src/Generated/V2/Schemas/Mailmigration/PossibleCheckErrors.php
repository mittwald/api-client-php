<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Mailmigration;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.mailmigration.PossibleCheckErrors.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class PossibleCheckErrors
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'alreadyExistingMailAddress' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorAlreadyExistingMailAddress',
                ],
                'type' => 'array',
            ],
            'ambiguousMailAddressDelivery' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery',
                ],
                'type' => 'array',
            ],
            'ambiguousMailboxDelivery' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery',
                ],
                'type' => 'array',
            ],
            'catchAllMissingAddress' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorCatchAllMissingAddress',
                ],
                'type' => 'array',
            ],
            'catchAllTargetWithoutAlias' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias',
                ],
                'type' => 'array',
            ],
            'missingVerifiedIngress' => [
                'items' => [
                    '$ref' => '#/components/schemas/de.mittwald.v1.mailmigration.CheckMigrationIsPossibleErrorMissingVerifiedIngress',
                ],
                'type' => 'array',
            ],
        ],
        'required' => [
            'ambiguousMailAddressDelivery',
            'ambiguousMailboxDelivery',
            'catchAllMissingAddress',
            'catchAllTargetWithoutAlias',
            'missingVerifiedIngress',
            'alreadyExistingMailAddress',
        ],
        'type' => 'object',
    ];

    /**
     * @var CheckMigrationIsPossibleErrorAlreadyExistingMailAddress[]
     */
    private array $alreadyExistingMailAddress;

    /**
     * @var CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery[]
     */
    private array $ambiguousMailAddressDelivery;

    /**
     * @var CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery[]
     */
    private array $ambiguousMailboxDelivery;

    /**
     * @var CheckMigrationIsPossibleErrorCatchAllMissingAddress[]
     */
    private array $catchAllMissingAddress;

    /**
     * @var CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias[]
     */
    private array $catchAllTargetWithoutAlias;

    /**
     * @var CheckMigrationIsPossibleErrorMissingVerifiedIngress[]
     */
    private array $missingVerifiedIngress;

    /**
     * @param CheckMigrationIsPossibleErrorAlreadyExistingMailAddress[] $alreadyExistingMailAddress
     * @param CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery[] $ambiguousMailAddressDelivery
     * @param CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery[] $ambiguousMailboxDelivery
     * @param CheckMigrationIsPossibleErrorCatchAllMissingAddress[] $catchAllMissingAddress
     * @param CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias[] $catchAllTargetWithoutAlias
     * @param CheckMigrationIsPossibleErrorMissingVerifiedIngress[] $missingVerifiedIngress
     */
    public function __construct(array $alreadyExistingMailAddress, array $ambiguousMailAddressDelivery, array $ambiguousMailboxDelivery, array $catchAllMissingAddress, array $catchAllTargetWithoutAlias, array $missingVerifiedIngress)
    {
        $this->alreadyExistingMailAddress = $alreadyExistingMailAddress;
        $this->ambiguousMailAddressDelivery = $ambiguousMailAddressDelivery;
        $this->ambiguousMailboxDelivery = $ambiguousMailboxDelivery;
        $this->catchAllMissingAddress = $catchAllMissingAddress;
        $this->catchAllTargetWithoutAlias = $catchAllTargetWithoutAlias;
        $this->missingVerifiedIngress = $missingVerifiedIngress;
    }

    /**
     * @return CheckMigrationIsPossibleErrorAlreadyExistingMailAddress[]
     */
    public function getAlreadyExistingMailAddress(): array
    {
        return $this->alreadyExistingMailAddress;
    }

    /**
     * @return CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery[]
     */
    public function getAmbiguousMailAddressDelivery(): array
    {
        return $this->ambiguousMailAddressDelivery;
    }

    /**
     * @return CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery[]
     */
    public function getAmbiguousMailboxDelivery(): array
    {
        return $this->ambiguousMailboxDelivery;
    }

    /**
     * @return CheckMigrationIsPossibleErrorCatchAllMissingAddress[]
     */
    public function getCatchAllMissingAddress(): array
    {
        return $this->catchAllMissingAddress;
    }

    /**
     * @return CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias[]
     */
    public function getCatchAllTargetWithoutAlias(): array
    {
        return $this->catchAllTargetWithoutAlias;
    }

    /**
     * @return CheckMigrationIsPossibleErrorMissingVerifiedIngress[]
     */
    public function getMissingVerifiedIngress(): array
    {
        return $this->missingVerifiedIngress;
    }

    /**
     * @param CheckMigrationIsPossibleErrorAlreadyExistingMailAddress[] $alreadyExistingMailAddress
     */
    public function withAlreadyExistingMailAddress(array $alreadyExistingMailAddress): self
    {
        $clone = clone $this;
        $clone->alreadyExistingMailAddress = $alreadyExistingMailAddress;

        return $clone;
    }

    /**
     * @param CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery[] $ambiguousMailAddressDelivery
     */
    public function withAmbiguousMailAddressDelivery(array $ambiguousMailAddressDelivery): self
    {
        $clone = clone $this;
        $clone->ambiguousMailAddressDelivery = $ambiguousMailAddressDelivery;

        return $clone;
    }

    /**
     * @param CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery[] $ambiguousMailboxDelivery
     */
    public function withAmbiguousMailboxDelivery(array $ambiguousMailboxDelivery): self
    {
        $clone = clone $this;
        $clone->ambiguousMailboxDelivery = $ambiguousMailboxDelivery;

        return $clone;
    }

    /**
     * @param CheckMigrationIsPossibleErrorCatchAllMissingAddress[] $catchAllMissingAddress
     */
    public function withCatchAllMissingAddress(array $catchAllMissingAddress): self
    {
        $clone = clone $this;
        $clone->catchAllMissingAddress = $catchAllMissingAddress;

        return $clone;
    }

    /**
     * @param CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias[] $catchAllTargetWithoutAlias
     */
    public function withCatchAllTargetWithoutAlias(array $catchAllTargetWithoutAlias): self
    {
        $clone = clone $this;
        $clone->catchAllTargetWithoutAlias = $catchAllTargetWithoutAlias;

        return $clone;
    }

    /**
     * @param CheckMigrationIsPossibleErrorMissingVerifiedIngress[] $missingVerifiedIngress
     */
    public function withMissingVerifiedIngress(array $missingVerifiedIngress): self
    {
        $clone = clone $this;
        $clone->missingVerifiedIngress = $missingVerifiedIngress;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return PossibleCheckErrors Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): PossibleCheckErrors
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $alreadyExistingMailAddress = array_map(fn (array|object $i): CheckMigrationIsPossibleErrorAlreadyExistingMailAddress => CheckMigrationIsPossibleErrorAlreadyExistingMailAddress::buildFromInput($i, validate: $validate), $input->{'alreadyExistingMailAddress'});
        $ambiguousMailAddressDelivery = array_map(fn (array|object $i): CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery => CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery::buildFromInput($i, validate: $validate), $input->{'ambiguousMailAddressDelivery'});
        $ambiguousMailboxDelivery = array_map(fn (array|object $i): CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery => CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery::buildFromInput($i, validate: $validate), $input->{'ambiguousMailboxDelivery'});
        $catchAllMissingAddress = array_map(fn (array|object $i): CheckMigrationIsPossibleErrorCatchAllMissingAddress => CheckMigrationIsPossibleErrorCatchAllMissingAddress::buildFromInput($i, validate: $validate), $input->{'catchAllMissingAddress'});
        $catchAllTargetWithoutAlias = array_map(fn (array|object $i): CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias => CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias::buildFromInput($i, validate: $validate), $input->{'catchAllTargetWithoutAlias'});
        $missingVerifiedIngress = array_map(fn (array|object $i): CheckMigrationIsPossibleErrorMissingVerifiedIngress => CheckMigrationIsPossibleErrorMissingVerifiedIngress::buildFromInput($i, validate: $validate), $input->{'missingVerifiedIngress'});

        $obj = new self($alreadyExistingMailAddress, $ambiguousMailAddressDelivery, $ambiguousMailboxDelivery, $catchAllMissingAddress, $catchAllTargetWithoutAlias, $missingVerifiedIngress);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['alreadyExistingMailAddress'] = array_map(fn (CheckMigrationIsPossibleErrorAlreadyExistingMailAddress $i): array => $i->toJson(), $this->alreadyExistingMailAddress);
        $output['ambiguousMailAddressDelivery'] = array_map(fn (CheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery $i): array => $i->toJson(), $this->ambiguousMailAddressDelivery);
        $output['ambiguousMailboxDelivery'] = array_map(fn (CheckMigrationIsPossibleErrorAmbiguousMailboxDelivery $i): array => $i->toJson(), $this->ambiguousMailboxDelivery);
        $output['catchAllMissingAddress'] = array_map(fn (CheckMigrationIsPossibleErrorCatchAllMissingAddress $i): array => $i->toJson(), $this->catchAllMissingAddress);
        $output['catchAllTargetWithoutAlias'] = array_map(fn (CheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias $i): array => $i->toJson(), $this->catchAllTargetWithoutAlias);
        $output['missingVerifiedIngress'] = array_map(fn (CheckMigrationIsPossibleErrorMissingVerifiedIngress $i): array => $i->toJson(), $this->missingVerifiedIngress);

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
