<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Mail;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.mail.MailArchiveAuthenticationResponse.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class MailArchiveAuthenticationResponse
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'archive' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'auth' => [
                'type' => 'string',
            ],
            'displayName' => [
                'type' => 'string',
            ],
            'error' => [
                'type' => 'string',
            ],
            'mail' => [
                'items' => [
                    'type' => 'string',
                ],
                'type' => 'array',
            ],
            'role' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'auth',
        ],
        'type' => 'object',
    ];

    /**
     * @var string[]|null
     */
    private ?array $archive = null;

    private string $auth;

    private ?string $displayName = null;

    private ?string $error = null;

    /**
     * @var string[]|null
     */
    private ?array $mail = null;

    private ?string $role = null;

    public function __construct(string $auth)
    {
        $this->auth = $auth;
    }

    /**
     * @return string[]|null
     */
    public function getArchive(): ?array
    {
        return $this->archive ?? null;
    }

    public function getAuth(): string
    {
        return $this->auth;
    }

    public function getDisplayName(): ?string
    {
        return $this->displayName ?? null;
    }

    public function getError(): ?string
    {
        return $this->error ?? null;
    }

    /**
     * @return string[]|null
     */
    public function getMail(): ?array
    {
        return $this->mail ?? null;
    }

    public function getRole(): ?string
    {
        return $this->role ?? null;
    }

    /**
     * @param string[] $archive
     */
    public function withArchive(array $archive): self
    {
        $validator = new Validator();
        $validator->validate($archive, self::$internalValidationSchema['properties']['archive']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->archive = $archive;

        return $clone;
    }

    public function withoutArchive(): self
    {
        $clone = clone $this;
        unset($clone->archive);

        return $clone;
    }

    public function withAuth(string $auth): self
    {
        $validator = new Validator();
        $validator->validate($auth, self::$internalValidationSchema['properties']['auth']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->auth = $auth;

        return $clone;
    }

    public function withDisplayName(string $displayName): self
    {
        $validator = new Validator();
        $validator->validate($displayName, self::$internalValidationSchema['properties']['displayName']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->displayName = $displayName;

        return $clone;
    }

    public function withoutDisplayName(): self
    {
        $clone = clone $this;
        unset($clone->displayName);

        return $clone;
    }

    public function withError(string $error): self
    {
        $validator = new Validator();
        $validator->validate($error, self::$internalValidationSchema['properties']['error']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->error = $error;

        return $clone;
    }

    public function withoutError(): self
    {
        $clone = clone $this;
        unset($clone->error);

        return $clone;
    }

    /**
     * @param string[] $mail
     */
    public function withMail(array $mail): self
    {
        $validator = new Validator();
        $validator->validate($mail, self::$internalValidationSchema['properties']['mail']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->mail = $mail;

        return $clone;
    }

    public function withoutMail(): self
    {
        $clone = clone $this;
        unset($clone->mail);

        return $clone;
    }

    public function withRole(string $role): self
    {
        $validator = new Validator();
        $validator->validate($role, self::$internalValidationSchema['properties']['role']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->role = $role;

        return $clone;
    }

    public function withoutRole(): self
    {
        $clone = clone $this;
        unset($clone->role);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return MailArchiveAuthenticationResponse Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): MailArchiveAuthenticationResponse
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $archive = null;
        if (isset($input->{'archive'})) {
            $archive = $input->{'archive'};
        }
        $auth = $input->{'auth'};
        $displayName = null;
        if (isset($input->{'displayName'})) {
            $displayName = $input->{'displayName'};
        }
        $error = null;
        if (isset($input->{'error'})) {
            $error = $input->{'error'};
        }
        $mail = null;
        if (isset($input->{'mail'})) {
            $mail = $input->{'mail'};
        }
        $role = null;
        if (isset($input->{'role'})) {
            $role = $input->{'role'};
        }

        $obj = new self($auth);
        $obj->archive = $archive;
        $obj->displayName = $displayName;
        $obj->error = $error;
        $obj->mail = $mail;
        $obj->role = $role;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->archive)) {
            $output['archive'] = $this->archive;
        }
        $output['auth'] = $this->auth;
        if (isset($this->displayName)) {
            $output['displayName'] = $this->displayName;
        }
        if (isset($this->error)) {
            $output['error'] = $this->error;
        }
        if (isset($this->mail)) {
            $output['mail'] = $this->mail;
        }
        if (isset($this->role)) {
            $output['role'] = $this->role;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
