<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Mail;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.mail.MailAddressInternal.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class MailAddressInternalMailbox
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'mailsystemSettings' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.mail.MailsystemSettings',
            ],
            'name' => [
                'type' => 'string',
            ],
            'passwordUpdatedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'sendingEnabled' => [
                'type' => 'boolean',
            ],
            'spamProtection' => [
                'properties' => [
                    'active' => [
                        'type' => 'boolean',
                    ],
                    'autoDeleteSpam' => [
                        'type' => 'boolean',
                    ],
                    'folder' => [
                        'enum' => [
                            'spam',
                            'inbox',
                        ],
                        'type' => 'string',
                    ],
                    'relocationMinSpamScore' => [
                        'maximum' => 10,
                        'type' => 'integer',
                    ],
                ],
                'required' => [
                    'active',
                    'folder',
                    'relocationMinSpamScore',
                    'autoDeleteSpam',
                ],
                'type' => 'object',
            ],
            'storageInBytes' => [
                'properties' => [
                    'current' => [
                        'properties' => [
                            'updatedAt' => [
                                'format' => 'date-time',
                                'type' => 'string',
                            ],
                            'value' => [
                                'type' => 'number',
                            ],
                        ],
                        'required' => [
                            'value',
                            'updatedAt',
                        ],
                        'type' => 'object',
                    ],
                    'limit' => [
                        'type' => 'number',
                    ],
                ],
                'required' => [
                    'limit',
                    'current',
                ],
                'type' => 'object',
            ],
        ],
        'required' => [
            'name',
            'sendingEnabled',
            'spamProtection',
            'storageInBytes',
            'passwordUpdatedAt',
            'mailsystemSettings',
        ],
        'type' => 'object',
    ];

    private MailsystemSettings $mailsystemSettings;

    private string $name;

    private DateTime $passwordUpdatedAt;

    private bool $sendingEnabled;

    private MailAddressInternalMailboxSpamProtection $spamProtection;

    private MailAddressInternalMailboxStorageInBytes $storageInBytes;

    public function __construct(MailsystemSettings $mailsystemSettings, string $name, DateTime $passwordUpdatedAt, bool $sendingEnabled, MailAddressInternalMailboxSpamProtection $spamProtection, MailAddressInternalMailboxStorageInBytes $storageInBytes)
    {
        $this->mailsystemSettings = $mailsystemSettings;
        $this->name = $name;
        $this->passwordUpdatedAt = $passwordUpdatedAt;
        $this->sendingEnabled = $sendingEnabled;
        $this->spamProtection = $spamProtection;
        $this->storageInBytes = $storageInBytes;
    }

    public function getMailsystemSettings(): MailsystemSettings
    {
        return $this->mailsystemSettings;
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function getPasswordUpdatedAt(): DateTime
    {
        return $this->passwordUpdatedAt;
    }

    public function getSendingEnabled(): bool
    {
        return $this->sendingEnabled;
    }

    public function getSpamProtection(): MailAddressInternalMailboxSpamProtection
    {
        return $this->spamProtection;
    }

    public function getStorageInBytes(): MailAddressInternalMailboxStorageInBytes
    {
        return $this->storageInBytes;
    }

    public function withMailsystemSettings(MailsystemSettings $mailsystemSettings): self
    {
        $clone = clone $this;
        $clone->mailsystemSettings = $mailsystemSettings;

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, static::$schema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withPasswordUpdatedAt(DateTime $passwordUpdatedAt): self
    {
        $clone = clone $this;
        $clone->passwordUpdatedAt = $passwordUpdatedAt;

        return $clone;
    }

    public function withSendingEnabled(bool $sendingEnabled): self
    {
        $validator = new Validator();
        $validator->validate($sendingEnabled, static::$schema['properties']['sendingEnabled']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->sendingEnabled = $sendingEnabled;

        return $clone;
    }

    public function withSpamProtection(MailAddressInternalMailboxSpamProtection $spamProtection): self
    {
        $clone = clone $this;
        $clone->spamProtection = $spamProtection;

        return $clone;
    }

    public function withStorageInBytes(MailAddressInternalMailboxStorageInBytes $storageInBytes): self
    {
        $clone = clone $this;
        $clone->storageInBytes = $storageInBytes;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return MailAddressInternalMailbox Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): MailAddressInternalMailbox
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $mailsystemSettings = MailsystemSettings::buildFromInput($input->{'mailsystemSettings'}, validate: $validate);
        $name = $input->{'name'};
        $passwordUpdatedAt = new DateTime($input->{'passwordUpdatedAt'});
        $sendingEnabled = (bool)($input->{'sendingEnabled'});
        $spamProtection = MailAddressInternalMailboxSpamProtection::buildFromInput($input->{'spamProtection'}, validate: $validate);
        $storageInBytes = MailAddressInternalMailboxStorageInBytes::buildFromInput($input->{'storageInBytes'}, validate: $validate);

        $obj = new self($mailsystemSettings, $name, $passwordUpdatedAt, $sendingEnabled, $spamProtection, $storageInBytes);

        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['mailsystemSettings'] = $this->mailsystemSettings->toJson();
        $output['name'] = $this->name;
        $output['passwordUpdatedAt'] = ($this->passwordUpdatedAt)->format(DateTime::ATOM);
        $output['sendingEnabled'] = $this->sendingEnabled;
        $output['spamProtection'] = ($this->spamProtection)->toJson();
        $output['storageInBytes'] = ($this->storageInBytes)->toJson();

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, static::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        $this->passwordUpdatedAt = clone $this->passwordUpdatedAt;
        $this->spamProtection = clone $this->spamProtection;
        $this->storageInBytes = clone $this->storageInBytes;
    }
}
