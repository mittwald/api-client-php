<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Backup;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for
 * de.mittwald.v1.backup.ProjectBackupRestoreDatabaseRequest.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ProjectBackupRestoreDatabaseRequest
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'databaseName' => [
                'type' => 'string',
            ],
            'destination' => [
                'oneOf' => [
                    [
                        '$ref' => '#/components/schemas/de.mittwald.v1.backup.NewDatabase',
                    ],
                    [
                        '$ref' => '#/components/schemas/de.mittwald.v1.backup.ExistingDatabase',
                    ],
                ],
            ],
        ],
        'required' => [
            'databaseName',
        ],
        'type' => 'object',
    ];

    private string $databaseName;

    private NewDatabase|ExistingDatabase|null $destination = null;

    public function __construct(string $databaseName)
    {
        $this->databaseName = $databaseName;
    }

    public function getDatabaseName(): string
    {
        return $this->databaseName;
    }

    public function getDestination(): ExistingDatabase|NewDatabase|null
    {
        return $this->destination;
    }

    public function withDatabaseName(string $databaseName): self
    {
        $validator = new Validator();
        $validator->validate($databaseName, self::$internalValidationSchema['properties']['databaseName']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->databaseName = $databaseName;

        return $clone;
    }

    public function withDestination(ExistingDatabase|NewDatabase $destination): self
    {
        $clone = clone $this;
        $clone->destination = $destination;

        return $clone;
    }

    public function withoutDestination(): self
    {
        $clone = clone $this;
        unset($clone->destination);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ProjectBackupRestoreDatabaseRequest Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ProjectBackupRestoreDatabaseRequest
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $databaseName = $input->{'databaseName'};
        $destination = null;
        if (isset($input->{'destination'})) {
            $destination = match (true) {
                NewDatabase::validateInput($input->{'destination'}, true) => NewDatabase::buildFromInput($input->{'destination'}, validate: $validate),
                ExistingDatabase::validateInput($input->{'destination'}, true) => ExistingDatabase::buildFromInput($input->{'destination'}, validate: $validate),
                default => throw new InvalidArgumentException("could not build property 'destination' from JSON"),
            };
        }

        $obj = new self($databaseName);
        $obj->destination = $destination;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['databaseName'] = $this->databaseName;
        if (isset($this->destination)) {
            $output['destination'] = match (true) {
                ($this->destination) instanceof NewDatabase, ($this->destination) instanceof ExistingDatabase => $this->destination->toJson(),
            };
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->destination)) {
            $this->destination = match (true) {
                ($this->destination) instanceof NewDatabase, ($this->destination) instanceof ExistingDatabase => $this->destination,
            };
        }
    }
}
