<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Backup;

use DateTime;
use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.backup.ProjectBackup.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ProjectBackup
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $schema = [
        'properties' => [
            'createdAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'deletable' => [
                'type' => 'boolean',
            ],
            'description' => [
                'example' => 'I\'m a ProjectBackup',
                'type' => 'string',
            ],
            'expiresAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'export' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.backup.ProjectBackupExport',
            ],
            'id' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'parentId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'projectId' => [
                'format' => 'uuid',
                'type' => 'string',
            ],
            'requestedAt' => [
                'format' => 'date-time',
                'type' => 'string',
            ],
            'status' => [
                'example' => 'Completed',
                'type' => 'string',
            ],
        ],
        'required' => [
            'id',
            'projectId',
            'status',
            'deletable',
        ],
        'type' => 'object',
    ];

    private ?DateTime $createdAt = null;

    private bool $deletable;

    private ?string $description = null;

    private ?DateTime $expiresAt = null;

    private ?ProjectBackupExport $export = null;

    private string $id;

    private ?string $parentId = null;

    private string $projectId;

    private ?DateTime $requestedAt = null;

    private string $status;

    public function __construct(bool $deletable, string $id, string $projectId, string $status)
    {
        $this->deletable = $deletable;
        $this->id = $id;
        $this->projectId = $projectId;
        $this->status = $status;
    }

    public function getCreatedAt(): ?DateTime
    {
        return $this->createdAt ?? null;
    }

    public function getDeletable(): bool
    {
        return $this->deletable;
    }

    public function getDescription(): ?string
    {
        return $this->description ?? null;
    }

    public function getExpiresAt(): ?DateTime
    {
        return $this->expiresAt ?? null;
    }

    public function getExport(): ?ProjectBackupExport
    {
        return $this->export ?? null;
    }

    public function getId(): string
    {
        return $this->id;
    }

    public function getParentId(): ?string
    {
        return $this->parentId ?? null;
    }

    public function getProjectId(): string
    {
        return $this->projectId;
    }

    public function getRequestedAt(): ?DateTime
    {
        return $this->requestedAt ?? null;
    }

    public function getStatus(): string
    {
        return $this->status;
    }

    public function withCreatedAt(DateTime $createdAt): self
    {
        $clone = clone $this;
        $clone->createdAt = $createdAt;

        return $clone;
    }

    public function withoutCreatedAt(): self
    {
        $clone = clone $this;
        unset($clone->createdAt);

        return $clone;
    }

    public function withDeletable(bool $deletable): self
    {
        $validator = new Validator();
        $validator->validate($deletable, self::$schema['properties']['deletable']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->deletable = $deletable;

        return $clone;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$schema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withoutDescription(): self
    {
        $clone = clone $this;
        unset($clone->description);

        return $clone;
    }

    public function withExpiresAt(DateTime $expiresAt): self
    {
        $clone = clone $this;
        $clone->expiresAt = $expiresAt;

        return $clone;
    }

    public function withoutExpiresAt(): self
    {
        $clone = clone $this;
        unset($clone->expiresAt);

        return $clone;
    }

    public function withExport(ProjectBackupExport $export): self
    {
        $clone = clone $this;
        $clone->export = $export;

        return $clone;
    }

    public function withoutExport(): self
    {
        $clone = clone $this;
        unset($clone->export);

        return $clone;
    }

    public function withId(string $id): self
    {
        $validator = new Validator();
        $validator->validate($id, self::$schema['properties']['id']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->id = $id;

        return $clone;
    }

    public function withParentId(string $parentId): self
    {
        $validator = new Validator();
        $validator->validate($parentId, self::$schema['properties']['parentId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->parentId = $parentId;

        return $clone;
    }

    public function withoutParentId(): self
    {
        $clone = clone $this;
        unset($clone->parentId);

        return $clone;
    }

    public function withProjectId(string $projectId): self
    {
        $validator = new Validator();
        $validator->validate($projectId, self::$schema['properties']['projectId']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->projectId = $projectId;

        return $clone;
    }

    public function withRequestedAt(DateTime $requestedAt): self
    {
        $clone = clone $this;
        $clone->requestedAt = $requestedAt;

        return $clone;
    }

    public function withoutRequestedAt(): self
    {
        $clone = clone $this;
        unset($clone->requestedAt);

        return $clone;
    }

    public function withStatus(string $status): self
    {
        $validator = new Validator();
        $validator->validate($status, self::$schema['properties']['status']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->status = $status;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ProjectBackup Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ProjectBackup
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $createdAt = null;
        if (isset($input->{'createdAt'})) {
            $createdAt = new DateTime($input->{'createdAt'});
        }
        $deletable = (bool)($input->{'deletable'});
        $description = null;
        if (isset($input->{'description'})) {
            $description = $input->{'description'};
        }
        $expiresAt = null;
        if (isset($input->{'expiresAt'})) {
            $expiresAt = new DateTime($input->{'expiresAt'});
        }
        $export = null;
        if (isset($input->{'export'})) {
            $export = ProjectBackupExport::buildFromInput($input->{'export'}, validate: $validate);
        }
        $id = $input->{'id'};
        $parentId = null;
        if (isset($input->{'parentId'})) {
            $parentId = $input->{'parentId'};
        }
        $projectId = $input->{'projectId'};
        $requestedAt = null;
        if (isset($input->{'requestedAt'})) {
            $requestedAt = new DateTime($input->{'requestedAt'});
        }
        $status = $input->{'status'};

        $obj = new self($deletable, $id, $projectId, $status);
        $obj->createdAt = $createdAt;
        $obj->description = $description;
        $obj->expiresAt = $expiresAt;
        $obj->export = $export;
        $obj->parentId = $parentId;
        $obj->requestedAt = $requestedAt;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->createdAt)) {
            $output['createdAt'] = ($this->createdAt)->format(DateTime::ATOM);
        }
        $output['deletable'] = $this->deletable;
        if (isset($this->description)) {
            $output['description'] = $this->description;
        }
        if (isset($this->expiresAt)) {
            $output['expiresAt'] = ($this->expiresAt)->format(DateTime::ATOM);
        }
        if (isset($this->export)) {
            $output['export'] = $this->export->toJson();
        }
        $output['id'] = $this->id;
        if (isset($this->parentId)) {
            $output['parentId'] = $this->parentId;
        }
        $output['projectId'] = $this->projectId;
        if (isset($this->requestedAt)) {
            $output['requestedAt'] = ($this->requestedAt)->format(DateTime::ATOM);
        }
        $output['status'] = $this->status;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$schema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
        if (isset($this->createdAt)) {
            $this->createdAt = clone $this->createdAt;
        }
        if (isset($this->expiresAt)) {
            $this->expiresAt = clone $this->expiresAt;
        }
        if (isset($this->requestedAt)) {
            $this->requestedAt = clone $this->requestedAt;
        }
    }
}
