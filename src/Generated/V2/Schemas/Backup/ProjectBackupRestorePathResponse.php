<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Backup;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.backup.ProjectBackupRestorePathResponse.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class ProjectBackupRestorePathResponse
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'clearTargetPath' => [
                'default' => false,
                'type' => 'boolean',
            ],
            'determinedSourcePath' => [
                'type' => 'string',
            ],
            'determinedTargetPath' => [
                'type' => 'string',
            ],
            'phase' => [
                '$ref' => '#/components/schemas/de.mittwald.v1.backup.RestorePathPhase',
            ],
            'sourcePath' => [
                'type' => 'string',
            ],
            'targetPath' => [
                'type' => 'string',
            ],
        ],
        'required' => [
            'determinedSourcePath',
            'determinedTargetPath',
            'phase',
        ],
        'type' => 'object',
    ];

    private bool $clearTargetPath = false;

    private string $determinedSourcePath;

    private string $determinedTargetPath;

    private RestorePathPhase $phase;

    private ?string $sourcePath = null;

    private ?string $targetPath = null;

    public function __construct(string $determinedSourcePath, string $determinedTargetPath, RestorePathPhase $phase)
    {
        $this->determinedSourcePath = $determinedSourcePath;
        $this->determinedTargetPath = $determinedTargetPath;
        $this->phase = $phase;
    }

    public function getClearTargetPath(): bool
    {
        return $this->clearTargetPath;
    }

    public function getDeterminedSourcePath(): string
    {
        return $this->determinedSourcePath;
    }

    public function getDeterminedTargetPath(): string
    {
        return $this->determinedTargetPath;
    }

    public function getPhase(): RestorePathPhase
    {
        return $this->phase;
    }

    public function getSourcePath(): ?string
    {
        return $this->sourcePath ?? null;
    }

    public function getTargetPath(): ?string
    {
        return $this->targetPath ?? null;
    }

    public function withClearTargetPath(bool $clearTargetPath): self
    {
        $validator = new Validator();
        $validator->validate($clearTargetPath, self::$internalValidationSchema['properties']['clearTargetPath']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->clearTargetPath = $clearTargetPath;

        return $clone;
    }

    public function withDeterminedSourcePath(string $determinedSourcePath): self
    {
        $validator = new Validator();
        $validator->validate($determinedSourcePath, self::$internalValidationSchema['properties']['determinedSourcePath']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->determinedSourcePath = $determinedSourcePath;

        return $clone;
    }

    public function withDeterminedTargetPath(string $determinedTargetPath): self
    {
        $validator = new Validator();
        $validator->validate($determinedTargetPath, self::$internalValidationSchema['properties']['determinedTargetPath']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->determinedTargetPath = $determinedTargetPath;

        return $clone;
    }

    public function withPhase(RestorePathPhase $phase): self
    {
        $clone = clone $this;
        $clone->phase = $phase;

        return $clone;
    }

    public function withSourcePath(string $sourcePath): self
    {
        $validator = new Validator();
        $validator->validate($sourcePath, self::$internalValidationSchema['properties']['sourcePath']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->sourcePath = $sourcePath;

        return $clone;
    }

    public function withoutSourcePath(): self
    {
        $clone = clone $this;
        unset($clone->sourcePath);

        return $clone;
    }

    public function withTargetPath(string $targetPath): self
    {
        $validator = new Validator();
        $validator->validate($targetPath, self::$internalValidationSchema['properties']['targetPath']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->targetPath = $targetPath;

        return $clone;
    }

    public function withoutTargetPath(): self
    {
        $clone = clone $this;
        unset($clone->targetPath);

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return ProjectBackupRestorePathResponse Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): ProjectBackupRestorePathResponse
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $clearTargetPath = false;
        if (isset($input->{'clearTargetPath'})) {
            $clearTargetPath = (bool)($input->{'clearTargetPath'});
        }
        $determinedSourcePath = $input->{'determinedSourcePath'};
        $determinedTargetPath = $input->{'determinedTargetPath'};
        $phase = RestorePathPhase::from($input->{'phase'});
        $sourcePath = null;
        if (isset($input->{'sourcePath'})) {
            $sourcePath = $input->{'sourcePath'};
        }
        $targetPath = null;
        if (isset($input->{'targetPath'})) {
            $targetPath = $input->{'targetPath'};
        }

        $obj = new self($determinedSourcePath, $determinedTargetPath, $phase);
        $obj->clearTargetPath = $clearTargetPath;
        $obj->sourcePath = $sourcePath;
        $obj->targetPath = $targetPath;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        $output['clearTargetPath'] = $this->clearTargetPath;
        $output['determinedSourcePath'] = $this->determinedSourcePath;
        $output['determinedTargetPath'] = $this->determinedTargetPath;
        $output['phase'] = $this->phase->value;
        if (isset($this->sourcePath)) {
            $output['sourcePath'] = $this->sourcePath;
        }
        if (isset($this->targetPath)) {
            $output['targetPath'] = $this->targetPath;
        }

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
