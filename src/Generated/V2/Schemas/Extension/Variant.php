<?php

declare(strict_types=1);

namespace Mittwald\ApiClient\Generated\V2\Schemas\Extension;

use InvalidArgumentException;
use JsonSchema\Validator;

/**
 * Auto-generated class for de.mittwald.v1.extension.Variant.
 *
 * DO NOT EDIT; this class was generated by the mittwald/api-client-builder package
 * (https://github.com/mittwald/api-client-php-builder). Please make any changes
 * there.
 *
 * @generated
 * @see https://github.com/mittwald/api-client-php-builder
 */
class Variant
{
    /**
     * Schema used to validate input for creating instances of this class
     */
    private static array $internalValidationSchema = [
        'properties' => [
            'description' => [
                'description' => 'Description of Variant.',
                'type' => 'string',
            ],
            'key' => [
                'description' => 'Key that needs to be unique in Variant.',
                'type' => 'string',
            ],
            'name' => [
                'description' => 'Name of Variant.',
                'type' => 'string',
            ],
            'priceInCents' => [
                'description' => 'Price in cents.',
                'type' => 'number',
            ],
        ],
        'required' => [
            'key',
            'priceInCents',
        ],
        'type' => 'object',
    ];

    /**
     * Description of Variant.
     */
    private ?string $description = null;

    /**
     * Key that needs to be unique in Variant.
     */
    private string $key;

    /**
     * Name of Variant.
     */
    private ?string $name = null;

    /**
     * Price in cents.
     */
    private int|float $priceInCents;

    public function __construct(string $key, int|float $priceInCents)
    {
        $this->key = $key;
        $this->priceInCents = $priceInCents;
    }

    public function getDescription(): ?string
    {
        return $this->description ?? null;
    }

    public function getKey(): string
    {
        return $this->key;
    }

    public function getName(): ?string
    {
        return $this->name ?? null;
    }

    public function getPriceInCents(): int|float
    {
        return $this->priceInCents;
    }

    public function withDescription(string $description): self
    {
        $validator = new Validator();
        $validator->validate($description, self::$internalValidationSchema['properties']['description']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->description = $description;

        return $clone;
    }

    public function withoutDescription(): self
    {
        $clone = clone $this;
        unset($clone->description);

        return $clone;
    }

    public function withKey(string $key): self
    {
        $validator = new Validator();
        $validator->validate($key, self::$internalValidationSchema['properties']['key']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->key = $key;

        return $clone;
    }

    public function withName(string $name): self
    {
        $validator = new Validator();
        $validator->validate($name, self::$internalValidationSchema['properties']['name']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->name = $name;

        return $clone;
    }

    public function withoutName(): self
    {
        $clone = clone $this;
        unset($clone->name);

        return $clone;
    }

    public function withPriceInCents(int|float $priceInCents): self
    {
        $validator = new Validator();
        $validator->validate($priceInCents, self::$internalValidationSchema['properties']['priceInCents']);
        if (!$validator->isValid()) {
            throw new InvalidArgumentException($validator->getErrors()[0]['message']);
        }

        $clone = clone $this;
        $clone->priceInCents = $priceInCents;

        return $clone;
    }

    /**
     * Builds a new instance from an input array
     *
     * @param array|object $input Input data
     * @param bool $validate Set this to false to skip validation; use at own risk
     * @return Variant Created instance
     * @throws InvalidArgumentException
     */
    public static function buildFromInput(array|object $input, bool $validate = true): Variant
    {
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        if ($validate) {
            static::validateInput($input);
        }

        $description = null;
        if (isset($input->{'description'})) {
            $description = $input->{'description'};
        }
        $key = $input->{'key'};
        $name = null;
        if (isset($input->{'name'})) {
            $name = $input->{'name'};
        }
        $priceInCents = str_contains((string)($input->{'priceInCents'}), '.') ? (float)($input->{'priceInCents'}) : (int)($input->{'priceInCents'});

        $obj = new self($key, $priceInCents);
        $obj->description = $description;
        $obj->name = $name;
        return $obj;
    }

    /**
     * Converts this object back to a simple array that can be JSON-serialized
     *
     * @return array Converted array
     */
    public function toJson(): array
    {
        $output = [];
        if (isset($this->description)) {
            $output['description'] = $this->description;
        }
        $output['key'] = $this->key;
        if (isset($this->name)) {
            $output['name'] = $this->name;
        }
        $output['priceInCents'] = $this->priceInCents;

        return $output;
    }

    /**
     * Validates an input array
     *
     * @param array|object $input Input data
     * @param bool $return Return instead of throwing errors
     * @return bool Validation result
     * @throws InvalidArgumentException
     */
    public static function validateInput(array|object $input, bool $return = false): bool
    {
        $validator = new \Mittwald\ApiClient\Validator\Validator();
        $input = is_array($input) ? Validator::arrayToObjectRecursive($input) : $input;
        $validator->validate($input, self::$internalValidationSchema);

        if (!$validator->isValid() && !$return) {
            $errors = array_map(function (array $e): string {
                return $e["property"] . ": " . $e["message"];
            }, $validator->getErrors());
            throw new InvalidArgumentException(join(", ", $errors));
        }

        return $validator->isValid();
    }

    public function __clone()
    {
    }
}
